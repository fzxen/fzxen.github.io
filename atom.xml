<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zxfan</title>
  
  <subtitle>zxfan&#39;s Blog</subtitle>
  <link href="https://zxffan.github.io/atom.xml" rel="self"/>
  
  <link href="https://zxffan.github.io/"/>
  <updated>2023-06-30T11:14:18.597Z</updated>
  <id>https://zxffan.github.io/</id>
  
  <author>
    <name>zxfan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>架构整洁之道</title>
    <link href="https://zxffan.github.io/posts/a8730dfb.html"/>
    <id>https://zxffan.github.io/posts/a8730dfb.html</id>
    <published>2021-10-29T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Part1-INTRODUCTION-概述"><a href="#Part1-INTRODUCTION-概述" class="headerlink" title="Part1. INTRODUCTION 概述"></a>Part1. INTRODUCTION 概述</h1><p>It doesn’t take a huge amount of knowledge and skill to get a program working. Kids in high school do it all the time. Young men and women in college start billion-dollar businesses based on scrabbling together a few lines of PHP or Ruby. Hoards of junior programmers in cube farms around the world slog through massive requirements documents held in huge issue tracking systems to get their systems to “work” by the sheer brute force of will. The code they produce may not be pretty; but it works. It works because getting something to work—once—just isn’t that hard.</p><blockquote><p>编写并调试一段代码直到成功运行并不需要特别高深的知识和技能，现在的一名普通高中生都可以做到。有的大学生甚至通过拼凑一些 PHP 或 Ruby 代码就可以 创办一个市值 10 亿美元的公司。想象一下，世界上有成群的初级程序员挤在大公司的隔板间里，日复一日地用蛮力将记录在大型问题跟踪系统里的巨型需求文档一点点转化为能实际运行的代码。他们写出的代码可能不够优美，但是确实能够正常工作。因为创造一个能正常运行的系统——哪怕只成功运行一次——还真不是一件特别困难的事。</p></blockquote><p>Getting it right is another matter entirely. Getting software right is hard. It takes knowledge and skills that most young programmers haven’t yet acquired. It requires thought and insight that most programmers don’t take the time to develop. It requires a level of discipline and dedication that most programmers never dreamed they’d need. Mostly, it takes a passion for the craft and the desire to be a professional.</p><blockquote><p>但是将软件架构设计做好就完全另当别论了。软件架构设计是一件非常困难的情，这通常需要大多数程序员所不具备的经验和技能。同时，也不是所有人都愿意花时间来学习和钻研这个方向。做一个好的软件架构师所需要的自律和专注程度可能会让大部分程序员始料未及，更别提软件架构师这个职业本身的社会认同感与人们投身其中的热情了。</p></blockquote><p>And when you get software right, something magical happens: You don’t need hordes of programmers to keep it working. You don’t need massive requirements documents and huge issue tracking systems. You don’t need global cube farms and 24&#x2F;7 programming.</p><blockquote><p>但是，一旦将软件架构做好了，你就会立即体会到其中的奥妙：维持系统正常运转再也不需要成群的程序员了；每个变更的实施也不再需要巨大的需求文档和复杂的任务追踪系统了；程序员们再也不用缩在全球各地的隔板间里，24 x 7（即每天 24 小时，每星期 7 天）地疯狂加班了。</p></blockquote><p>When software is done right, it requires a fraction of the human resources to create and maintain. Changes are simple and rapid. Defects are few and far between. Effort is minimized, and functionality and flexibility are maximized.</p><blockquote><p>采用好的软件架构可以大大节省软件项目构建与维护的人力成本。让每次变更都短小简单，易于实施，并且避免缺陷，用最小的成本，最大程度地满足功能性和灵活性的要求。</p></blockquote><p>Yes, this vision sounds a bit utopian. But I’ve been there; I’ve seen it happen. I’ve worked in projects where the design and architecture of the system made it easy to write and easy to maintain. I’ve experienced projects that required a fraction of the anticipated human resources. I’ve worked on systems that had extremely low defect rates. I’ve seen the extraordinary effect that good software architecture can have on a system, a project, and a team. I’ve been to the promised land.</p><blockquote><p>是的，这可能有点像童话故事一样不可信，但是这些又确实是我的亲身经历。我曾经见过因为采用了好的软件架构设计，使得整个系统构建更简单、维护更容易的情况。我也见过因为采用了好的软件架构设计，整个项目最终比预计所使用的人力资源更少，而且更快地完成了。我真真切切地体会过，好的软件架构设计为整个系统所带来的翻天覆地的变化，绝不忽悠。</p></blockquote><p>But don’t take my word for it. Look at your own experience. Have you experienced the opposite? Have you worked on systems that are so interconnected and intricately coupled that every change, regardless of how trivial, takes weeks and involves huge risks? Have you experienced the impedance of bad code and rotten design? Has the design of the systems you’ve worked on had a huge negative effect on the morale of the team, the trust of the customers, and the patience of the managers? Have you seen teams, departments, and even companies that have been brought down by the rotten structure of their software? Have you been to programming hell?</p><blockquote><p>请读者回头想想自己的亲身经历，你肯定经历过这样的情境：某个系统因为其组件错综复杂，相互耦合紧密，而导致不管多么小的改动都需要数周的恶战才能完成。又或是某个系统中到处充满了腐朽的设计和连篇累牍的恶心代码，处处都是障碍。再或者，你有没有见过哪个系统的设计如此之差，让整个团队的士气低落，客户天天痛苦，项目经理们手足无措？你有没有见过某个软件系统因其架构腐朽不堪.而导致团队流失，部门解散，甚至公司倒闭？作为一名程序员，你在编程时体会过那种生不如死的感觉吗?</p></blockquote><p>I have—and to some extent, most of the rest of us have, too. It is far more common to fight your way through terrible software designs than it is to enjoy the pleasure of working with a good one.</p><blockquote><p>以上这些我也都切身体会过。我相信绝大部分读者也或多或少会有共鸣。好的软件架构太难得了，我们职业生涯的大部分时间可能都在和差的架构做斗争，而没有机会一睹优美的架构究竟是什么样子。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap1-WHAT-IS-DESIGN-AND-ARCHITECTURE-设计与架构到底是什么"><a href="#Chap1-WHAT-IS-DESIGN-AND-ARCHITECTURE-设计与架构到底是什么" class="headerlink" title="Chap1. WHAT IS DESIGN AND ARCHITECTURE? 设计与架构到底是什么"></a>Chap1. WHAT IS DESIGN AND ARCHITECTURE? 设计与架构到底是什么</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN01.jpg"></p><p>There has been a lot of confusion about design and architecture over the years. What is design? What is architecture? What are the differences between the two?</p><blockquote><p>一直以来，设计（Design）与架构（Architecture）这两个概念让大多数人十分迷惑——什么是设计？什么是架构？二者究竟有什么区别？</p></blockquote><p>One of the goals of this book is to cut through all that confusion and to define, once and for all, what design and architecture are. For starters, I’ll assert that there is no difference between them. None at all.</p><blockquote><p>本书的一个重要的目标就是要清晰、明确地对二者进行定义。首先我要明确地说，二者没有任何区别。一丁点区别都没有！</p></blockquote><p>The word “architecture” is often used in the context of something at a high level that is divorced from the lower-level details, whereas “design” more often seems to imply structures and decisions at a lower level. But this usage is nonsensical when you look at what a real architect does.</p><blockquote><p>“架构”这个词往往使用于“高层级”的讨论中。这类讨论一般都把“底层”的实现细节排除在外。而“设计”一词，往往用来指代具体的系统底层组织结构和实现的细节。但是，从一个真正的系统架构师的日常工作来看，这样的区分是根本不成立的。</p></blockquote><p>Consider the architect who designed my new home. Does this home have an architecture? Of course it does. And what is that architecture? Well, it is the shape of the home, the outward appearance, the elevations, and the layout of the spaces and rooms. But as I look through the diagrams that my architect produced, I see an immense number of low-level details. I see where every outlet, light switch, and light will be placed. I see which switches control which lights. I see where the furnace is placed, and the size and placement of the water heater and the sump pump. I see detailed depictions of how the walls, roofs, and foundations will be constructed.</p><blockquote><p>以给我设计新房子的建筑设计师要做的事情为例。新房子当然是存在着既定架构的，但这个架构具体包含哪些内容呢？首先，它应该包括房屋的形状、外观设计、垂直高度、房间的布局，等等。但是，如果查看建筑设计师使用的图纸，会发现其中也充斥着大量的设计细节。譬如，我们可以看到每个插座、开关以及每个电灯具体的安装位置，同时也可以看到某个开关与所控制的电灯的具体连接信息；我们也能看到壁炉的具体安装位置，热水器的大小和位置信息，甚至是污水泵的位置；同时也可以看到关于墙体、屋顶和地基都有非常详细的建造说明。</p></blockquote><p>In short, I see all the little details that support all the high-level decisions. I also see that those low-level details and high-level decisions are part of the whole design of the house.</p><blockquote><p>总的来说，架构图里实际上包含了所有的底层设计细节，这些细节信息共同支撑了顶层的架构设计，底层设计信息和顶层架构设计共同组成了整个房屋的架构文档。</p></blockquote><p>And so it is with software design. The low-level details and the high-level structure are all part of the same whole. They form a continuous fabric that defines the shape of the system. You can’t have one without the other; indeed, no clear dividing line separates them. There is simply a continuum of decisions from the highest to the lowest levels.</p><blockquote><p>软件设计也是如此。底层设计细节和高层架构信息是不可分割的。它们组合在一起，共同定义了整个软件系统，缺一不可。所谓的底层和高层本身就是一系列决策组成的连续体，并没有清晰的分界线。</p></blockquote><h2 id="THE-GOAL-目标是什么"><a href="#THE-GOAL-目标是什么" class="headerlink" title="THE GOAL? 目标是什么"></a>THE GOAL? 目标是什么</h2><p>And the goal of those decisions? The goal of good software design? That goal is nothing less than my utopian description:</p><blockquote><p>所有这些决策的终极目标是什么呢？ 一个好的软件设计的终极目标是什么呢？就像我之前描述过的：</p></blockquote><p>The goal of software architecture is to minimize the human resources required to build and maintain the required system.</p><blockquote><p>软件架构的终极目标是，用最小的人力成本来满足构建和维护该系统的需求。</p></blockquote><p>The measure of design quality is simply the measure of the effort required to meet the needs of the customer. If that effort is low, and stays low throughout the lifetime of the system, the design is good. If that effort grows with each new release, the design is bad. It’s as simple as that.</p><blockquote><p>一个软件架构的优劣，可以用它满足用户需求所需要的成本来衡量。如果该成本很低，并且在系统的整个生命周期内一直都能维持这样的低成本，那么这个系统的设计就是优良的。如果该系统的每次发布都会提升下一次变更的成本，那么这个设计就是不好的。就这么简单。</p></blockquote><h2 id="CASE-STUDY-案例分析"><a href="#CASE-STUDY-案例分析" class="headerlink" title="CASE STUDY 案例分析"></a>CASE STUDY 案例分析</h2><p>As an example, consider the following case study. It includes real data from a real company that wishes to remain anonymous.</p><blockquote><p>下面来看一个真实案例，该案例中的数据均来源于一个要求匿名的真实公司。</p></blockquote><p>First, let’s look at the growth of the engineering staff. I’m sure you’ll agree that this trend is very encouraging. Growth like that shown in Figure 1.1 must be an indication of significant success!</p><blockquote><p>首先，我们来看一下工程师团队规模的增长。你肯定认为这个增长趋势是特别可喜的，像图 1.1 中的这种增长线条一定是公司业务取得巨大成功的直观体现。</p></blockquote><p><Figures figure="1-1">Growth of the engineering staff</Figures></p><p>Reproduced with permission from a slide presentation by Jason Gorman</p><p>Now let’s look at the company’s productivity over the same time period, as measured by simple lines of code (Figure 1.2).</p><blockquote><p>现在再让我们来看一下整个公司同期的生产效率（productivity），这里用简单的代码行数作为指标（参见图 1.2）。</p></blockquote><p><Figures figure="1-2">Productivity over the same period of time</Figures></p><p>Clearly something is going wrong here. Even though every release is supported by an ever-increasing number of developers, the growth of the code looks like it is approaching an asymptote.</p><blockquote><p>这明显是有问题的。伴随着产品的每次发布，公司的工程师团队在持续不断地扩展壮大，但是仅从代码行数的增长来看，该产品却正在逐渐陷入困境。</p></blockquote><p>Now here’s the really scary graph: Figure 1.3 shows how the cost per line of code has changed over time.</p><blockquote><p>还有更可怕的：图 1.3 展示的是同期内每行代码的变更成本。</p></blockquote><p>These trends aren’t sustainable. It doesn’t matter how profitable the company might be at the moment: Those curves will catastrophically drain the profit from the business model and drive the company into a stall, if not into a downright collapse.</p><blockquote><p>显然，图中展示的趋势是不可持续的。不管公司现在的利润率有多高，图中线条表明，按这个趋势下去，公司的利润会被一点点榨干，整个公司会因此陷入困境，甚至直接关门倒闭。</p></blockquote><p>What caused this remarkable change in productivity? Why was the code 40 times more expensive to produce in release 8 as opposed to release 1?</p><blockquote><p>究竟是什么因素造成生产力的大幅变化呢？为什么第 8 代产品的构建成本要 比第 1 代产品高 40 倍？</p></blockquote><p><Figures figure="1-3">Cost per line of code over time</Figures></p><h3 id="THE-SIGNATURE-OF-A-MESS-乱麻系统的特点"><a href="#THE-SIGNATURE-OF-A-MESS-乱麻系统的特点" class="headerlink" title="THE SIGNATURE OF A MESS 乱麻系统的特点"></a>THE SIGNATURE OF A MESS 乱麻系统的特点</h3><p>What you are looking at is the signature of a mess. When systems are thrown together in a hurry, when the sheer number of programmers is the sole driver of output, and when little or no thought is given to the cleanliness of the code or the structure of the design, then you can bank on riding this curve to its ugly end.</p><blockquote><p>我们在这里看到的是一个典型的乱麻系统。这种系统一般都是没有经过设计，匆匆忙忙被构建起来的。然后为了加快发布的速度，拼命地往团队里加入新人，同时加上决策层对代码质量提升和设计结构优化存在着持续的、长久的忽视，这种状态能持续下去就怪了。</p></blockquote><p>Figure 1.4 shows what this curve looks like to the developers. They started out at nearly 100% productivity, but with each release their productivity declined. By the fourth release, it was clear that their productivity was going to bottom out in an asymptotic approach to zero.</p><blockquote><p>图 1.4 展示了系统开发者的切身体会。他们一开始的效率都接近 100%，然而伴随着每次产品的发布，他们的生产力直线下降。到了产品的第 4 版本时，很明显大家的生产力已经不可避免地趋近为零了。</p></blockquote><p><Figures figure="1-4">Productivity by release</Figures></p><p>From the developers’ point of view, this is tremendously frustrating, because everyone is working hard. Nobody has decreased their effort.</p><blockquote><p>对系统的开发者来说，这会带来很大的挫败感，因为团队中并没有人偷懒，每个人还都是和之前一样在拼命工作。</p></blockquote><p>And yet, despite all their heroics, overtime, and dedication, they simply aren’t getting much of anything done anymore. All their effort has been diverted away from features and is now consumed with managing the mess. Their job, such as it is, has changed into moving the mess from one place to the next, and the next, and the next, so that they can add one more meager little feature.</p><blockquote><p>然而，不管他们投入了多少个人时间，救了多少次火，加了多少次班，他们的产出始终上不去。工程师的大部分时间都消耗在对现有系统的修修补补上，而不是真正完成实际的新功能。这些工程师真正的任务是：拆了东墙补西墙，周而往复，偶尔有精力能顺便实现一点小功能。</p></blockquote><h3 id="THE-EXECUTIVE-VIEW-管理层视角"><a href="#THE-EXECUTIVE-VIEW-管理层视角" class="headerlink" title="THE EXECUTIVE VIEW 管理层视角"></a>THE EXECUTIVE VIEW 管理层视角</h3><p>If you think that’s bad, imagine what this picture looks like to the executives! Consider Figure 1.5, which depicts monthly development payroll for the same period.</p><blockquote><p>如果你觉得开发者们这样就已经够苦了，那么就再想想公司髙管们的感受吧! 请看图 1.5，该部门月工资同期图。</p></blockquote><p><Figures figure="1-5">Monthly development payroll by release</Figures></p><p>Release 1 was delivered with a monthly payroll of a few hundred thousand dollars. The second release cost a few hundred thousand more. By the eighth release monthly payroll was <code>$20</code> million, and climbing.</p><blockquote><p>如你所见，产品的第 1 版是在月总工资 10 万美元左右的时候上线的。第 2 版又花掉了几十万美元。当发布第 8 版的时候，部门月工资已经达到了 2 千万美元，而且还在持续上升。</p></blockquote><p>Just this chart alone is scary. Clearly something startling is happening. One hopes that revenues are outpacing costs and therefore justifying the expense. But no matter how you look at this curve, it’s cause for concern.</p><blockquote><p>也许我们可以指望该公司的营收增长远远超出成本增长，这样公司就还能维持正常运转。但是这么惊人的曲线还是值得我们深入挖掘其中存在的巨大问题的。</p></blockquote><p>But now compare the curve in Figure 1.5 with the lines of code written per release in Figure 1.2. That initial few hundred thousand dollars per month bought a lot of functionality—but the final <code>$20</code> million bought almost nothing! Any CFO would look at these two graphs and know that immediate action is necessary to stave off disaster.</p><blockquote><p>现在，只要将图 1.5 的月工资曲线和图 1.2 的每次发布代码行数曲线对比一下，任何一个理性的 CEO 都会一眼看出其中的问题：最开始的十几万美元工资给公司带来了很多新功能、新收益，而最后的 2 千万美元几乎全打了水漂。应立刻采取行动解决这个问题，刻不容缓。</p></blockquote><p>But which action can be taken? What has gone wrong? What has caused this incredible decline in productivity? What can executives do, other than to stamp their feet and rage at the developers?</p><blockquote><p>但是具体采取什么样的行动才能解决问题呢？究竟问题出在哪里？是什么造成了工程师生产力的直线下降？高管们除了跺脚、发飙，还能做什么呢？</p></blockquote><h3 id="WHAT-WENT-WRONG-问题到底在哪里"><a href="#WHAT-WENT-WRONG-问题到底在哪里" class="headerlink" title="WHAT WENT WRONG? 问题到底在哪里"></a>WHAT WENT WRONG? 问题到底在哪里</h3><p>Nearly 2600 years ago, Aesop told the story of the Tortoise and the Hare. The moral of that story has been stated many times in many different ways:</p><blockquote><p>大约 2600 年前，《伊索寓言》里写到了龟兔赛跑的故事。这个故事的主题思想可以归纳为以下几种：</p></blockquote><ul><li>“Slow and steady wins the race.”</li><li>“The race is not to the swift, nor the battle to the strong.”</li><li>“The more haste, the less speed.”</li></ul><hr><blockquote><ol><li>慢但是稳，是成功的秘诀。</li><li>该比赛并不是拼谁开始跑得快，也不是拼谁更有力气的。</li><li>心态越急，反而跑得越慢。</li></ol></blockquote><p>The story itself illustrates the foolishness of overconfidence. The Hare, so confident in its intrinsic speed, does not take the race seriously, and so naps while the Tortoise crosses the finish line.</p><blockquote><p>这个故事本身揭露的是过度自信的愚蠢行为。兔子由于对自己速度的过度自信，没有把乌龟当回事，结果乌龟爬过终点线取得胜利的时候，它还在睡觉。</p></blockquote><p>Modern developers are in a similar race, and exhibit a similar overconfidence. Oh, they don’t sleep—far from it. Most modern developers work their butts off. But a part of their brain does sleep—the part that knows that good, clean, well-designed code matters.</p><blockquote><p>这和现代软件研发工作有点类似，现在的软件研发工程师都有点过于自信。哦，当然，他们确实不会偷懒，一点也不。但是他们真正偷懒的地方在于——持续低估那些好的、良好设计的、整洁的代码的重要性。</p></blockquote><p>These developers buy into a familiar lie: “We can clean it up later; we just have to get to market first!” Of course, things never do get cleaned up later, because market pressures never abate. Getting to market first simply means that you’ve now got a horde of competitors on your tail, and you have to stay ahead of them by running as fast as you can.</p><blockquote><p>这些工程师们普遍用一句话来欺骗自己：“我们可以未来再重构代码，产品上线最重要！”但是结果大家都知道，产品上线以后重构工作就再没人提起了。市场的压力永远也不会消退，作为首先上市的产品，后面有无数的竞争对手追赶，必须要比他们跑得更快才能保持领先。</p></blockquote><p>And so the developers never switch modes. They can’t go back and clean things up because they’ve got to get the next feature done, and the next, and the next, and the next. And so the mess builds, and productivity continues its asymptotic approach toward zero.</p><blockquote><p>所以，重构的时机永远不会再有了。工程师们忙于完成新功能，新功能做不完，哪有时间重构老的代码？循环往复，系统成了一团乱麻，主产效率持续直线下降，直至为零。</p></blockquote><p>Just as the Hare was overconfident in its speed, so the developers are overconfident in their ability to remain productive. But the creeping mess of code that saps their productivity never sleeps and never relents. If given its way, it will reduce productivity to zero in a matter of months.</p><blockquote><p>结果就像龟兔赛跑中过于自信的兔子一样，软件研发工程师们对自己保持高产出的能力过于自信了。但是乱成一团的系统代码可没有休息时间，也不会放松。如果不严加提防，在几个月之内，整个研发团队就会陷入困境。</p></blockquote><p>The bigger lie that developers buy into is the notion that writing messy code makes them go fast in the short term, and just slows them down in the long term. Developers who accept this lie exhibit the hare’s overconfidence in their ability to switch modes from making messes to cleaning up messes sometime in the future, but they also make a simple error of fact. The fact is that making messes is always slower than staying clean, no matter which time scale you are using.</p><blockquote><p>工程师们经常相信的另外一个错误观点是： “在工程中容忍糟糕的代码存在可以在短期内加快该工程上线的速度，未来这些代码会造成一些额外的工作量，但是并没有什么大不了。”相信这些鬼话的工程师对自己清理乱麻代码的能力过于自信了。但是更重要的是，他们还忽视了一个自然规律：无论是从短期还是长期来看，胡乱编写代码的工作速度其实比循规蹈矩更慢。</p></blockquote><p>Consider the results of a remarkable experiment performed by Jason Gorman depicted in Figure 1.6. Jason conducted this test over a period of six days. Each day he completed a simple program to convert integers into Roman numerals. He knew his work was complete when his predefined set of acceptance tests passed. Each day the task took a little less than 30 minutes. Jason used a well-known cleanliness discipline named test-driven development (TDD) on the first, third, and fifth days. On the other three days, he wrote the code without that discipline.</p><blockquote><p>图 1.6 展示的是 Jason Gorman 进行的一次为期 6 天的实验。在该实验中，Jaosn 每天都编写一段代码，功能是将一个整数转化为相应罗马数字的字符串。当事先定义好的一个测试集完全通过时，即认为当天工作完成。每天实验的时长不超过 30 分钟。第一天、第三天和第五天，Jason 在编写代码的过程中采用了业界知名的优质代码方法论：测试驱动开发（TDD），而其他三天他则直接从头开始编写代码。</p></blockquote><p><Figures figure="1-6">Time to completion by iterations and use&#x2F;non-use of TDD</Figures></p><p>First, notice the learning curve apparent in Figure 1.6. Work on the latter days is completed more quickly than the former days. Notice also that work on the TDD days proceeded approximately 10% faster than work on the non-TDD days, and that even the slowest TDD day was faster than the fastest non-TDD day.</p><blockquote><p>首先，我们要关注的是图 1.6 中那些柱状图。很显然，日子越往后，完成工作所需的时间就越少。同时，我们也可以看到当人们采用了 TDD 方法编程后，一般就会比未采用 TDD 方法编程少用 10%的时间，并且采用 TDD 方法编程时最差的一天也比未采用 TDD 方法编程时最好的一天用时要短。</p></blockquote><p>Some folks might look at that result and think it’s a remarkable outcome. But to those who haven’t been deluded by the Hare’s overconfidence, the result is expected, because they know this simple truth of software development:</p><blockquote><p>对于这个结果，有些人可能会觉得挺意外的。但是对常年关注软件开发本质的人来说，它其实揭示了软件开发的一个核心特点：</p></blockquote><p>The only way to go fast, is to go well.</p><blockquote><p>要想跑得快，先要跑得稳。</p></blockquote><p>And that’s the answer to the executive’s dilemma. The only way to reverse the decline in productivity and the increase in cost is to get the developers to stop thinking like the overconfident Hare and start taking responsibility for the mess that they’ve made.</p><blockquote><p>综上所述，管理层扭转局面的唯一选择就是扭转开发者的观念，让他们从过度自信的兔子模式转变回来，为自己构建的乱麻系统负起责任来。</p></blockquote><p>The developers may think that the answer is to start over from scratch and redesign the whole system—but that’s just the Hare talking again. The same overconfidence that led to the mess is now telling them that they can build it better if only they can start the race over. The reality is less rosy:</p><blockquote><p>当然，某些软件研发工程师可能会认为挽救一个系统的唯一办法是抛弃现有系统，设计一个全新的系统来替代。但是这里仍然没有逃离过度自信。试问：如果是工程师的过度自信导致了目前的一团乱麻，开始，结果就会更好呢？</p></blockquote><p>Their overconfidence will drive the redesign into the same mess as the original project.</p><blockquote><p>那么，我们有什么理由认为让他们从头第 1 章设计与架构究竟是什么过度自信只会使得重构设计陷入和原项目一样的困局中。</p></blockquote><h2 id="CONCLUSION-本章小结"><a href="#CONCLUSION-本章小结" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>In every case, the best option is for the development organization to recognize and avoid its own overconfidence and to start taking the quality of its software architecture seriously.</p><blockquote><p>不管怎么看，研发团队最好的选择是清晰地认识并避开工程师们过度自信的特点，开始认真地对待自己的代码架构，对其质量负责。</p></blockquote><p>To take software architecture seriously, you need to know what good software architecture is. To build a system with a design and an architecture that minimize effort and maximize productivity, you need to know which attributes of system architecture lead to that end.</p><blockquote><p>要想提高自己软件架构的质量，就需要先知道什么是优秀的软件架构。而为了在系统构建过程中采用好的设计和架构以便减少构建成本，提高生产力，又需要先了解系统架构的各种属性与成本和生产力的关系。</p></blockquote><p>That’s what this book is about. It describes what good clean architectures and designs look like, so that software developers can build systems that will have long profitable lifetimes.</p><blockquote><p>这就是这本书的主题。本书为读者描述了什么是优秀的、整洁的软件架构与设计，读者可以参考这些设计来构建一个长期稳定的、持久优秀的系统。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap2-A-TALE-OF-TWO-VALUES-两个价值维度"><a href="#Chap2-A-TALE-OF-TWO-VALUES-两个价值维度" class="headerlink" title="Chap2. A TALE OF TWO VALUES 两个价值维度"></a>Chap2. A TALE OF TWO VALUES 两个价值维度</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN02.jpg"></p><p>Every software system provides two different values to the stakeholders: behavior and structure. Software developers are responsible for ensuring that both those values remain high. Unfortunately, they often focus on one to the exclusion of the other. Even more unfortunately, they often focus on the lesser of the two values, leaving the software system eventually valueless.</p><blockquote><p>对于每个软件系统，我们都对以通过行为和架构两个维度来休现它的实际价值。软件研发人员应该确保自己的系统在这两个维度上的实际价值都能长时间维持在很高的状态。不幸的是，他们往往只关注一个维度，而忽视了另外一个维度。更不幸的是，他们常常关注的还是错误的维度，这导致了系统的价值最终趋降为零。</p></blockquote><h2 id="BEHAVIOR-行为价值"><a href="#BEHAVIOR-行为价值" class="headerlink" title="BEHAVIOR 行为价值"></a>BEHAVIOR 行为价值</h2><p>The first value of software is its behavior. Programmers are hired to make machines behave in a way that makes or saves money for the stakeholders. We do this by helping the stakeholders develop a functional specification, or requirements document. Then we write the code that causes the stakeholder’s machines to satisfy those requirements.</p><blockquote><p>软件系统的行为是其最直观的价值维度。程序员的工作就是让机器按照某种指定方式运转，给系统的使用者创造或者提高利润。程序员们为了达到这个目的，往往需要帮助系统使用者编写一个对系统功能的定义，也就是需求文档。然后，程序员们再把需求文档转化为实际的代码。</p></blockquote><p>When the machine violates those requirements, programmers get their debuggers out and fix the problem.</p><blockquote><p>当机器出现异常行为时，程序员要负责调试，解决这些问题。</p></blockquote><p>Many programmers believe that is the entirety of their job. They believe their job is to make the machine implement the requirements and to fix any bugs. They are sadly mistaken.</p><blockquote><p>大部分程序员认为这就是他们的全部工作。他们的工作是且仅是：按照需求文档编写代码，并且修复任何 Bug。这真是大错特错。</p></blockquote><h2 id="ARCHITECTURE-架构价值"><a href="#ARCHITECTURE-架构价值" class="headerlink" title="ARCHITECTURE 架构价值"></a>ARCHITECTURE 架构价值</h2><p>The second value of software has to do with the word “software”—a compound word composed of “soft” and “ware.” The word “ware” means “product”; the word “soft”… Well, that’s where the second value lies.</p><blockquote><p>软件系统的第二个价值维度，就体现在软件这个英文单词上：software。“ware” 的意思是“产品”，而 “soft” 的意思，不言而喻，是指软件的灵活性。</p></blockquote><p>Software was invented to be “soft.” It was intended to be a way to easily change the behavior of machines. If we’d wanted the behavior of machines to be hard to change, we would have called it hardware.</p><blockquote><p>软件系统必须保持灵活。软件发明的目的，就是让我们可以以一种灵活的方式来改变机器的工作行为。对机器上那些很难改变的工作行为，我们通常称之为硬件（hardware）。</p></blockquote><p>To fulfill its purpose, software must be soft—that is, it must be easy to change. When the stakeholders change their minds about a feature, that change should be simple and easy to make. The difficulty in making such a change should be proportional only to the scope of the change, and not to the shape of the change.</p><blockquote><p>为了达到软件的本来目的，软件系统必须够“软” 也就是说，软件应该容易被修改。当需求方改变需求的时候，随之所需的软件变更必须可以简单而方便地实现。变更实施的难度应该和变更的范畴（scope）成等比关系，而与变更的具体形状（shape）无关。</p></blockquote><p>It is this difference between scope and shape that often drives the growth in software development costs. It is the reason that costs grow out of proportion to the size of the requested changes. It is the reason that the first year of development is much cheaper than the second, and the second year is much cheaper than the third.</p><blockquote><p>需求变更的范畴与形状，是决定对应软件变更实施成本高低的关键。这就是为什么有的代码变更的成本与其实现的功能改变不成比例。这也是为什么第二年的研发成本比第一年的高很多，第三年又比第二年更高。</p></blockquote><p>From the stakeholders’ point of view, they are simply providing a stream of changes of roughly similar scope. From the developers’ point of view, the stakeholders are giving them a stream of jigsaw puzzle pieces that they must fit into a puzzle of ever-increasing complexity. Each new request is harder to fit than the last, because the shape of the system does not match the shape of the request.</p><blockquote><p>从系统相关方（Stakeholder）的角度来看，他们所提出的一系列的变更需求的范畴都是类似的，因此成本也应该是固定的。但是从研发者角度来看，系统用户持续不断的变更需求就像是要求他们不停地用一堆不同形状的拼图块，拼成一个新的形状。整个拼图的过程越来越困难，因为现有系统的形状永远和需求的形状不一致.</p></blockquote><p>I’m using the word “shape” here in a unconventional way, but I think the metaphor is apt. Software developers often feel as if they are forced to jam square pegs into round holes.</p><blockquote><p>我们在这里使用了“形状”这个词，这可能不是该词的标准用法，但是其寓意应该很明确。毕竟，软件工程师们经常会觉得自己的工作就是把方螺丝拧到圆螺丝孔里面。</p></blockquote><p>The problem, of course, is the architecture of the system. The more this architecture prefers one shape over another, the more likely new features will be harder and harder to fit into that structure. Therefore architectures should be as shape agnostic are practical.</p><blockquote><p>问题的实际根源当然就是系统的架构设计。如果系统的架构设计偏向某种特定的“形状”，那么新的变更就会越来越难以实施。所以，好的系统架构设计应该尽可能做到与“形状”无关。</p></blockquote><h2 id="THE-GREATER-VALUE-哪个价值维度更重要"><a href="#THE-GREATER-VALUE-哪个价值维度更重要" class="headerlink" title="THE GREATER VALUE 哪个价值维度更重要"></a>THE GREATER VALUE 哪个价值维度更重要</h2><p>Function or architecture? Which of these two provides the greater value? Is it more important for the software system to work, or is it more important for the software system to be easy to change?</p><blockquote><p>那么，究竟是系统行为更重要，还是系统架构的灵活性更重要？哪个价值更大?系统正常工作更重要，还是系统易于修改更重要？</p></blockquote><p>If you ask the business managers, they’ll often say that it’s more important for the software system to work. Developers, in turn, often go along with this attitude. But it’s the wrong attitude. I can prove that it is wrong with the simple logical tool of examining the extremes.</p><blockquote><p>如果这个问题由业务部门来回答，他们通常认为系统正常工作很重要。系统开发人员常常也就跟随采取了这种态度。但是这种态度是错误的。下面我就用简单的逻辑推导来证明这个态度的错误性。</p></blockquote><ul><li>If you give me a program that works perfectly but is impossible to change, then it won’t work when the requirements change, and I won’t be able to make it work. Therefore the program will become useless.</li><li>If you give me a program that does not work but is easy to change, then I can make it work, and keep it working as requirements change. Therefore the program will remain continually useful.</li></ul><hr><blockquote><ul><li>如果某程序可以正常工作，但是无法修改，那么当需求变更的时候它就不再能够正常工作了，我们也无法通过修改让它能继续正常工作。因此，这个程序的价值将成为 0。</li><li>如果某程序目前无法正常工作，但是我们可以很容易地修改它，那么将它改好，并且随着需求变化不停地修改它，都应该是很容易的事。因此，这个程序会持续产生价值。</li></ul></blockquote><p>You may not find this argument convincing. After all, there’s no such thing as a program that is impossible to change. However, there are systems that are practically impossible to change, because the cost of change exceeds the benefit of change. Many systems reach that point in some of their features or configurations.</p><blockquote><p>当然，上面的逻辑论断可能不足以说服大家，修改的。但是，现实中有一些系统确实无法更改，因为其变更实施的成本会远远超过变更带来的价值。你在实际工作中一定遇到过很多这样的例了。</p></blockquote><p>If you ask the business managers if they want to be able to make changes, they’ll say that of course they do, but may then qualify their answer by noting that the current functionality is more important than any later flexibility. In contrast, if the business managers ask you for a change, and your estimated costs for that change are unaffordably high, the business managers will likely be furious that you allowed the system to get to the point where the change was impractical.</p><blockquote><p>如果你问业务部门，是否想要能够变更需求，他们的回答一般是肯定的，而且他们会增加一句：完成现在的功能比实现未来的灵活度更重要。但讽刺的是，如果事后业务部门提出了一项需求，而你的预估工作量大大超出他们的预期，这帮家伙通常会对你放任系统混乱到无法变更的状态而勃然大怒。</p></blockquote><h2 id="EISENHOWER’S-MATRIX-艾森豪威尔矩阵"><a href="#EISENHOWER’S-MATRIX-艾森豪威尔矩阵" class="headerlink" title="EISENHOWER’S MATRIX 艾森豪威尔矩阵"></a>EISENHOWER’S MATRIX 艾森豪威尔矩阵</h2><p>Consider President Dwight D. Eisenhower’s matrix of importance versus urgency (Figure 2.1). Of this matrix, Eisenhower said:</p><blockquote><p>我们来看美国前总统艾森豪威尔的紧急&#x2F;重要矩阵（参见图 2.1），面对这个矩阵，艾森豪威尔曾说道：</p></blockquote><p>I have two kinds of problems, the urgent and the important. The urgent are not important, and the important are never urgent.1</p><blockquote><p>我有两种难题：紧急的和重要的，而紧急的难题永远是不重要的，重要的难题永远是不紧急的。</p></blockquote><p><Figures figure="2-1">Eisenhower matrix</Figures></p><p>There is a great deal of truth to this old adage. Those things that are urgent are rarely of great importance, and those things that are important are seldom of great urgency.</p><blockquote><p>虽然老调重弹，但其中的道理依然成立。确实，紧急的事情常常没那么重要，而重要的事情则似乎永远也排不上优先级。</p></blockquote><p>The first value of software—behavior—is urgent but not always particularly important.</p><blockquote><p>软件系统的第一个价值维度：系统行为，是紧急的，但是并不总是特别重要。</p></blockquote><p>The second value of software—architecture—is important but never particularly urgent.</p><blockquote><p>软件系统的第二个价值维度：系统架构，是重要的，但是并不总是特别紧急。</p></blockquote><p>Of course, some things are both urgent and important. Other things are not urgent and not important. Ultimately, we can arrange these four couplets into priorities:</p><blockquote><p>当然，我们会有些重要且紧急的事情，也会有一些事情不重要也不紧急。最终我们应将这四类事情进行如下排序：</p></blockquote><ol><li>Urgent and important</li><li>Not urgent and important</li><li>Urgent and not important</li><li>Not urgent and not important</li></ol><hr><blockquote><ol><li>重要且紧急</li><li>重要不紧急</li><li>不重要但紧急</li><li>不重要且不紧急</li></ol></blockquote><p>Note that the architecture of the code—the important stuff—is in the top two positions of this list, whereas the behavior of the code occupies the first and third positions.</p><blockquote><p>在这里你可以看到，软件的系统架构——那些重要的事情——占据了该列表的前两位，而系统行为——那些紧急的事情——只占据了第一和第三位。</p></blockquote><p>The mistake that business managers and developers often make is to elevate items in position 3 to position 1. In other words, they fail to separate those features that are urgent but not important from those features that truly are urgent and important. This failure then leads to ignoring the important architecture of the system in favor of the unimportant features of the system.</p><blockquote><p>业务部门与研发人员经常犯的共同错误就是将第三优先级的事情提到第一优先级去做。换句话说，他们没有把真正紧急并且重要的功能和紧急但是不重要的功能分开。这个错误导致了重要的事被忽略了，重要的系统架构问题让位给了不重要的系统行为功能。</p></blockquote><p>The dilemma for software developers is that business managers are not equipped to evaluate the importance of architecture. That’s what software developers were hired to do. Therefore it is the responsibility of the software development team to assert the importance of architecture over the urgency of features.</p><blockquote><p>但研发人员还忘了一点，那就是业务部门原本就是没有能力评估系统架构的重要程度的，这本来就应该是研发人员自己的工作职责！所以，平衡系统架构的重要性与功能的紧急程度这件事，是软件研发人员自己的职责。</p></blockquote><h2 id="FIGHT-FOR-THE-ARCHITECTURE-为好的软件架构而持续斗争"><a href="#FIGHT-FOR-THE-ARCHITECTURE-为好的软件架构而持续斗争" class="headerlink" title="FIGHT FOR THE ARCHITECTURE 为好的软件架构而持续斗争"></a>FIGHT FOR THE ARCHITECTURE 为好的软件架构而持续斗争</h2><p>Fulfilling this responsibility means wading into a fight—or perhaps a better word is “struggle.” Frankly, that’s always the way these things are done. The development team has to struggle for what they believe to be best for the company, and so do the management team, and the marketing team, and the sales team, and the operations team. It’s always a struggle.</p><blockquote><p>为了做好上述职责，软件团队必须做好斗争的准备——或者说“长期抗争”的准备。现状就是这样。研发团队必须从公司长远利益出发与其他部门抗争，这和管理团队的工作一样，甚至市场团队、销售团队、运营团队都是这样。公司内部的抗争本来就是无止境的。</p></blockquote><p>Effective software development teams tackle that struggle head on. They unabashedly squabble with all the other stakeholders as equals. Remember, as a software developer, you are a stakeholder. You have a stake in the software that you need to safeguard. That’s part of your role, and part of your duty. And it’s a big part of why you were hired.</p><blockquote><p>有成效的软件研发团队会迎难而上，毫不掩饰地与所有其他的系统相关方进行平等的争吵。请记住，作为—名软件开发人员，你也是相关者之一。软件系统的可维护性需要由你来保护，这是你角色的一部分，也是你职责中不可缺少的一部分。公司雇你的很大一部分原因就是需要有人来做这件事。</p></blockquote><p>This challenge is doubly important if you are a software architect. Software architects are, by virtue of their job description, more focused on the structure of the system than on its features and functions. Architects create an architecture that allows those features and functions to be easily developed, easily modified, and easily extended.</p><blockquote><p>如果你是软件架构师，那么这项工作就加倍重要了。软件架构师这一职责本身就应更关注系统的整体结构，而不是具体的功能和系统行为的实现，软件架构师必须创建出一个可以让功能实现起来更容易、修改起来更简单、扩展起来更轻松的软件架构。</p></blockquote><p>Just remember: If architecture comes last, then the system will become ever more costly to develop, and eventually change will become practically impossible for part or all of the system. If that is allowed to happen, it means the software development team did not fight hard enough for what they knew was necessary.</p><blockquote><p>请记住：如果忽视软件架构的价值，系统将会变得越来越难以维护，终会有一天，系统将会变得再也无法修改。如果系统变成了这个样子，那么说明软件开发团队没有和需求方做足够的抗争，没有完成自己应尽的职责。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Part2-STARTING-WITH-THE-BRICKS-PROGRAMMING-PARADIGMS-从基础构件开始：编程范式"><a href="#Part2-STARTING-WITH-THE-BRICKS-PROGRAMMING-PARADIGMS-从基础构件开始：编程范式" class="headerlink" title="Part2. STARTING WITH THE BRICKS: PROGRAMMING PARADIGMS 从基础构件开始：编程范式"></a>Part2. STARTING WITH THE BRICKS: PROGRAMMING PARADIGMS 从基础构件开始：编程范式</h1><p>Software architecture begins with the code—and so we will begin our discussion of architecture by looking at what we’ve learned about code since code was first written.</p><blockquote><p>任何软件架构的实现都离不开具体的代码，所以我们对软件架构的讨论应该从第一行被写下的代码开始。</p></blockquote><p>In 1938, Alan Turing laid the foundations of what was to become computer programming. He was not the first to conceive of a programmable machine, but he was the first to understand that programs were simply data. By 1945, Turing was writing real programs on real computers in code that we would recognize (if we squinted enough). Those programs used loops, branches, assignment, subroutines, stacks, and other familiar structures. Turing’s language was binary.</p><blockquote><p>1938 年，阿兰·图灵为现代计算机编程打下了地基。尽管他并不是第一个发明可编程机器的人，但却是第一个提出“程序即数据”的人。到 1945 年时，图灵已经在真实计算机上编写真实的、我们现在也能看懂的计算机程序了。这些程序中用到了循环、分支、赋值、子调用、栈等如今我们都很熟悉的结构。而图灵用的编程语言就是简单的二进制数序列。</p></blockquote><p>Since those days, a number of revolutions in programming have occurred. One revolution with which we are all very familiar is the revolution of languages. First, in the late 1940s, came assemblers. These “languages” relieved the programmers of the drudgery of translating their programs into binary. In 1951, Grace Hopper invented A0, the first compiler. In fact, she coined the term compiler. Fortran was invented in 1953 (the year after I was born). What followed was an unceasing flood of new programming languages—COBOL, PL&#x2F;1, SNOBOL, C, Pascal, C++, Java, ad infinitum.</p><blockquote><p>从那时到现在，编程领域历经了数次变革，其中我们都很熟悉的就是编程语言的变革。首先是在 20 世纪 40 年代末期出现了汇编器（assembler），它能自动将一段程序转化为相应的二进制数序列，大幅解放了程序员。然后是 1951 年，Grace Hopper 发明了 A0，这是世界上第一个编译器（compiler）。事实上，编译器这个名字就是他定义和推广使用的。再接着就到了 1953 年，那一年 FORTRAN 面世了（就在我出生的第二年）。接下来就是层出不穷的新编程语言了——COBOL、PL&#x2F;1、SNOBOL、C、Pascal、C++、Java 等等，不胜枚举。</p></blockquote><p>Another, probably more significant, revolution was in programming paradigms. Paradigms are ways of programming, relatively unrelated to languages. A paradigm tells you which programming structures to use, and when to use them. To date, there have been three such paradigms. For reasons we shall discuss later, there are unlikely to be any others.</p><blockquote><p>除此之外，计算机编程领域还经历了另外一个更巨大、更重要的变革，那就果编程范式（paradigm）的变迁。编程范式指的是程序的编写模式，与具体的编程语言关系相对较小。这些范式会告诉你应该在什么时候采用什么样的代码结构。直到今天，我们也一共只有三个编程范式，而且未来几乎不可能再出现新的，接下来我们就看一下为什么。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap3-PARADIGM-OVERVIEW-编程范式总览"><a href="#Chap3-PARADIGM-OVERVIEW-编程范式总览" class="headerlink" title="Chap3. PARADIGM OVERVIEW 编程范式总览"></a>Chap3. PARADIGM OVERVIEW 编程范式总览</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN03.jpg"></p><p>The three paradigms included in this overview chapter are structured programming, object-orient programming, and functional programming.</p><blockquote><p>本章将讲述三个编程范式，它们分别是结构化编程（structured programming）、 面向对象编程（object-oriented programming）以及函数式编程（functional programming）。</p></blockquote><h2 id="STRUCTURED-PROGRAMMING-结构化编程"><a href="#STRUCTURED-PROGRAMMING-结构化编程" class="headerlink" title="STRUCTURED PROGRAMMING 结构化编程"></a>STRUCTURED PROGRAMMING 结构化编程</h2><p>The first paradigm to be adopted (but not the first to be invented) was structured programming, which was discovered by Edsger Wybe Dijkstra in 1968. Dijkstra showed that the use of unrestrained jumps (goto statements) is harmful to program structure. As we’ll see in the chapters that follow, he replaced those jumps with the more familiar if&#x2F;then&#x2F;else and do&#x2F;while&#x2F;until constructs.</p><blockquote><p>结构化编程是第一个普遍被采用的编程范式（但是却不是第一个被提出的），由 Edsger Wybe Dijkstra 于 1968 年最先提出。与此同时，Dijkstra 还论证了使用 goto 这样的无限制跳转语句将会损害程序的整体结构。接下来的章节我们还会说到，二是这位 Dijkstra 最先主张用我们现在熟知的 if&#x2F;then&#x2F;else 语句和 do&#x2F;while&#x2F;until 语句来代替跳转语句的。</p></blockquote><p>We can summarize the structured programming paradigm as follows:</p><blockquote><p>我们可以将结构化编程范式归结为一句话：</p></blockquote><p>Structured programming imposes discipline on direct transfer of control.</p><blockquote><p>结构化编程对程序控制权的直接转移进行了限制和规范。</p></blockquote><h2 id="OBJECT-ORIENTED-PROGRAMMING-面向对象编程"><a href="#OBJECT-ORIENTED-PROGRAMMING-面向对象编程" class="headerlink" title="OBJECT-ORIENTED PROGRAMMING 面向对象编程"></a>OBJECT-ORIENTED PROGRAMMING 面向对象编程</h2><p>The second paradigm to be adopted was actually discovered two years earlier, in 1966, by Ole Johan Dahl and Kristen Nygaard. These two programmers noticed that the function call stack frame in the ALGOL language could be moved to a heap, thereby allowing local variables declared by a function to exist long after the function returned. The function became a constructor for a class, the local variables became instance variables, and the nested functions became methods. This led inevitably to the discovery of polymorphism through the disciplined use of function pointers.</p><blockquote><p>说到编程领域中第二个被广泛采用的编程范式，当然就是面向对象编程了：事实上，这个编程范式的提出比结构化编程还早了两年，是在 1966 年由 Ole Johan Dahl 和 Kriste Nygaard 在论文中总结归纳出来的。这两个程序员注意到在 ALGOL 语言中. 函数调用堆栈（call stack frame）可以被挪到堆内存区域里，这样函数定义的本地变量就可以在函数返回之后继续存在。这个函数就成为了一个类（class）的构造函数，而它所定义的本地变量就是类的成员变量，构造函数定义的嵌套函数就成为了成员方法（method）。这样一来，我们就可以利用多态（polymorphism）来限制用户对函数指针的使用。</p></blockquote><p>We can summarize the object-oriented programming paradigm as follows:</p><blockquote><p>在这里，我们也可以用一句话来总结面向对象编程：</p></blockquote><p>Object-oriented programming imposes discipline on indirect transfer of control.</p><blockquote><p>面向对象编程对程序控制权的间接转移进行了限制和规范。</p></blockquote><h2 id="FUNCTIONAL-PROGRAMMING-函数式编程"><a href="#FUNCTIONAL-PROGRAMMING-函数式编程" class="headerlink" title="FUNCTIONAL PROGRAMMING 函数式编程"></a>FUNCTIONAL PROGRAMMING 函数式编程</h2><p>The third paradigm, which has only recently begun to be adopted, was the first to be invented. Indeed, its invention predates computer programming itself. Functional programming is the direct result of the work of Alonzo Church, who in 1936 invented l-calculus while pursuing the same mathematical problem that was motivating Alan Turing at the same time. His l-calculus is the foundation of the LISP language, invented in 1958 by John McCarthy. A foundational notion of l-calculus is immutability—that is, the notion that the values of symbols do not change. This effectively means that a functional language has no assignment statement. Most functional languages do, in fact, have some means to alter the value of a variable, but only under very strict discipline.</p><blockquote><p>尽管第三个编程范式是近些年才刚刚开始被采用的，但它其实是三个范式中最先被发明的。事实上，函数式编程概念是基于与阿兰·图灵同时代的数学家 Alonzo Church 在 1936 年发明的入演算的直接衍生物。1958 年 John Mccarthy 利用其作为基础发明了 LISP 语言。众所周知，λ 演算法的一个核心思想是不可变性——某个符号所对应的值是永远不变的，所以从理论上来说，函数式编程语言中应该是没有赋值语句的。大部分函数式编程语言只允许在非常严格的限制条件下，才可以更改某个变量的值。</p></blockquote><p>We can summarize the functional programming paradigm as follows:</p><blockquote><p>因此，我们在这里可以将函数式编程范式总结为下面这句话：</p></blockquote><p>Functional programming imposes discipline upon assignment.</p><blockquote><p>函数式编程对程序中的赋值进行了限制和规范。</p></blockquote><h2 id="FOOD-FOR-THOUGHT-仅供思考"><a href="#FOOD-FOR-THOUGHT-仅供思考" class="headerlink" title="FOOD FOR THOUGHT 仅供思考"></a>FOOD FOR THOUGHT 仅供思考</h2><p>Notice the pattern that I’ve quite deliberately set up in introducing these three programming paradigms: Each of the paradigms removes capabilities from the programmer. None of them adds new capabilities. Each imposes some kind of extra discipline that is negative in its intent. The paradigms tell us what not to do, more than they tell us what to do.</p><blockquote><p>如你所见，我在介绍三个编程范式的时候，有意采用了上面这种格式，目的是凸显每个编程范式的实际含义——它们都从某一方面限制和规范了程序员的能力。没有一个范式是增加新能力的。也就是说，每个编程范式的目的都是设置限制。这些范式主要是为了告诉我们不能做什么，而不是可以做什么。</p></blockquote><p>Another way to look at this issue is to recognize that each paradigm takes something away from us. The three paradigms together remove goto statements, function pointers, and assignment. Is there anything left to take away?</p><blockquote><p>另外，我们应该认识到，这三个编程范式分别限制了 goto 语句、函数指针和赋值语句的使用。那么除此之外，还有什么可以去除的吗？</p></blockquote><p>Probably not. Thus these three paradigms are likely to be the only three we will see—at least the only three that are negative. Further evidence that there are no more such paradigms is that they were all discovered within the ten years between 1958 and 1968. In the many decades that have followed, no new paradigms have been added.</p><blockquote><p>可能没有了。因此这三个编程范式可能是仅有的三个了——如果单论去除能力的编程范式的话。支撑这一结论的另外一个证据是，三个编程范式都是在 1958 年到 1968 年这 10 年间被提出来的，后续再也没有新的编程范式出现过。</p></blockquote><h2 id="CONCLUSION-本章小结-1"><a href="#CONCLUSION-本章小结-1" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>What does this history lesson on paradigms have to do with architecture? Everything. We use polymorphism as the mechanism to cross architectural boundaries; we use functional programming to impose discipline on the location of and access to data; and we use structured programming as the algorithmic foundation of our modules.</p><blockquote><p>大家可能会问，这些编程范式的历史知识与软件架构有关系吗？当然有，而目关系相当密切。譬如说，多态是我们跨越架构边界的手段，函数式编程是我们规范和限制数据存放位置与访问权限的手段，结构化编程则是各模块的算法实现基础。</p></blockquote><p>Notice how well those three align with the three big concerns of architecture: function, separation of components, and data management.</p><blockquote><p>这和软件架构的三大关注重点不谋而合：功能性、组件独立性以及数据管理。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap4-STRUCTURED-PROGRAMMING-结构化编程"><a href="#Chap4-STRUCTURED-PROGRAMMING-结构化编程" class="headerlink" title="Chap4. STRUCTURED PROGRAMMING 结构化编程"></a>Chap4. STRUCTURED PROGRAMMING 结构化编程</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN04.jpg"></p><p>Edsger Wybe Dijkstra was born in Rotterdam in 1930. He survived the bombing of Rotterdam during World War II, along with the German occupation of the Netherlands, and in 1948 graduated from high school with the highest possible marks in math, physics, chemistry, and biology. In March 1952, at the age of 21 (and just 9 months before I was born), Dijkstra took a job with the Mathematical Center of Amsterdam as the Netherlands’ very first programmer.</p><blockquote><p>Edsger Wybe Dijkstra 于 1930 年出生在荷兰鹿特丹。生于乱世，他亲身经历了第二次世界大战中的鹿特丹大轰炸、德国占领荷兰等事件。1948 年，他以数学、物理、化学以及生物全满分的成绩高中毕业。1952 年 3 月，年仅 21 岁的 Dijkstra （此时距离我出生还有 9 个月时间）入职荷兰阿姆斯特丹数学中心，成为了荷兰的第一个程序员。</p></blockquote><p>In 1955, having been a programmer for three years, and while still a student, Dijkstra concluded that the intellectual challenge of programming was greater than the intellectual challenge of theoretical physics. As a result, he chose programming as his long-term career.</p><blockquote><p>1955 年，在从事编程工作 3 年之后，当时还是一个学生的 Dijkstra 就认为编程相比理论物理更有挑战性，因此他选择将编程作为终身职业。</p></blockquote><p>In 1957, Dijkstra married Maria Debets. At the time, you had to state your profession as part of the marriage rites in the Netherlands. The Dutch authorities were unwilling to accept “programmer” as Dijkstra’s profession; they had never heard of such a profession. To satisfy them, Dijkstra settled for “theoretical physicist” as his job title.</p><blockquote><p>1957 年，Dijkstra 与 Maria Debets 结婚了。在当时的荷兰，新郎新娘必须在结婚仪式上公布自己的职业。而当时的荷兰官方政府拒绝承认“程序员”这一职业，因为他们从来没有听说过。最终 Dijkstra 不得不继续使用”理论物理学家这一职位名称。</p></blockquote><p>As part of deciding to make programming his career, Dijkstra conferred with his boss, Adriaan van Wijngaarden. Dijkstra was concerned that no one had identified a discipline, or science, of programming, and that he would therefore not be taken seriously. His boss replied that Dijkstra might very well be one of the people who would discover such disciplines, thereby evolving software into a science.</p><blockquote><p>Dijkstra 和他的老板 Adriaan van Wijingaarden 曾经讨论过将“程序员”当作终身职业这件事，Dijkstra 最担心的是由于没有人认真地对待过编程这件事或者将它当作是一门学术学科对待，他的科研成果可能将不会得到认真对待。而 Adriaan 则建议 Dijkstra：为什么不亲自去开创这门学科呢?</p></blockquote><p>Dijkstra started his career in the era of vacuum tubes, when computers were huge, fragile, slow, unreliable, and (by today’s standards) extremely limited. In those early years, programs were written in binary, or in very crude assembly language. Input took the physical form of paper tape or punched cards. The edit&#x2F;compile&#x2F;test loop was hours—if not days—long.</p><blockquote><p>当时还是真空管阶段。计算机体积巨大，运行缓慢，还非常容易出故障，功能（与今天对比）十分有限。人们还是直接使用二进制数，或者使用非常原始的汇编语言编程。计算机的输入方式则还是用纸卷带或者是打孔卡片。要想执行完整的编辑、编译、测试流程是非常耗时的，通常需要数小时或者数天才能完成。</p></blockquote><p>It was in this primitive environment that Dijkstra made his great discoveries.</p><blockquote><p>Dijkstra 就是在这样原始的条件下做出其非凡的成就的。</p></blockquote><h2 id="PROOF-可推导性"><a href="#PROOF-可推导性" class="headerlink" title="PROOF 可推导性"></a>PROOF 可推导性</h2><p>The problem that Dijkstra recognized, early on, was that programming is hard, and that programmers don’t do it very well. A program of any complexity contains too many details for a human brain to manage without help. Overlooking just one small detail results in programs that may seem to work, but fail in surprising ways.</p><blockquote><p>Dijkstra 很早就得出的结论是：编程是一项难度很大的活动。一段程序无论复杂与否，都包含了很多的细节信息。如果没有工具的帮助，这些细节的信息是远远超过一个程序员的认知能力范围的。而在一段程序中，哪怕仅仅是一个小细节的错误，也会造成整个程序出错。</p></blockquote><p>Dijkstra’s solution was to apply the mathematical discipline of proof. His vision was the construction of a Euclidian hierarchy of postulates, theorems, corollaries, and lemmas. Dijkstra thought that programmers could use that hierarchy the way mathematicians do. In other words, programmers would use proven structures, and tie them together with code that they would then prove correct themselves.</p><blockquote><p>Dijkstra 提出的解决方案是采用数学推导方法。他的想法是借鉴数学中的公理（Postulate）、定理（Theorem）、推论（Corollary）和引理（Lemma），形成一种欧几里得结构。Dijkstra 认为程序员可以像数学家一样对自己的程序进行推理证明。换句话说，程序员可以用代码将一些已证明可用的结构串联起来，只要自行证明这些额外代码是正确的，就可以推导出整个程序的正确性。</p></blockquote><p>Of course, to get this going, Dijkstra realized that he would have to demonstrate the technique for writing basic proofs of simple algorithms. This he found to be quite challenging.</p><blockquote><p>当然，在这之前，必须先展示如何推导证明简单算法的正确性，这本身就是一件极具挑战性的工作。</p></blockquote><p>During his investigation, Dijkstra discovered that certain uses of goto statements prevent modules from being decomposed recursively into smaller and smaller units, thereby preventing use of the divide-and-conquer approach necessary for reasonable proofs.</p><blockquote><p>Dijkstra 在研究过程中发现了一个问题：goto 语句的某些用法会导致某个模块 无法被递归拆分成更小的、可证明的单元，这会导致无法采用分解法来将大型问题进一步拆分成更小的、可证明的部分。</p></blockquote><p>Other uses of goto, however, did not have this problem. Dijkstra realized that these “good” uses of goto corresponded to simple selection and iteration control structures such as if&#x2F;then&#x2F;else and do&#x2F;while. Modules that used only those kinds of control structures could be recursively subdivided into provable units.</p><blockquote><p>goto 语句的其他用法虽然不会导致这种问题，但是 Dijkstra 意识到它们的实际效果其实和更简单的分支结构 if-then-else 以及循环结构 do-while 是一致的。如果代码中只采用了这两类控制结构，则一定可以将程序分解成更小的、可证明的单元。</p></blockquote><p>Dijkstra knew that those control structures, when combined with sequential execution, were special. They had been identified two years before by Böhm and Jacopini, who proved that all programs can be constructed from just three structures: sequence, selection, and iteration.</p><blockquote><p>事实上，Dijkstra 很早就知道将这些控制结构与顺序结构的程序组合起来很有用。因为在两年前，Bohm 和 Jocopini 刚刚证明了人们可以用顺序结构、分支结构、循环结构这三种结构构造出任何程序。</p></blockquote><p>This discovery was remarkable: The very control structures that made a module provable were the same minimum set of control structures from which all programs can be built. Thus structured programming was born.</p><blockquote><p>这个发现非常重要：因为它证明了我们构建可推导模块所需要的控制结构集与构建所有程序所需的控制结构集的最小集是等同的。这样—来，结构化编程就诞生了。</p></blockquote><p>Dijkstra showed that sequential statements could be proved correct through simple enumeration. The technique mathematically traced the inputs of the sequence to the outputs of the sequence. This approach was no different from any normal mathematical proof.</p><blockquote><p>Dijkstra 展示了顺序结构的正确性可以通过枚举法证明，其过程与其他一般的数学推导过程是一样的：针对序列中的每个输入，跟踪其对应的输出值的变化就可以了。</p></blockquote><p>Dijkstra tackled selection through reapplication of enumeration. Each path through the selection was enumerated. If both paths eventually produced appropriate mathematical results, then the proof was solid.</p><blockquote><p>同样的，Dijkstra 利用枚举法又证明了分支结构的可推导性。因为我们只要能用枚举法证明分支结构中每条路径的正确性，自然就可以推导出分支结构本身的正确性。</p></blockquote><p>Iteration was a bit different. To prove an iteration correct, Dijkstra had to use induction. He proved the case for 1 by enumeration. Then he proved the case that if N was assumed correct, N + 1 was correct, again by enumeration. He also proved the starting and ending criteria of the iteration by enumeration.</p><blockquote><p>循环结构的证明过程则有所不同，为了证明一段循环程序的正确性，Dijkstra 需要采用数学归纳法。具体来说就是，首先要用枚举法证明循环 1 次的正确性。接下来再证明如果循环 N 次是正确的，那么循环 N+1 次也同样也是正确的。最后还要用枚举法证明循环结构的起始与结束条件的正确性。</p></blockquote><p>Such proofs were laborious and complex—but they were proofs. With their development, the idea that a Euclidean hierarchy of theorems could be constructed seemed reachable.</p><blockquote><p>尽管这些证明过程本身非常复杂和烦琐，但确实是完备的。有了这样的证明过程，用欧几里得层级构造定理的方式来验证程序正确性的目标，貌似近在咫尺了。</p></blockquote><h2 id="A-HARMFUL-PROCLAMATION-goto-是有害的"><a href="#A-HARMFUL-PROCLAMATION-goto-是有害的" class="headerlink" title="A HARMFUL PROCLAMATION goto 是有害的"></a>A HARMFUL PROCLAMATION goto 是有害的</h2><p>In 1968, Dijkstra wrote a letter to the editor of CACM, which was published in the March issue. The title of this letter was “Go To Statement Considered Harmful.” The article outlined his position on the three control structures.</p><blockquote><p>1968 年，Dijkstra 曾经给 CACM 的编辑写过一封信。这封信后来发表于 CACM 3 月刊，标题是 Go To Statement Considered Harmful，Dijkstra 在信中具体描绘了他对三种控制结构的看法。</p></blockquote><p>And the programming world caught fire. Back then we didn’t have an Internet, so people couldn’t post nasty memes of Dijkstra, and they couldn’t flame him online. But they could, and they did, write letters to the editors of many published journals.</p><blockquote><p>这可捅了个大篓子。由于当时还没有互联网，大家还不能直接上网发帖来对 Dijkstra 进行冷嘲热讽，他们唯一能做的，也是大部分人的选择，就是不停地给各种公开发表的报刊的编辑们写信。</p></blockquote><p>Those letters weren’t necessarily all polite. Some were intensely negative; others voiced strong support for his position. And so the battle was joined, ultimately to last about a decade.</p><blockquote><p>可想而知，有的信件的措辞并不那么友善，甚至是非常负面的。但是，也不乏强烈支持者。总之，这场火热的争论持续了超过 10 年。</p></blockquote><p>Eventually the argument petered out. The reason was simple: Dijkstra had won. As computer languages evolved, the goto statement moved ever rearward, until it all but disappeared. Most modern languages do not have a goto statement—and, of course, LISP never did.</p><blockquote><p>当然，这场辩论最终还是逐渐停止了。原因很简单：Dijkstra 是对的。随着编程语言的演进，goto 语句的重要性越来越小，最终甚至消失了。如今大部分的现代编程语言中都已经没有了 goto 语句。哦，对了，LISP 里从来就没有过！</p></blockquote><p>Nowadays we are all structured programmers, though not necessarily by choice. It’s just that our languages don’t give us the option to use undisciplined direct transfer of control.</p><blockquote><p>现如今，无论是否自愿，我们都是结构化编程范式的践行者了，因为我们用的编程语言基本上都已经禁止了不受限制的直接控制转移语句。</p></blockquote><p>Some may point to named breaks in Java or exceptions as goto analogs. In fact, these structures are not the utterly unrestricted transfers of control that older languages like Fortran or COBOL once had. Indeed, even languages that still support the goto keyword often restrict the target to within the scope of the current function.</p><blockquote><p>或许有些人会指出，Java 中的带命名的 break 语句或者 Exception 都和 goto 很类似。这些语法结构与老的编程语言（类似 FORTRAN 和 COBOL）中的完全无限制的 goto 语句根本不一样。就算那些还支持 goto 关键词的编程语言也通常限制了 goto 的目标不能超出当前函数范围。</p></blockquote><h2 id="FUNCTIONAL-DECOMPOSITION-功能性降解拆分"><a href="#FUNCTIONAL-DECOMPOSITION-功能性降解拆分" class="headerlink" title="FUNCTIONAL DECOMPOSITION 功能性降解拆分"></a>FUNCTIONAL DECOMPOSITION 功能性降解拆分</h2><p>Structured programming allows modules to be recursively decomposed into provable units, which in turn means that modules can be functionally decomposed. That is, you can take a large-scale problem statement and decompose it into high-level functions. Each of those functions can then be decomposed into lower-level functions, ad infinitum. Moreover, each of those decomposed functions can be represented using the restricted control structures of structured programming.</p><blockquote><p>既然结构化编程范式可将模块递归降解拆分为可推导的单元，这就意味着模块了可以按功能进行降解拆分。这样一来，我们就可以将一个大型问题拆分为一系列高级函数的组合，而这些高级函数各自又可以继续被拆分为一系列低级函数，如此无限递归。更重要的是，每个被拆分出来的函数也都可以用结构化编程范式来书写。</p></blockquote><p>Building on this foundation, disciplines such as structured analysis and structured design became popular in the late 1970s and throughout the 1980s. Men like Ed Yourdon, Larry Constantine, Tom DeMarco, and Meilir Page-Jones promoted and popularized these techniques throughout that period. By following these disciplines, programmers could break down large proposed systems into modules and components that could be further broken down into tiny provable functions.</p><blockquote><p>以此为理论基础，在 20 世纪 70 年代晚期到 10 年代中期出现的结构化分析与结构化设计工作才能广为人知。Ed Yourdon、Larry Constantine、Tom DeMarco 以及 Meilir Page Jones 在这期间为此做了很多推广工作。通过采用这些技巧，程序员可以将大型系统设计拆分成模块和组件，而这些模块和组件最终可以拆分为更小的、可证明的函数。</p></blockquote><h2 id="NO-FORMAL-PROOFS-形式化证明没有发生"><a href="#NO-FORMAL-PROOFS-形式化证明没有发生" class="headerlink" title="NO FORMAL PROOFS 形式化证明没有发生"></a>NO FORMAL PROOFS 形式化证明没有发生</h2><p>But the proofs never came. The Euclidean hierarchy of theorems was never built. And programmers at large never saw the benefits of working through the laborious process of formally proving each and every little function correct. In the end, Dijkstra’s dream faded and died. Few of today’s programmers believe that formal proofs are an appropriate way to produce high-quality software.</p><blockquote><p>但是，人人都用完整的形式化证明的一天没有到来。大部分人不会真的按照欧几里得结构为每个小函数书写冗长复杂的正确性证明过程。Dijkstra 的梦想最终并没有实现。没有几个程序员会认为形式化验证是产出高质量软件的必备条件。</p></blockquote><p>Of course, formal, Euclidian style, mathematical proofs are not the only strategy for proving something correct. Another highly successful strategy is the scientific method.</p><blockquote><p>当然，形式化的、欧几里得式的数学推导证明并不是证明结构化编程正确性的唯一手段。下面我们来看另外一个十分成功的策略：科学证明法。</p></blockquote><h2 id="SCIENCE-TO-THE-RESCUE-科学来救场"><a href="#SCIENCE-TO-THE-RESCUE-科学来救场" class="headerlink" title="SCIENCE TO THE RESCUE 科学来救场"></a>SCIENCE TO THE RESCUE 科学来救场</h2><p>Science is fundamentally different from mathematics, in that scientific theories and laws cannot be proven correct. I cannot prove to you that Newton’s second law of motion, F &#x3D; ma, or law of gravity, F &#x3D; Gm1m2&#x2F;r2, are correct. I can demonstrate these laws to you, and I can make measurements that show them correct to many decimal places, but I cannot prove them in the sense of a mathematical proof. No matter how many experiments I conduct or how much empirical evidence I gather, there is always the chance that some experiment will show that those laws of motion and gravity are incorrect.</p><blockquote><p>科学和数学在证明方法上有着根本性的不同，科学理论和科学定律通常是无法被证明的，譬如我们并没有办法证明牛顿第二运动定律 F&#x3D;ma 或者万有引力定律 F&#x3D;Gm1m2&#x2F;r^2 是正确的，但我们可以用实际案例来演示这些定律的正确性，并通过高精度测量来证明当相关精度达到小数点后多少位时，被测量对象仍然一直满足这个定律。但我们始终没有办法像用数学方法一样推导出这个定律。而且，不管我们进行多少次正确的实验，也无法排除今后会存在某一次实验可以推翻牛顿第二运动定律与万有引力定律的可能性。</p></blockquote><p>That is the nature of scientific theories and laws: They are falsifiable but not provable.</p><blockquote><p>这就是科学理论和科学定律的特点：它们可以被证伪，但是没有办法被证明。</p></blockquote><p>And yet we bet our lives on these laws every day. Every time you get into a car, you bet your life that F &#x3D; ma is a reliable description of the way the world works. Every time you take a step, you bet your health and safety that F &#x3D; Gm1m2&#x2F;r2 is correct.</p><blockquote><p>但是我们仍然每天都在依赖这些定律生活。开车的时候，我们就等于是在用性命担保 F&#x3D;ma 是对世界运转方式的一个可靠的描述。每当我们迈出一步的时候，和等于在亲身证明 F&#x3D;Gm1m2&#x2F;r^2 是正确的。</p></blockquote><p>Science does not work by proving statements true, but rather by proving statements false. Those statements that we cannot prove false, after much effort, we deem to be true enough for our purposes.</p><blockquote><p>科学方法论不需要证明某条结论是正确的，只需要想办法证明它是错误的。如果某个结论经过一定的努力无法证伪，我们则认为它在当下是足够正确的。</p></blockquote><p>Of course, not all statements are provable. The statement “This is a lie” is neither true nor false. It is one of the simplest examples of a statement that is not provable.</p><blockquote><p>当然，不是所有的结论都可以被证明或者证伪的。举一个最简单的不可证明的例子：“这句话是假的”，非真也非伪。</p></blockquote><p>Ultimately, we can say that mathematics is the discipline of proving provable statements true. Science, in contrast, is the discipline of proving provable statements false.</p><blockquote><p>最终，我们可以说数学是要将可证明的结论证明，而与之相反，科学研究则是要将可证明的结论证伪。</p></blockquote><h2 id="TESTS-测试"><a href="#TESTS-测试" class="headerlink" title="TESTS 测试"></a>TESTS 测试</h2><p>Dijkstra once said, “Testing shows the presence, not the absence, of bugs.” In other words, a program can be proven incorrect by a test, but it cannot be proven correct. All that tests can do, after sufficient testing effort, is allow us to deem a program to be correct enough for our purposes.</p><blockquote><p>Dijkstra 曾经说过“测试只能展示 Bug 的存在，并不能证明不存在 Bug”，换句话说，一段程序可以由一个测试来证明其错误性，但是却不能被证明是正确的。测试的作用是让我们得出某段程序已经足够实现当前目标这一结论。</p></blockquote><p>The implications of this fact are stunning. Software development is not a mathematical endeavor, even though it seems to manipulate mathematical constructs. Rather, software is like a science. We show correctness by failing to prove incorrectness, despite our best efforts.</p><blockquote><p>这一事实所带来的影响是惊人的。软件开发虽然看起来是在操作很多数学结构，其实不是一个数学研究过程。恰恰相反，软件开发更像是一门科学研究学科，我们通过无法证伪来证明软件的正确性。</p></blockquote><p>Such proofs of incorrectness can be applied only to provable programs. A program that is not provable—due to unrestrained use of goto, for example—cannot be deemed correct no matter how many tests are applied to it.</p><blockquote><p>注意，这种证伪过程只能应用于可证明的程序上。某段程序如果是不可证明的，例如，其中采用了不加限制的 goto 语句，那么无论我们为它写多少测试，也不能够证明其正确性。</p></blockquote><p>Structured programming forces us to recursively decompose a program into a set of small provable functions. We can then use tests to try to prove those small provable functions incorrect. If such tests fail to prove incorrectness, then we deem the functions to be correct enough for our purposes.</p><blockquote><p>结构化编程范式促使我们先将一段程序递归降解为一系列可证明的小函数，然后再编写相关的测试来试图证明这些函数是错误的。如果这些测试无法证伪这些函数，那么我们就可以认为这些函数是足够正确的，进而推导整个程序是正确的。</p></blockquote><h2 id="CONCLUSION-本章小结-2"><a href="#CONCLUSION-本章小结-2" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>It is this ability to create falsifiable units of programming that makes structured programming valuable today. This is the reason that modern languages do not typically support unrestrained goto statements. Moreover, at the architectural level, this is why we still consider functional decomposition to be one of our best practices.</p><blockquote><p>结构化编程范式中最有价值的地方就是，它赋予了我们创造可证伪程序单元的能力。这就是为什么现代编程语言一般不支持无限制的 goto 语句。更重要的是，这也是为什么在架构设计领域，功能性降解拆分仍然是最佳实践之一。</p></blockquote><p>At every level, from the smallest function to the largest component, software is like a science and, therefore, is driven by falsifiability. Software architects strive to define modules, components, and services that are easily falsifiable (testable). To do so, they employ restrictive disciplines similar to structured programming, albeit at a much higher level.</p><blockquote><p>无论在哪一个层面上，从最小的函数到最大组件，软件开发的过程都和科学研究非常类似，它们都是由证伪驱动的。软件架构师需要定义可以方便地进行证伪（测试）的模块、组件以及服务。为了达到这个目的，他们需要将类似结构化编程的限制方法应用在更高的层面上。</p></blockquote><p>It is those restrictive disciplines that we will study in some detail in the chapters to come.</p><blockquote><p>我们在接下来的章节中将会深入研究这些限制性的方法。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap5-OBJECT-ORIENTED-PROGRAMMING-面向对象编程"><a href="#Chap5-OBJECT-ORIENTED-PROGRAMMING-面向对象编程" class="headerlink" title="Chap5. OBJECT-ORIENTED PROGRAMMING 面向对象编程"></a>Chap5. OBJECT-ORIENTED PROGRAMMING 面向对象编程</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN05.jpg"></p><p>As we will see, the basis of a good architecture is the understanding and application of the principles of object-oriented design (OO). But just what is OO?</p><blockquote><p>稍后我们会讲到，设计一个优秀的软件架构要基于对面向对象设计（Object-Oriented Design）的深入理解及应用。但我们首先得弄明白一个问题：究竟什么是面向对象？</p></blockquote><p>One answer to this question is “The combination of data and function.” Although often cited, this is a very unsatisfying answer because it implies that o.f() is somehow different from f(o). This is absurd. Programmers were passing data structures into functions long before 1966, when Dahl and Nygaard moved the function call stack frame to the heap and invented OO.</p><blockquote><p>对于这个问题，一种常见的回答是“数据与函数的组合”。这种说法虽然被广为引用，但总显得并不是那么贴切，因为它似乎暗示了 <code>o.f()</code> 与 <code>f(o)</code> 之间是有区别的，这显然不是事实。面向对象理论是在 1966 年提出的，当时 Dahl 和 Nygaard 主要是将函数调用栈迁移到了堆区域中。数据结构被用作函数的调用参数这件事情远比这发生的时间更早。</p></blockquote><p>Another common answer to this question is “A way to model the real world.” This is an evasive answer at best. What does “modeling the real world” actually mean, and why is it something we would want to do? Perhaps this statement is intended to imply that OO makes software easier to understand because it has a closer relationship to the real world—but even that statement is evasive and too loosely defined. It does not tell us what OO is.</p><blockquote><p>另一种常见的回答是“面向对象编程是一种对真实世界进行建模的方式”，这种回答只能算作避重就轻。“对真实世界的建模”到底要如何进行？我们为什么要这么做，有什么好处？也许这句话意味着是“由于采用面向对象方式构建的软件与真实世界的关系更紧密，所以面向对象编程可以使得软件开发更容易”——即使这样说，也仍然逃避了关键问题——面向对象编程究竟是什么?</p></blockquote><p>Some folks fall back on three magic words to explain the nature of OO: encapsulation, inheritance, and polymorphism. The implication is that OO is the proper admixture of these three things, or at least that an OO language must support these three things.</p><blockquote><p>还有些人在回答这个问题的时候，往往会搬出一些神秘的词语，譬如封装（encapsulation）、继承（inheritance）、多态（polymorphism）。其隐含意思就是说面向对象编程是这三项的有机组合，或者任何一种支持面向对象的编程语言必须支持这三个特性。</p></blockquote><p>Let’s examine each of these concepts in turn.</p><blockquote><p>那么，我们接下来可以逐个来分析一下这三个概念。</p></blockquote><h2 id="ENCAPSULATION-封装"><a href="#ENCAPSULATION-封装" class="headerlink" title="ENCAPSULATION? 封装"></a>ENCAPSULATION? 封装</h2><p>The reason encapsulation is cited as part of the definition of OO is that OO languages provide easy and effective encapsulation of data and function. As a result, a line can be drawn around a cohesive set of data and functions. Outside of that line, the data is hidden and only some of the functions are known. We see this concept in action as the private data members and the public member functions of a class.</p><blockquote><p>导致封装这个概念经常被引用为面向对象编程定义的一部分。通过釆用封装特性，我们可以把一组相关联的数据和函数圈起来，便圈外血的代码只能看见部分函数，数据则完全不可见。譬如在实际应用中，类（class）中的公共函数和私有成员变量就是这样。</p></blockquote><p>This idea is certainly not unique to OO. Indeed, we had perfect encapsulation in C. Consider this simple C program:</p><blockquote><p>然而，这个特性其实并不是面向对象编程所独有的。其实，c 语言也支持完整的封装，下面来看一个简单的 c 程序：</p></blockquote><p>point.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>;</span></span><br><span class="line"><span class="keyword">struct</span> Point* <span class="title function_">makePoint</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">distance</span> <span class="params">(<span class="keyword">struct</span> Point *p1, <span class="keyword">struct</span> Point *p2)</span>;</span><br></pre></td></tr></table></figure><p>point.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;point.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">  <span class="type">double</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Point* <span class="title function_">makepoint</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Point</span>* <span class="title">p</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Point));</span><br><span class="line">  p-&gt;x = x;</span><br><span class="line">  p-&gt;y = y;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">distance</span><span class="params">(<span class="keyword">struct</span> Point* p1, <span class="keyword">struct</span> Point* p2)</span> &#123;</span><br><span class="line">  <span class="type">double</span> dx = p1-&gt;x - p2-&gt;x;</span><br><span class="line">  <span class="type">double</span> dy = p1-&gt;y - p2-&gt;y;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sqrt</span>(dx*dx+dy*dy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The users of point.h have no access whatsoever to the members of struct Point. They can call the makePoint() function, and the distance() function, but they have absolutely no knowledge of the implementation of either the Point data structure or the functions.</p><blockquote><p>显然，使用 point.h 的程序是没有 Point 结构体成员的访问权限的。它们只能调用 <code>makePoint()</code> 函数和 <code>distance()</code> 函数，但对它们来说，Point 这个数据结构体的内部细节，以及函数的具体实现方式都是不可见的。</p></blockquote><p>This is perfect encapsulation—in a non-OO language. C programmers used to do this kind of thing all the time. We would forward declare data structures and functions in header files, and then implement them in implementation files. Our users never had access to the elements in those implementation files.</p><blockquote><p>这正是完美封装 虽然 C 语言是非面向对象的编程语言。上述 C 程序是很常见的。在头文件中进行数据结构以及函数定义的前置声明（forward declare），然后 在程序文件中具体实现。程序文件中的具体实现细节对使用者来说是不可见的。</p></blockquote><p>But then came OO in the form of C++—and the perfect encapsulation of C was broken.</p><blockquote><p>而 C++作为一种面向对象编程语言，反而破坏了 c 的完美封装性。</p></blockquote><p>The C++ compiler, for technical reasons,1 needed the member variables of a class to be declared in the header file of that class. So our Point program changed to look like this:</p><blockquote><p>由于一些技术原，C++编译器要求类的成员变量必须在该类的头文件中声明。这样一来，我们的 point.h 程序随之就改成了这样：</p></blockquote><p>point.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Point</span>(<span class="type">double</span> x, <span class="type">double</span> y);</span><br><span class="line">  <span class="function"><span class="type">double</span> <span class="title">distance</span><span class="params">(<span class="type">const</span> Point&amp; p)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">double</span> x;</span><br><span class="line">  <span class="type">double</span> y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>point.cc</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;point.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Point::<span class="built_in">Point</span>(<span class="type">double</span> x, <span class="type">double</span> y)</span><br><span class="line">: <span class="built_in">x</span>(x), <span class="built_in">y</span>(y)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Point::distance</span><span class="params">(<span class="type">const</span> Point&amp; p)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">  <span class="type">double</span> dx = x-p.x;</span><br><span class="line">  <span class="type">double</span> dy = y-p.y;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sqrt</span>(dx*dx + dy*dy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Clients of the header file point.h know about the member variables x and y! The compiler will prevent access to them, but the client still knows they exist. For example, if those member names are changed, the point.cc file must be recompiled! Encapsulation has been broken.</p><blockquote><p>好了，point.h 文件的使用者现在知道了成员变量 x 和 y 的存在！虽然编译器会禁止对这两个变量的直接访问，但是使用者仍然知道了它们的存在。而且，如果 x 和 y 变量名称被改变了，point.cc 也必须重新编译才行！这样的封装性显然是不完美的。</p></blockquote><p>Indeed, the way encapsulation is partially repaired is by introducing the public, private, and protected keywords into the language. This, however, was a hack necessitated by the technical need for the compiler to see those variables in the header file.</p><blockquote><p>当然，C++通过在编程语言层面引入 public、private、protected 这些关键词，部分维护了封装性。但所有这些都是为了解决编译器自身的技术实现问题而引入的 hack——编译器由于技术实现原因必须在头文件中看到成员变量的定义。</p></blockquote><p>Java and C# simply abolished the header&#x2F;implementation split altogether, thereby weakening encapsulation even more. In these languages, it is impossible to separate the declaration and definition of a class.</p><blockquote><p>而 Java 和 C# 则彻底抛弃了头文件与实现文件分离的编程方式，这其实进一步削弱了封装性。因为在这些语言中，我们是无法区分一个类的声明和定义的。</p></blockquote><p>For these reasons, it is difficult to accept that OO depends on strong encapsulation. Indeed, many OO languages2 have little or no enforced encapsulation.</p><blockquote><p>由于上述原因，我们很难说强封装是面向对象编程的必要条件。而事实上，有很多面向对象编程语言|对封装性并没有强制性的要求。</p></blockquote><p>OO certainly does depend on the idea that programmers are well-behaved enough to not circumvent encapsulated data. Even so, the languages that claim to provide OO have only weakened the once perfect encapsulation we enjoyed with C.</p><blockquote><p>面向对象编程在应用上确实会要求程序员尽量避免破坏数据的封装性。但实际情况是，那些声称自己提供面向对象编程支持的编程语言，相对于 C 这种完美封装的语言而言，其封装性都被削弱了，而不是加强了。</p></blockquote><h2 id="INHERITANCE-继承"><a href="#INHERITANCE-继承" class="headerlink" title="INHERITANCE? 继承"></a>INHERITANCE? 继承</h2><p>If OO languages did not give us better encapsulation, then they certainly gave us inheritance.</p><blockquote><p>既然面向对象编程语言并没有提供更好的封装性，那么在继承性方面又如何呢？</p></blockquote><p>Well—sort of. Inheritance is simply the redeclaration of a group of variables and functions within an enclosing scope. This is something C programmers3 were able to do manually long before there was an OO language.</p><blockquote><p>嗯，其实也就一般般吧。简而言之，继承的主要作用是让我们可以在某个作用域内对外部定义的某一组变量与函数进行覆盖。这事实上也是 c 程序员早在面向对象编程语言发明之前就一直在做的事了。</p></blockquote><p>Consider this addition to our original point.h C program:</p><blockquote><p>下面，看一下刚才的 C 程序 point.h 的扩展版：</p></blockquote><p>namedPoint.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NamedPoint</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> NamedPoint* <span class="title function_">makeNamedPoint</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y, <span class="type">char</span>* name)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">setName</span><span class="params">(<span class="keyword">struct</span> NamedPoint* np, <span class="type">char</span>* name)</span>;</span><br><span class="line"><span class="type">char</span>* <span class="title function_">getName</span><span class="params">(<span class="keyword">struct</span> NamedPoint* np)</span>;</span><br></pre></td></tr></table></figure><p>namedPoint.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;namedPoint.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NamedPoint</span> &#123;</span></span><br><span class="line">  <span class="type">double</span> x,y;</span><br><span class="line">  <span class="type">char</span>* name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> NamedPoint* <span class="title function_">makeNamedPoint</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y, <span class="type">char</span>* name)</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">NamedPoint</span>* <span class="title">p</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> NamedPoint));</span><br><span class="line">  p-&gt;x = x;</span><br><span class="line">  p-&gt;y = y;</span><br><span class="line">  p-&gt;name = name;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setName</span><span class="params">(<span class="keyword">struct</span> NamedPoint* np, <span class="type">char</span>* name)</span> &#123;</span><br><span class="line">  np-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">getName</span><span class="params">(<span class="keyword">struct</span> NamedPoint* np)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> np-&gt;name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;point.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;namedPoint.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> ac, <span class="type">char</span>** av)</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">NamedPoint</span>* <span class="title">origin</span> =</span> makeNamedPoint(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="string">&quot;origin&quot;</span>);</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">NamedPoint</span>* <span class="title">upperRight</span> =</span> makeNamedPoint  (<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="string">&quot;upperRight&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;distance=%f\n&quot;</span>,</span><br><span class="line">    distance(</span><br><span class="line">             (<span class="keyword">struct</span> Point*) origin,</span><br><span class="line">             (<span class="keyword">struct</span> Point*) upperRight));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you look carefully at the main program, you’ll see that the NamedPoint data structure acts as though it is a derivative of the Point data structure. This is because the order of the first two fields in NamedPoint is the same as Point. In short, NamedPoint can masquerade as Point because NamedPoint is a pure superset of Point and maintains the ordering of the members that correspond to Point.</p><blockquote><p>请仔细观察 main 函数，这里 NamedPoint 数据结构是被当作 Point 数据结构的一个衍生体來使用的。之所以可以这样做，是因为 NamedPoint 结构体的前两个成员的顺用与 Point 结构休的完全一致。简单来说，NamedPoint 之所以可以被伪装成 Point 来使用，是因为 NamedPoint 是 Point 结构体的一个超集，同两者共同成员的顺序也是一样的。</p></blockquote><p>This kind of trickery was a common practice4 of programmers prior to the advent of OO. In fact, such trickery is how C++ implements single inheritance.</p><blockquote><p>面这种编程方式虽然看上去有些投机取巧，但是在面向对象理论被提出之前，这已经很常见了。其实，C++内部就是这样实现单继承的。</p></blockquote><p>Thus we might say that we had a kind of inheritance long before OO languages were invented. That statement wouldn’t quite be true, though. We had a trick, but it’s not nearly as convenient as true inheritance. Moreover, multiple inheritance is a considerably more difficult to achieve by such trickery.</p><blockquote><p>因此，我们可以说，早在面向对象编程语言被发明之前，对继承性的支持就已经存在很久了。当然了，这种支持用了一些投机取巧的手段，并不像如今的继昼：样便利易用，而且，多重继承（multiple inheritance）如果还想用这种方法来实现，就更难了。</p></blockquote><p>Note also that in main.c, I was forced to cast the NamedPoint arguments to Point. In a real OO language, such upcasting would be implicit.</p><blockquote><p>同时应该注意的是，在 main.c 中，程序员必须强制将 NamedPoint 的参数类型转换为 Point，而在真正的面向对象编程语言中，这种类型的向上转换通常应该是隐性的。</p></blockquote><p>It’s fair to say that while OO languages did not give us something completely brand new, it did make the masquerading of data structures significantly more convenient.</p><blockquote><p>综上所述，我们可以认为，虽然面向对象编程在继承性方面并没有开创出新，但是的确在数据结构的伪装性上提供了相当程度的便利性。</p></blockquote><p>To recap: We can award no point to OO for encapsulation, and perhaps a half-point for inheritance. So far, that’s not such a great score.</p><blockquote><p>回顾一下到目前为止的分析，面向对象编程在封装性上得 0 分，在继承性上勉强可以得 0.5 分（满分为 1)。</p></blockquote><p>But there’s one more attribute to consider.</p><blockquote><p>下面，我们还有最后一个特性要讨论。</p></blockquote><h2 id="POLYMORPHISM-多态"><a href="#POLYMORPHISM-多态" class="headerlink" title="POLYMORPHISM? 多态"></a>POLYMORPHISM? 多态</h2><p>Did we have polymorphic behavior before OO languages? Of course we did. Consider this simple C copy program.</p><blockquote><p>在面向编程对象语言被发明之前，我们所使用的编程语言能支持多态吗? 答案是肯定的，请注意看下面这段用 C 语言编写的 copy 程序：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">copy</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> c;</span><br><span class="line">  <span class="keyword">while</span> ((c=getchar()) != EOF)</span><br><span class="line">    <span class="built_in">putchar</span>(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The function getchar() reads from STDIN. But which device is STDIN? The putchar() function writes to STDOUT. But which device is that? These functions are polymorphic—their behavior depends on the type of STDIN and STDOUT.</p><blockquote><p>在上述程序中，函数 <code>getchar()</code> 主要负责从 STDTN 中读取数据。但是 STDLLN 究竟指代的是哪个设备呢？同样的道理，<code>putchar()</code> 主要负责将数据写入 STDOUT，而 STDOUT 又指代的是哪个设备呢？很显然，这类函数其实就具有多态性，因为它们的行为依赖于 STDIN 和 STDOUT 的具体类型。</p></blockquote><p>It’s as though STDIN and STDOUT are Java-style interfaces that have implementations for each device. Of course, there are no interfaces in the example C program—so how does the call to getchar() actually get delivered to the device driver that reads the character?</p><blockquote><p>这里的 STDIN 和 STDOUT 与 Java 中的接口类似，各种设备都有各自的实现。当然，这个 C 程序中是没有接口这个概念的，那么 <code>getchar()</code> 这个调用的动作是 如何真正传递到设备驱动程序中，从而读取到具体内容的呢？</p></blockquote><p>The answer to that question is pretty straightforward. The UNIX operating system requires that every IO device driver provide five standard functions:5 open, close, read, write, and seek. The signatures of those functions must be identical for every IO driver.</p><blockquote><p>其实很简单，UNIX 操作系统强制要求每个 IO 设备都要提供 open、close、read、write 和 seek 这 5 个标准函数。也就是说，每个 IO 设备驱动程序对这 5 种函数的实现在函数调用上必须保持一致。</p></blockquote><p>The FILE data structure contains five pointers to functions. In our example, it might look like this:</p><blockquote><p>首先，FILE 数据结构体中包含了相对应的 5 个函数指针，分别用于指向这些函数：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FILE</span> &#123;</span>  <span class="type">void</span> (*open)(<span class="type">char</span>* name, <span class="type">int</span> mode);  <span class="type">void</span> (*close)();  <span class="type">int</span> (*read)();  <span class="type">void</span> (*write)(<span class="type">char</span>);  <span class="type">void</span> (*seek)(<span class="type">long</span> index, <span class="type">int</span> mode);&#125;;</span><br></pre></td></tr></table></figure><p>The IO driver for the console will define those functions and load up a FILE data structure with their addresses—something like this:</p><blockquote><p>然后，譬如控制台设备的 IO 驱动程序就会提供这 5 个函数的实际定义，将 FILE 结构体的函数指针指向这些对应的实现函数：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;file.h&quot;</span>void open(char* name, int mode) &#123;<span class="comment">/*...*/</span>&#125;void close() &#123;<span class="comment">/*...*/</span>&#125;;int read() &#123;int c;<span class="comment">/*...*/</span> return c;&#125;void write(char c) &#123;<span class="comment">/*...*/</span>&#125;void seek(long index, int mode) &#123;<span class="comment">/*...*/</span>&#125;struct FILE console = &#123;open, close, read, write, seek&#125;;</span></span><br></pre></td></tr></table></figure><p>Now if STDIN is defined as a <code>FILE*</code>, and if it points to the console data structure, then getchar() might be implemented this way:</p><blockquote><p>现在，如果 STDIN 的定义是 <code>FILE*</code>，并同时指向了 console 这个数据结构，那么 <code>getchar()</code> 的实现方式就是这样的：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">FILE</span>* <span class="title">STDIN</span>;</span><span class="type">int</span> <span class="title function_">getchar</span><span class="params">()</span> &#123;  <span class="keyword">return</span> STDIN-&gt;read();&#125;</span><br></pre></td></tr></table></figure><p>In other words, getchar() simply calls the function pointed to by the read pointer of the FILE data structure pointed to by STDIN.</p><blockquote><p>换句话说，<code>getchar()</code> 只是调用了 STDIN 所指向的 FIL E 数据结构体中的 read 函数指针指向的函数。</p></blockquote><p>This simple trick is the basis for all polymorphism in OO. In C++, for example, every virtual function within a class has a pointer in a table called a vtable, and all calls to virtual functions go through that table. Constructors of derivatives simply load their versions of those functions into the vtable of the object being created.</p><blockquote><p>这个简单的编程技巧正是面向对象编程中多态的基础。例如在 C++中，类中的每个虚函数（virtual function）的地址都被记录在一个名叫 vtable 的数据结构里。我们对虚函数的每次调用都要先查询这个表，其衍生类的构造函数负责将该衍生类的虚函数地址加载到整个对象的 vtable 中。</p></blockquote><p>The bottom line is that polymorphism is an application of pointers to functions. Programmers have been using pointers to functions to achieve polymorphic behavior since Von Neumann architectures were first implemented in the late 1940s. In other words, OO has provided nothing new.</p><blockquote><p>归根结底，多态其实不过就是函数指针的一种应用。自从 20 世纪 40 年代末期冯·诺依曼架构诞生那天起，程序员们就一直在使用函数指针模拟多态了。也就是说，面向对象编程在多态方面没有提出任何新概念。</p></blockquote><p>Ah, but that’s not quite correct. OO languages may not have given us polymorphism, but they have made it much safer and much more convenient.</p><blockquote><p>当然了，面向对象编程语言虽然在多态上并没有理论创新，但它们也确实让多态变得更安全、更便于使用了。</p></blockquote><p>The problem with explicitly using pointers to functions to create polymorphic behavior is that pointers to functions are dangerous. Such use is driven by a set of manual conventions. You have to remember to follow the convention to initialize those pointers. You have to remember to follow the convention to call all your functions through those pointers. If any programmer fails to remember these conventions, the resulting bug can be devilishly hard to track down and eliminate.</p><blockquote><p>用函数指针显式实现多态的问题就在于函数指针的危险性。毕竟，函数指针的调用依赖于一系列需要人为遵守的约定。程序员必须严格按照固定约定来初始化函数指针，并同样严格地按照约定来调用这些指针。只要有一个程序员没有遵守这些约定，整个程序就会产生极其难以跟踪和消除的 Bug。</p></blockquote><p>OO languages eliminate these conventions and, therefore, these dangers. Using an OO language makes polymorphism trivial. That fact provides an enormous power that old C programmers could only dream of. On this basis, we can conclude that OO imposes discipline on indirect transfer of control.</p><blockquote><p>面向对象编程语言为我们消除人工遵守这些约定的必要，也就等于消除了这方面的危险性。采用面向对象编程语言让多态实现变得非常简单，让一个传统 C 程序员可以去做以前不敢想的事情。综上所述，我们认为面向对象编程其实是对程序间接控制权的转移进行了约束。</p></blockquote><h3 id="THE-POWER-OF-POLYMORPHISM-多态的强大性"><a href="#THE-POWER-OF-POLYMORPHISM-多态的强大性" class="headerlink" title="THE POWER OF POLYMORPHISM 多态的强大性"></a>THE POWER OF POLYMORPHISM 多态的强大性</h3><p>What’s so great about polymorphism? To better appreciate its charms, let’s reconsider the example copy program. What happens to that program if a new IO device is created? Suppose we want to use the copy program to copy data from a handwriting recognition device to a speech synthesizer device: How do we need to change the copy program to get it to work with those new devices?</p><blockquote><p>那么多态的优势在哪里呢？为了让读者更好地理解多态的好处，我们需要再来看一下刚才的 copy 程序。如果要支持新的 IO 设备，该程序需要做什么改动呢？譬如，假设我们想要用该 copy 程序从一个手写识别设备将数据复制到另一个语音合成设备中，我们需要针对 copy 程序做什么改动，才能实现这个目标呢？</p></blockquote><p>We don’t need any changes at all! Indeed, we don’t even need to recompile the copy program. Why? Because the source code of the copy program does not depend on the source code of the IO drivers. As long as those IO drivers implement the five standard functions defined by FILE, the copy program will be happy to use them.</p><blockquote><p>答案是完全不需要做任何改动！确实，我们甚至不需要重新编译该 copy 程序。为什么？因为 copy 程序的源代码并不依赖于 IO 设备驱动程序的代码。只要 IO 设备驱动程序实现了 FILE 结构体中定义的 5 个标准函数，该 copy 程序就可以正常使用它们。</p></blockquote><p>In short, the IO devices have become plugins to the copy program.</p><blockquote><p>简单来说，IO 设备变成了 copy 程序的插件。</p></blockquote><p>Why did the UNIX operating system make IO devices plugins? Because we learned, in the late 1950s, that our programs should be device independent. Why? Because we wrote lots of programs that were device dependent, only to discover that we really wanted those programs to do the same job but use a different device.</p><blockquote><p>为什么 UNIX 操作系统会将 IO 设备设计成插件形式呢？因为自 20 世纪 50 年代末期以来，我们学到了一个重要经验：程序应该与设备无关。这个经验从何而来呢？因为一度所有程序都是设备相关的，但是后来我们发现自己其实真正需要的是在不同的设备上实现同样的功能。</p></blockquote><p>For example, we often wrote programs that read input data from decks of cards,6 and then punched new decks of cards as output. Later, our customers stopped giving us decks of cards and started giving us reels of magnetic tape. This was very inconvenient, because it meant rewriting large portions of the original program. It would be very convenient if the same program worked interchangeably with cards or tape.</p><blockquote><p>例如，我们曾经写过一些程序，需要从卡片盒中的打孔卡片读取数据，同时要通过在新的卡片上打孔来输出数据。后来，客户不再使用打孔卡片，而开始使用磁带卷了。这就给我们带来了很多麻烦，很多程序都需要重写。于是我们就会想，如果这段程序可以同时操作打孔卡片和磁带那该多好。</p></blockquote><p>The plugin architecture was invented to support this kind of IO device independence, and has been implemented in almost every operating system since its introduction. Even so, most programmers did not extend the idea to their own programs, because using pointers to functions was dangerous.</p><blockquote><p>插件式架构就是为了支持这种 IO 不相关性而发明的，它几乎在随后的所有系统中都有应用。但即使多态有如此多优点，大部分程序员还是没有将插件特性引入他们自己的程序中，因为函数指针实在是太危险了。</p></blockquote><p>OO allows the plugin architecture to be used anywhere, for anything.</p><blockquote><p>而面向对象编程的出现使得这种插件式架构可以在任何地方被安全地使用。</p></blockquote><h3 id="DEPENDENCY-INVERSION-依赖反转"><a href="#DEPENDENCY-INVERSION-依赖反转" class="headerlink" title="DEPENDENCY INVERSION 依赖反转"></a>DEPENDENCY INVERSION 依赖反转</h3><p>Imagine what software was like before a safe and convenient mechanism for polymorphism was available. In the typical calling tree, main functions called high-level functions, which called mid-level functions, which called low-level functions. In that calling tree, however, source code dependencies inexorably followed the flow of control (Figure 5.1).</p><blockquote><p>我们可以想象一下在安全和便利的多态支持出现之前，软件是什么样子的。下面有一个典型的调用树的例子，main 函数调用了一些高层函数，这些高层函数又调用了一些中层函数，这些中层函数又继续调用了一些底层函数。在这里，源代码面的依赖不可避免地要跟随程序的控制流（详见图 5.1）。</p></blockquote><p><Figures figure="5-1">Source code dependencies versus flow of control</Figures></p><p>For mainq1w2e3r4 to call one of the high-level functions, it had to mention the name of the module that contained that function In C, this was a #include. In Java, it was an import statement. In C#, it was a using statement. Indeed, every caller was forced to mention the name of the module that contained the callee.</p><blockquote><p>如你所见，main 函数为了调用高层函数，它就必须能够看到这个函数所在模块。在 C 中，我们会通过 #include 来实现，在 Java 中则通过 import 来实现，而在 C# 中则用的是 using 语句。总之，每个函数的调用方都必须要引用被调用方所在的模块。</p></blockquote><p>This requirement presented the software architect with few, if any, options. The flow of control was dictated by the behavior of the system, and the source code dependencies were dictated by that flow of control.</p><blockquote><p>显然，这样做就导致了我们在软件架构上别无选择。在这里，系统行为决定了控制流，而控制流则决定了源代码依赖关系。</p></blockquote><p>When polymorphism is brought into play, however, something very different can happen (Figure 5.2).</p><blockquote><p>但一旦我们使用了多态，情况就不一样了（详见图 5.2）。</p></blockquote><p><Figures figure="5-2">Dependency inversion</Figures></p><p>In Figure 5.2, module HL1 calls the F() function in module ML1. The fact that it calls this function through an interface is a source code contrivance. At runtime, the interface doesn’t exist. HL1 simply calls F() within ML1.7</p><blockquote><p>在图 5.2 中，模块 HL1 调用了 ML1 模块中的 F() 函数，这里的调用是通过源代码级别的接口来实现的。当然在程序实际运行时，接口这个概念是不存在的，HL1 会调用 ML1 中的 F() 函数。</p></blockquote><p>Note, however, that the source code dependency (the inheritance relationship) between ML1 and the interface I points in the opposite direction compared to the flow of control. This is called dependency inversion, and its implications for the software architect are profound.</p><blockquote><p>请注意模块 ML1 和接口 I 在源代码上的依赖关系（或者叫继承关系），该关系的方向和控制流正好是相反的，我们称之为依赖反转。这种反转对软件架构设计的影响是非常大的。</p></blockquote><p>The fact that OO languages provide safe and convenient polymorphism means that any source code dependency, no matter where it is, can be inverted.</p><blockquote><p>事实上，通过利用面向编程语言所提供的这种安全便利的多态实现，无论我们面对怎样的源代码级别的依赖关系，都可以将其反转。</p></blockquote><p>Now look back at that calling tree in Figure 5.1, and its many source code dependencies. Any of those source code dependencies can be turned around by inserting an interface between them.</p><blockquote><p>现在，我们可以再回头来看图 5.1 中的调用树，就会发现其中的众多源代码依赖关系都可以通过引入接口的方式来进行反转。</p></blockquote><p>With this approach, software architects working in systems written in OO languages have absolute control over the direction of all source code dependencies in the system. They are not constrained to align those dependencies with the flow of control. No matter which module does the calling and which module is called, the software architect can point the source code dependency in either direction.</p><blockquote><p>通过这种方法，软件架构师可以完全控制采用了面向对象这种编程方式的系统中所有的源代码依赖关系，而不再受到系统控制流的限制。不管哪个模块调用或者被调用，软件架构师都可以随意更改源代码依赖关系。</p></blockquote><p>That is power! That is the power that OO provides. That’s what OO is really all about—at least from the architect’s point of view.</p><blockquote><p>这就是面向对象编程的好处，同时也是面向对象编程这种范式的核心本质至少对一个软件架构师来说是这样的。</p></blockquote><p>What can you do with that power? As an example, you can rearrange the source code dependencies of your system so that the database and the user interface (UI) depend on the business rules (Figure 5.3), rather than the other way around.</p><blockquote><p>这种能力有什么用呢？在下面的例子中，我们可以用它来让数据库模块和用户界面模块都依赖于业务逻辑模块（见图 5.3），而非相反。</p></blockquote><p><Figures figure="5-3">The database and the user interface depend on the business rules</Figures></p><p>This means that the UI and the database can be plugins to the business rules. It means that the source code of the business rules never mentions the UI or the database.</p><blockquote><p>这意味着我们让用户界面和数据库都成为业务逻辑的插件。也就是说，业务逻辑模块的源代码不需要引入用户界面和数据库这两个模块。</p></blockquote><p>As a consequence, the business rules, the UI, and the database can be compiled into three separate components or deployment units (e.g., jar files, DLLs, or Gem files) that have the same dependencies as the source code. The component containing the business rules will not depend on the components containing the UI and database.</p><blockquote><p>这样一来，业务逻辑、用户界面以及数据库就可以被编译成三个独立的组件或者部署单元（例如 jar 文件、DLL 文件、Gem 文件等）了，这些组件或者部署单元的依赖关系与源代码的依赖关系是一致的，业务逻辑组件也不会依赖于用户界面和数据库这两个组件。</p></blockquote><p>In turn, the business rules can be deployed independently of the UI and the database. Changes to the UI or the database need not have any effect on the business rules. Those components can be deployed separately and independently.</p><blockquote><p>于是，业务逻辑组件就可以独立于用户界面和数据库来进行部署了，我们对用户界面或者数据库的修改将不会对业务逻辑产生任何影响，这些组件都可以被分另独立地部署。</p></blockquote><p>In short, when the source code in a component changes, only that component needs to be redeployed. This is independent deployability.</p><blockquote><p>简单来说，当某个组件的源代码需要修改时，仅仅需要重新部署该组件，不需要更改其他组件，这就是独立部署能力。</p></blockquote><p>If the modules in your system can be deployed independently, then they can be developed independently by different teams. That’s independent developability.</p><blockquote><p>如果系统中的所有组件都可以独立部署，那它们就可以由不同的团队并行开发，这就是所谓的独立开发能力。</p></blockquote><h2 id="CONCLUSION-本章小结-3"><a href="#CONCLUSION-本章小结-3" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>What is OO? There are many opinions and many answers to this question. To the software architect, however, the answer is clear: OO is the ability, through the use of polymorphism, to gain absolute control over every source code dependency in the system. It allows the architect to create a plugin architecture, in which modules that contain high-level policies are independent of modules that contain low-level details. The low-level details are relegated to plugin modules that can be deployed and developed independently from the modules that contain high-level policies.</p><blockquote><p>面向对象编程到底是什么？业界在这个问题上存在着很多不同的说法和意见。然而对一个软件架构师来说，其含义应该是非常明确的：面向对象编程就是以对象为手段来对源代码中的依赖关系进行控制的能力，这种能力让软件架构师可以构建出某种插件式架构，让高层策略性组件与底层实现性组件相分离，底层组件可必编译成插件，实现独立于高层组件的开发和部署。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap6-FUNCTIONAL-PROGRAMMING-函数式编程"><a href="#Chap6-FUNCTIONAL-PROGRAMMING-函数式编程" class="headerlink" title="Chap6. FUNCTIONAL PROGRAMMING 函数式编程"></a>Chap6. FUNCTIONAL PROGRAMMING 函数式编程</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN06.jpg"></p><p>In many ways, the concepts of functional programming predate programming itself. This paradigm is strongly based on the l-calculus invented by Alonzo Church in the 1930s.</p><blockquote><p>函数式编程所依赖的原理，在很多方而其实是早于编程本身出现的。因为函数式编程这种范式强烈依赖于 Alonzo Church 在 20 世纪 30 年代发明的 λ 演算。</p></blockquote><h2 id="SQUARES-OF-INTEGERS-整数平方"><a href="#SQUARES-OF-INTEGERS-整数平方" class="headerlink" title="SQUARES OF INTEGERS 整数平方"></a>SQUARES OF INTEGERS 整数平方</h2><p>To explain what functional programming is, it’s best to examine some examples. Let’s investigate a simple problem: printing the squares of the first 25 integers.</p><blockquote><p>我们最好还是用一个例子来解释什么是函数式编程。请看下面的这个例子：这段代码想要输出前 25 个整数的平方值。</p></blockquote><p>In a language like Java, we might write the following:</p><blockquote><p>如果使用 Java 语言，代码如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Squint</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">25</span>; i++)</span><br><span class="line">      System.out.println(i*i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In a language like Clojure, which is a derivative of Lisp, and is functional, we might implement this same program as follows:</p><blockquote><p>下面我们改用 Clojure 语言来写这个程序，Clojure 是 LISP 语言的一种衍生体，属于函数式编程语言。其代码如下：</p></blockquote><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> (<span class="name">take</span> <span class="number">25</span> (<span class="name">map</span> (<span class="name">fn</span> [x] (<span class="name">*</span> x x)) (<span class="name">range</span>))))</span><br></pre></td></tr></table></figure><p>If you don’t know Lisp, then this might look a little strange. So let me reformat it a bit and add some comments.</p><blockquote><p>如果读者对 LISP 不熟悉，这段代码可能看起来很奇怪。没关系，让我们换一种格式，用注释来说明一下吧：</p></blockquote><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">println</span> <span class="comment">;___________________ Print</span></span><br><span class="line">  (<span class="name">take</span> <span class="number">25</span> <span class="comment">;_________________ the first 25</span></span><br><span class="line">    (<span class="name">map</span> (<span class="name">fn</span> [x] (<span class="name">*</span> x x)) <span class="comment">;__ squares</span></span><br><span class="line">      (<span class="name">range</span>)))) <span class="comment">;___________ of Integers</span></span><br></pre></td></tr></table></figure><p>It should be clear that println, take, map, and range are all functions. In Lisp, you call a function by putting it in parentheses. For example, (range) calls the range function.</p><blockquote><p>很明显，这里的 println、take、map 和 range 都是函数。在 LISP 中，函数是通过括号来调用的，例如（range）表达式就是在调用 range 函数。</p></blockquote><p>The expression <code>(fn [x] (* x x))</code> is an anonymous function that calls the multiply function, passing its input argument in twice. In other words, it computes the square of its input.</p><blockquote><p>而表达式 <code>(fn [x] (* xx))</code> 则是一个匿名函数，该函数用同样的值作为参数调用了乘法函数。换句话说，该函数计算的是平方值。</p></blockquote><p>Looking at the whole thing again, it’s best to start with the innermost function call.</p><blockquote><p>现在让我们回过头再看一下这整句代码，从最内侧的函数调用开始：</p></blockquote><ul><li>The range function returns a never-ending list of integers starting with 0.</li><li>This list is passed into the map function, which calls the anonymous squaring function on each element, producing a new never-ending list of all the squares.</li><li>The list of squares is passed into the take function, which returns a new list with only the first 25 elements.</li><li>The println function prints its input, which is a list of the first 25 squares of integers.</li></ul><hr><blockquote><ul><li>range 函数会返回一个从 0 开始的整数无穷列表。</li><li>然后该列表会被传入 map 函数，并针对列表中的每个元素，调用求平方值的匿名函数，产生了一个无穷多的、包含平方值的列表。</li><li>接着再将这个列表传入 take 函数，后者会返回一个仅包含前 25 个元素的 新列表。</li><li>println 函数将它的参数输出，该参数就是上面这个包含了 25 个平方值的 列表。</li></ul></blockquote><p>If you find yourself terrified by the concept of never-ending lists, don’t worry. Only the first 25 elements of those never-ending lists are actually created. That’s because no element of a never-ending list is evaluated until it is accessed.</p><blockquote><p>读者不用担心上面提到的无穷列表。因为这些列表中的元素只有在被访问时才会被创建，所以实际上只有前 25 个元素是真正被创建了的。</p></blockquote><p>If you found all of that confusing, then you can look forward to a glorious time learning all about Clojure and functional programming. It is not my goal to teach you about these topics here.</p><blockquote><p>如果上述内容还是让读者觉得云里雾里的话，可以自行学习一下 Clojure 和函数式编程，本书的目标并不是要教你学会这门语言，因此不再展开。</p></blockquote><p>Instead, my goal here is to point out something very dramatic about the difference between the Clojure and Java programs. The Java program uses a mutable variable—a variable that changes state during the execution of the program. That variable is i—the loop control variable. No such mutable variable exists in the Clojure program. In the Clojure program, variables like x are initialized, but they are never modified.</p><blockquote><p>相反，我们讨论它的主要目标是要突显出 Clojure 和 Java 这两种语言之间的巨大区别。在 Java 程序中，我们使用的是可变量，即变量 i，该变量的值会随着程序执行的过程而改变，故被称为循环控制变量。而 Clojure 程序中是不存在这种变量的，变量 x 一旦被初始化之后，就不会再被更改了。</p></blockquote><p>This leads us to a surprising statement: Variables in functional languages do not vary.</p><blockquote><p>这句话有点出人意料：函数式编程语言中的变量（Variable）是不可变（Vary）的。</p></blockquote><h2 id="IMMUTABILITY-AND-ARCHITECTURE-不可变性与软件架构"><a href="#IMMUTABILITY-AND-ARCHITECTURE-不可变性与软件架构" class="headerlink" title="IMMUTABILITY AND ARCHITECTURE 不可变性与软件架构"></a>IMMUTABILITY AND ARCHITECTURE 不可变性与软件架构</h2><p>Why is this point important as an architectural consideration? Why would an architect be concerned with the mutability of variables? The answer is absurdly simple: All race conditions, deadlock conditions, and concurrent update problems are due to mutable variables. You cannot have a race condition or a concurrent update problem if no variable is ever updated. You cannot have deadlocks without mutable locks.</p><blockquote><p>为什么不可变性是软件架构设计需要考虑的重点呢？为什么软件架构帅要操心变量的可变性呢？答案显而易见：所有的竞争问题、死锁问题、并发更新问题都是由可变变量导致的。如果变量永远不会被更改，那就不可能产生竞争或者并发更新问题。如果锁状态是不可变的，那就永远不会产生死锁问题。</p></blockquote><p>In other words, all the problems that we face in concurrent applications—all the problems we face in applications that require multiple threads, and multiple processors—cannot happen if there are no mutable variables.</p><blockquote><p>换句话说，一切并发应用遇到的问题，一切由于使用多线程、多处理器而引起的问题，如果没有可变变量的话都不对能发工。</p></blockquote><p>As an architect, you should be very interested in issues of concurrency. You want to make sure that the systems you design will be robust in the presence of multiple threads and processors. The question you must be asking yourself, then, is whether immutability is practicable.</p><blockquote><p>作为一个软件架构师，当然应该要对并发问题保持高度关注。我们需要确保自己设计的系统在多线程、多处理器环境中能稳定工作。所以在这里，我们实际应该要问的问题是：不可变性是否实际可行？</p></blockquote><p>The answer to that question is affirmative, if you have infinite storage and infinite processor speed. Lacking those infinite resources, the answer is a bit more nuanced. Yes, immutability can be practicable, if certain compromises are made.</p><blockquote><p>如果我们能忽略存储器与处理器在速度上的限制，那么答案是肯定的。否则的话，不可变性只有在一定情况下是可行的。</p></blockquote><p>Let’s look at some of those compromises.</p><blockquote><p>下面让我们来看一下它具体该如何做到可行。</p></blockquote><h2 id="SEGREGATION-OF-MUTABILITY-可变性的隔离"><a href="#SEGREGATION-OF-MUTABILITY-可变性的隔离" class="headerlink" title="SEGREGATION OF MUTABILITY 可变性的隔离"></a>SEGREGATION OF MUTABILITY 可变性的隔离</h2><p>One of the most common compromises in regard to immutability is to segregate the application, or the services within the application, into mutable and immutable components. The immutable components perform their tasks in a purely functional way, without using any mutable variables. The immutable components communicate with one or more other components that are not purely functional, and allow for the state of variables to be mutated (Figure 6.1).</p><blockquote><p>一种常见方式是将应用程序，或者是应用程序的内部服务进行切分，划分为可变的和不可变的两种组件。不可变组件用纯函数的方式来执行任务，期间不更改任何状态。这些不可变的组件将通过与一个或多个非函数式组件通信的方式来修改变量状态（参见图 6.1）。</p></blockquote><p><Figures figure="6-1">Mutating state and transactional memory</Figures></p><p>Since mutating state exposes those components to all the problems of concurrency, it is common practice to use some kind of transactional memory to protect the mutable variables from concurrent updates and race conditions.</p><blockquote><p>由于状态的修改会导致一系列并发问题的产生，所以我们通常会采用某种事务型内存来保护可变变量，避免同步更新和竞争状态的发生。</p></blockquote><p>Transactional memory simply treats variables in memory the same way a database treats records on disk.1 It protects those variables with a transaction- or retry-based scheme.</p><blockquote><p>事务型内存基本上与数据库保护磁盘数据的方式 1 类似，通常釆用的是事务或者重试机制。</p></blockquote><p>A simple example of this approach is Clojure’s atom facility:</p><blockquote><p>下面我们可以用 Clojure 中的 atom 机制来写一个简单的例子：</p></blockquote><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">def</span> <span class="title">counter</span> (<span class="name"><span class="built_in">atom</span></span> <span class="number">0</span>)) <span class="comment">; initialize counter to 0</span></span><br><span class="line">(<span class="name"><span class="built_in">swap!</span></span> counter inc)    <span class="comment">; safely increment counter.</span></span><br></pre></td></tr></table></figure><p>In this code, the counter variable is defined as an atom. In Clojure, an atom is a special kind of variable whose value is allowed to mutate under very disciplined conditions that are enforced by the swap! function.</p><blockquote><p>在这段代码中，counter 变量被定义为 atom 类型。在 Clojure 中，atom 是一类特殊的变量，它被允许在 swap!函数定义的严格条件下进行更改。</p></blockquote><p>The swap! function, shown in the preceding code, takes two arguments: the atom to be mutated, and a function that computes the new value to be stored in the atom. In our example code, the counter atom will be changed to the value computed by the inc function, which simply increments its argument.</p><blockquote><p>至于 swap! 函数，如同上面代码所写，它需要两个参数：一个是被用来修改的 atom 类型实例，另一个是用来计算新值的函数。在上面的代码中，inc 函数会将参数加 1 并存入 counter 这个 atom 实例。</p></blockquote><p>The strategy used by swap! is a traditional compare and swap algorithm. The value of counter is read and passed to inc. When inc returns, the value of counter is locked and compared to the value that was passed to inc. If the value is the same, then the value returned by inc is stored in counter and the lock is released. Otherwise, the lock is released, and the strategy is retried from the beginning.</p><blockquote><p>在这里，swap!所采用的策略是传统的比较+替换算法。即先读取 counter 变量的值，再将其传入 inc 函数。然后当 inc 函数返回时，将原先用锁保护起来的 counter 值与传入 inc 时的值进行比较。如果两边的值一致，则将 inc 函数返回的值存入 counter，释放锁。否则，先释放锁，再从头进行重试。</p></blockquote><p>The atom facility is adequate for simple applications. Unfortunately, it cannot completely safeguard against concurrent updates and deadlocks when multiple dependent variables come into play. In those instances, more elaborate facilities can be used.</p><blockquote><p>当然，atom 这个机制只适用于上面这种简单的应用程序，它并不适用于解决由多个相关变量同时需要更改所引发的并发更新问题和死锁问题，要想解决这些问题，我们就需要用到更复杂的机制。</p></blockquote><p>The point is that well-structured applications will be segregated into those components that do not mutate variables and those that do. This kind of segregation is supported by the use of appropriate disciplines to protect those mutated variables.</p><blockquote><p>这里的要点是：一个架构设计良好的应用程序应该将状态修改的部分和不需要修改状态的部分隔离成单独的组件，然后用合适的机制来保护可变量。</p></blockquote><p>Architects would be wise to push as much processing as possible into the immutable components, and to drive as much code as possible out of those components that must allow mutation.</p><blockquote><p>软件架构师应该着力于将大部分处理逻辑都归于不可变组件中，可变状态组件的逻辑应该越少越好。</p></blockquote><h2 id="EVENT-SOURCING-事件溯源"><a href="#EVENT-SOURCING-事件溯源" class="headerlink" title="EVENT SOURCING 事件溯源"></a>EVENT SOURCING 事件溯源</h2><p>The limits of storage and processing power have been rapidly receding from view. Nowadays it is common for processors to execute billions of instructions per second and to have billions of bytes of RAM. The more memory we have, and the faster our machines are, the less we need mutable state.</p><blockquote><p>随着存储和处理能力的大幅进步，现在拥有每秒可以执行数十亿条指令的处理器，以及数十亿字节内存的计算机已经很常见了。而内存越大，处理速度越快，我们对可变状态的依赖就会越少。</p></blockquote><p>As a simple example, imagine a banking application that maintains the account balances of its customers. It mutates those balances when deposit and withdrawal transactions are executed.</p><blockquote><p>举个简单的例子，假设某个银行应用程序需要维护客户账户余额信息，当它放行存取款事务时，就要同时负责修改余额记录。</p></blockquote><p>Now imagine that instead of storing the account balances, we store only the transactions. Whenever anyone wants to know the balance of an account, we simply add up all the transactions for that account, from the beginning of time. This scheme requires no mutable variables.</p><blockquote><p>如果我们不保存具体账户余额，仅仅保存事务日志，那么当有人想查询账户余额时。我们就将全部交易记录取出，并且每次都得从最开始到当下进行累计。当然，这样的设计就不需要维护任何可变变量了。</p></blockquote><p>Obviously, this approach sounds absurd. Over time, the number of transactions would grow without bound, and the processing power required to compute the totals would become intolerable. To make this scheme work forever, we would need infinite storage and infinite processing power.</p><blockquote><p>但显而易见，这种实现是有些不合理的。因为随着时间的推移，事务的数目会无限制增长，每次处理总额所需要的处理能力很快就会变得不能接受。如果想使这种设计永远可行的话，我们将需要无限容量的存储，以及无限的处理能力。</p></blockquote><p>But perhaps we don’t have to make the scheme work forever. And perhaps we have enough storage and enough processing power to make the scheme work for the reasonable lifetime of the application.</p><blockquote><p>但是可能我们并不需要这个设计永远可行，而且可能在整个程序的生命周期内，我们有足够的存储和处理能力来满足它。</p></blockquote><p>This is the idea behind event sourcing.2 Event sourcing is a strategy wherein we store the transactions, but not the state. When state is required, we simply apply all the transactions from the beginning of time.</p><blockquote><p>这就是事件溯源，在这种体系下，我们只存储事务记录，不存储具体状态。当需要具体状态时，我们只要从头开始计算所有的事务即可。</p></blockquote><p>Of course, we can take shortcuts. For example, we can compute and save the state every midnight. Then, when the state information is required, we need compute only the transactions since midnight.</p><p>Now consider the data storage required for this scheme: We would need a lot of it. Realistically, offline data storage has been growing so fast that we now consider trillions of bytes to be small—so we have a lot of it.</p><blockquote><p>在存储方面，这种架构的确需要很大的存储容量。如今离线数据存储器的增长是非常快的，现在 1 TB 对我们来说也已经不算什么了。</p></blockquote><p>More importantly, nothing ever gets deleted or updated from such a data store. As a consequence, our applications are not CRUD; they are just CR. Also, because neither updates nor deletions occur in the data store, there cannot be any concurrent update issues.</p><blockquote><p>更重要的是，这种数据存储模式中不存在删除和更新的情况，我们的应用程序不是 CRUD，而是 CR。因为更新和删除这两种操作都不存在了，自然也就不存在并发问题。</p></blockquote><p>If we have enough storage and enough processor power, we can make our applications entirely immutable—and, therefore, entirely functional.</p><blockquote><p>如果我们有足够大的存储量和处理能力，应用程序就可以用完全不可变的、纯函数式的方式来编程。</p></blockquote><p>If this still sounds absurd, it might help if you remembered that this is precisely the way your source code control system works.</p><blockquote><p>如果读者还是觉得这听起来不太靠谱，可以想想我们现在用的源代码管理程序，它们正是用这种方式工作的！</p></blockquote><h2 id="CONCLUSION-本章小结-4"><a href="#CONCLUSION-本章小结-4" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>To summarize:</p><blockquote><p>下面我们来总结一下：</p></blockquote><ul><li>Structured programming is discipline imposed upon direct transfer of control.</li><li>Object-oriented programming is discipline imposed upon indirect transfer of control.</li><li>Functional programming is discipline imposed upon variable assignment.</li></ul><hr><blockquote><ul><li>结构化编程是多对程序控制权的直接转移的限制。</li><li>面向对象编程是对程序控制权的间接转移的限制。</li><li>函数式编程是对程序中赋值操作的限制。</li></ul></blockquote><p>Each of these three paradigms has taken something away from us. Each restricts some aspect of the way we write code. None of them has added to our power or our capabilities.</p><blockquote><p>这三个编程范式都对程序员提出了新的限制。每个范式都约束了某种编写代码的方式，没有一个编程范式是在增加新能力。</p></blockquote><p>What we have learned over the last half-century is what not to do.</p><blockquote><p>也就是说，我们过去 50 年学到的东西主要是——什么不应该做。</p></blockquote><p>With that realization, we have to face an unwelcome fact: Software is not a rapidly advancing technology. The rules of software are the same today as they were in 1946, when Alan Turing wrote the very first code that would execute in an electronic computer. The tools have changed, and the hardware has changed, but the essence of software remains the same.</p><blockquote><p>我们必须面对这种不友好的现实：软件构建并不是一个迅速前进的技术。今天构建软件的规则和 1946 年阿兰·图灵写下电子计算机的第一行代码时是一样的。尽管工具变化了，硬件变化了，但是软件编程的核心没有变。</p></blockquote><p>Software—the stuff of computer programs—is composed of sequence, selection, iteration, and indirection. Nothing more. Nothing less.</p><blockquote><p>总而言之，软件，或者说计算机程序无一例外是由顺序结构、分支结构、循环结构和间接转移这几种行为组合而成的，无可增加，也缺一不可。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Part3-DESIGN-PRINCIPLES-设计原则"><a href="#Part3-DESIGN-PRINCIPLES-设计原则" class="headerlink" title="Part3. DESIGN PRINCIPLES 设计原则"></a>Part3. DESIGN PRINCIPLES 设计原则</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/PA-UN03.jpg"></p><p>Good software systems begin with clean code. On the one hand, if the bricks aren’t well made, the architecture of the building doesn’t matter much. On the other hand, you can make a substantial mess with well-made bricks. This is where the SOLID principles come in.</p><blockquote><p>通常来说，要想构建一个好的软件系统，应该从写整洁的代码开始做起。毕竟，如果建筑所使用的砖头质量不佳，那么架构所能起到的作用也会很有限。反之亦然，如果建筑的架构设计不佳，那么其所用的砖头质量再好也没有用。这就是 SOLID 设计原则所要解决的问题。</p></blockquote><p>The SOLID principles tell us how to arrange our functions and data structures into classes, and how those classes should be interconnected. The use of the word “class” does not imply that these principles are applicable only to object-oriented software. A class is simply a coupled grouping of functions and data. Every software system has such groupings, whether they are called classes or not. The SOLID principles apply to those groupings.</p><blockquote><p>SOLID 原则的主要作用就是告诉我们如何将数据和函数组织成为类，以及如将这些类链接起来成为程序。请注意，这里虽然用到了 “类”这个词，但是并不意味着我们将要讨论的这些设计原则仅仅适用于面向对象编程。这里的类仅仅代表一种数据和函数的分组，每个软件系统都会有自己的分类系统，不管它们各自是不是将其称为“类”，事实上都是 SOLID 原则的适用领域。</p></blockquote><p>The goal of the principles is the creation of mid-level software structures that:</p><blockquote><p>一般情况下，我们为软件构建中层结构的主要目标如下：</p></blockquote><ul><li>Tolerate change,</li><li>Are easy to understand, and</li><li>Are the basis of components that can be used in many software systems.</li></ul><hr><blockquote><ul><li>使软件可容忍被改动。</li><li>使软件更容易被理解。</li><li>构建可在多个软件系统中复用的组件。</li></ul></blockquote><p>The term “mid-level” refers to the fact that these principles are applied by programmers working at the module level. They are applied just above the level of the code and help to define the kinds of software structures used within modules and components.</p><blockquote><p>我们在这里之所以会使用“中层”这个词，是因为这些设计原则主要适用于那些进行模块级编程的程序员。SOLID 原则应该直接紧贴于具体的代码逻辑之上，这些原则是用来帮助我们定义软件架构中的组件和模块的。</p></blockquote><p>Just as it is possible to create a substantial mess with well-made bricks, so it is also possible to create a system-wide mess with well-designed mid-level components. For this reason, once we have covered the SOLID principles, we will move on to their counterparts in the component world, and then to the principles of high-level architecture.</p><blockquote><p>当然了，正如用好砖也会盖歪楼一样，采用设计良好的中层组件并不能保证系统的整体架构运作良好。正因为如此，我们在讲完 SOLID 原则之后，还会再继续针对组件的设计原则进行更进一步的讨论，将其推进到高级软件架构部分。</p></blockquote><p>The history of the SOLID principles is long. I began to assemble them in the late 1980s while debating software design principles with others on USENET (an early kind of Facebook). Over the years, the principles have shifted and changed. Some were deleted. Others were merged. Still others were added. The final grouping stabilized in the early 2000s, although I presented them in a different order.</p><blockquote><p>SOLID 原则的历史已经很悠久了，早在 20 世纪 80 年代末期，我在 USENET 新闻组 （该新闻组在当时就相当于今天的 Facebook）上和其他人辩论软件设计理念的时候，该设计原则就已经开始逐渐成型了。随着时间的推移，其中有一些原则得到了修改，有一些则被抛弃了，还有一些被合并了，另外也增加了一些。它们的最终形态是在 2000 年左右形成的，只不过当时采用的是另外一个展现顺序。</p></blockquote><p>In 2004 or thereabouts, Michael Feathers sent me an email saying that if I rearranged the principles, their first words would spell the word SOLID—and thus the SOLID principles were born.</p><blockquote><p>2004 年前后，Michael Feathers 的一封电子邮件提醒我：如果重新排列这些设计原则，那么它们的首字母可以排列成 SOLID——这就是 SOLID 原则诞生的故事。</p></blockquote><p>The chapters that follow describe each principle more thoroughly. Here is the executive summary:</p><blockquote><p>在这一部分中，我们会逐章地详细讨论每个设计原则，下面先来做一个简单摘要。</p></blockquote><ul><li>SRP: The Single Responsibility Principle<br>An active corollary to Conway’s law: The best structure for a software system is heavily influenced by the social structure of the organization that uses it so that each software module has one, and only one, reason to change.</li><li>OCP: The Open-Closed Principle<br>Bertrand Meyer made this principle famous in the 1980s. The gist is that for software systems to be easy to change, they must be designed to allow the behavior of those systems to be changed by adding new code, rather than changing existing code.</li><li>LSP: The Liskov Substitution Principle<br>Barbara Liskov’s famous definition of subtypes, from 1988. In short, this principle says that to build software systems from interchangeable parts, those parts must adhere to a contract that allows those parts to be substituted one for another.</li><li>ISP: The Interface Segregation Principle<br>This principle advises software designers to avoid depending on things that they don’t use.</li><li>DIP: The Dependency Inversion Principle<br>The code that implements high-level policy should not depend on the code that implements low-level details. Rather, details should depend on policies.</li></ul><hr><blockquote><ul><li>SRP：单一职责原则。<br>该设计原则是某于康威圧律（Conway’s Law）的一个推论——一个软件系统的最佳结构高度依赖于开发这个系统的组织的内部结构。这样，每个软件模块都有且只有一个需要被改变的理由。</li><li>OCP：开闭原则。<br>该设计原则是由 Bertrand Meyer 在 20 世纪 80 年代大力推广的，其核心要素是：如果软件系统想要更容易被改变，那么其设计就必须允许新增代码来修改系统行为，而非只能靠修改原来的代码。</li><li>LSP：里氏替换原则。<br>该设计原则是 Barbara Liskov 在 1988 年提出的一个著名的子类型定义。简单来说，这项原则的意思是如果想用可替换的组件来构建软件系统，那么这些组件就必须遵守同一个约定，以便让这些组件可以相互替换。</li><li>ISP：接口隔离原则。<br>这项设计原则主要告诫软件设计师应该在设计中避免不必要的依赖。</li><li>DIP：依赖反转原则。<br>该设计原则指出高层策略性的代码不应该依赖实现底层细节的代码，恰恰相反，那些实现底层细节的代码应该依赖高层策略性的代码。</li></ul></blockquote><p>These principles have been described in detail in many different publications1 over the years. The chapters that follow will focus on the architectural implications of these principles instead of repeating those detailed discussions. If you are not already familiar with these principles, what follows is insufficient to understand them in detail and you would be well advised to study them in the footnoted documents.</p><blockquote><p>这些年来，这些设计原则在很多不同的出版物中都有过详细描述。在接下来的章节中，我们将会主要关注这些原则在软件架构上的意义，而不再重复其细节信息。如果你对这些原则并不是特别了解，那么我建议你先通过脚注中的文档熟悉一下它们，否则接下来的章节可能有点难以理解。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap7-SRP-THE-SINGLE-RESPONSIBILITY-PRINCIPLE-SRP：单一职责原则"><a href="#Chap7-SRP-THE-SINGLE-RESPONSIBILITY-PRINCIPLE-SRP：单一职责原则" class="headerlink" title="Chap7. SRP: THE SINGLE RESPONSIBILITY PRINCIPLE SRP：单一职责原则"></a>Chap7. SRP: THE SINGLE RESPONSIBILITY PRINCIPLE SRP：单一职责原则</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN07.jpg"></p><p>Of all the SOLID principles, the Single Responsibility Principle (SRP) might be the least well understood. That’s likely because it has a particularly inappropriate name. It is too easy for programmers to hear the name and then assume that it means that every module should do just one thing.</p><blockquote><p>SRP 是 SOLID 五大设计原则中最容易被误解的一个。也许是名字的原因，很多程序员根据 SRP 这个名字想当然地认为这个原则就是指：每个模块都应该只做一件事。</p></blockquote><p>Make no mistake, there is a principle like that. A function should do one, and only one, thing. We use that principle when we are refactoring large functions into smaller functions; we use it at the lowest levels. But it is not one of the SOLID principles—it is not the SRP.</p><blockquote><p>没错，后者的确也是一个设订原则，即确保一个函数只完成一个功能。我们在将大型函数亜构成小函数时经常会用到这个原则，但这只是一个面向底层实现细节的设计原则，并不是 SRP 的全部。</p></blockquote><p>Historically, the SRP has been described this way:</p><blockquote><p>在历史上，我们曾经这样描述 SRP 这一设计原则：</p></blockquote><p>A module should have one, and only one, reason to change.</p><blockquote><p>任何一个软件模块都应该有且仅有一个被修改的原因。</p></blockquote><p>Software systems are changed to satisfy users and stakeholders; those users and stakeholders are the “reason to change” that the principle is talking about. Indeed, we can rephrase the principle to say this:</p><blockquote><p>在现实环境中，软件系统为了满足用户和所有者的要求，必然要经常做出这样那样的修改。而该系统的用户或者所有者就是该设计原则中所指的“被修改的原因”。所以，我们也可以这样描述 SRP：</p></blockquote><p>A module should be responsible to one, and only one, user or stakeholder.</p><blockquote><p>任何一个软件模块都应该只对一个用户（User）或系统利益相关者（Stakeholder）负责。</p></blockquote><p>Unfortunately, the words “user” and “stakeholder” aren’t really the right words to use here. There will likely be more than one user or stakeholder who wants the system changed in the same way. Instead, we’re really referring to a group—one or more people who require that change. We’ll refer to that group as an actor.</p><blockquote><p>不过，这里的“用户”和 “系统利益相关者”在用词上也并不完全准确，它们很有可能指的是一个或多个用户和利益相关者，只要这些人希望对系统进行的变更是相似的，就可以归为一类——一个或多个有共同需求的人。在这里，我们将其称为行为者（actor）。</p></blockquote><p>Thus the final version of the SRP is:</p><blockquote><p>所以，对于 SRP 的最终描述就变成了：</p></blockquote><p>A module should be responsible to one, and only one, actor.</p><blockquote><p>任何一个软件模块都应该只对某一类行为者负责。</p></blockquote><p>Now, what do we mean by the word “module”? The simplest definition is just a source file. Most of the time that definition works fine. Some languages and development environments, though, don’t use source files to contain their code. In those cases a module is just a cohesive set of functions and data structures.</p><blockquote><p>那么，上文中提到的“软件模块”究竟又是在指什么呢？大部分情况下，其最简单的定义就是指一个源代码文件。然而，有些编程语言和编程环境并不是用源代码文件来存储程序的。在这些情况下，“软件模块”指的就是一组紧密相关的函数和数据结构。</p></blockquote><p>That word “cohesive” implies the SRP. Cohesion is the force that binds together the code responsible to a single actor.</p><blockquote><p>在这里，“相关”这个词实际上就隐含了 SRP 这一原则。代码与数据就是靠着与某一类行为者的相关性被组合在一起的。</p></blockquote><p>Perhaps the best way to understand this principle is by looking at the symptoms of violating it.</p><blockquote><p>或许，理解这个设计原则最好的办法就是计大家来看一些反面案例。</p></blockquote><h2 id="SYMPTOM-1-ACCIDENTAL-DUPLICATION-反面案例-1：重复的假象"><a href="#SYMPTOM-1-ACCIDENTAL-DUPLICATION-反面案例-1：重复的假象" class="headerlink" title="SYMPTOM 1: ACCIDENTAL DUPLICATION 反面案例 1：重复的假象"></a>SYMPTOM 1: ACCIDENTAL DUPLICATION 反面案例 1：重复的假象</h2><p>My favorite example is the Employee class from a payroll application. It has three methods: calculatePay(), reportHours(), and save() (Figure 7.1).</p><blockquote><p>这是我最喜欢举的一个例子：某个工资管理程序中的 Employee 类有三个函数 calculatePay()、reportHours() 和 save()（见图 7.1）。</p></blockquote><p><Figures figure="7-1">The Employee class</Figures></p><p>This class violates the SRP because those three methods are responsible to three very different actors.</p><blockquote><p>如你所见，这个类的三个函数分别对应的是三类非常不同的行为者，违反了 SRP 设计原则。</p></blockquote><ul><li>The calculatePay() method is specified by the accounting department, which reports to the CFO.</li><li>The reportHours() method is specified and used by the human resources department, which reports to the COO.</li><li>The save() method is specified by the database administrators (DBAs), who report to the CTO.</li></ul><hr><blockquote><ul><li>calculatePay() 函数是由财务部门制定的，他们负责向 CFO 汇报。</li><li>reportHours() 函数是由人力资源部门制定并使用的，他们负责向 COO 汇报。</li><li>save() 函数是由 DBA 制定的，他们负责向 CTO 汇报。</li></ul></blockquote><p>By putting the source code for these three methods into a single Employee class, the developers have coupled each of these actors to the others. This coupling can cause the actions of the CFO’s team to affect something that the COO’s team depends on.</p><blockquote><p>这三个函数被放在同一个源代码文件，即同一个 Employee 类中，程序员这样 做实际上就等于使三类行为者的行为耦合在了一起，这有可能会导致 CFO 团队的命令影响到 C 00 团队所依赖的功能。</p></blockquote><p>For example, suppose that the calculatePay() function and the reportHours() function share a common algorithm for calculating non-overtime hours. Suppose also that the developers, who are careful not to duplicate code, put that algorithm into a function named regularHours() (Figure 7.2).</p><blockquote><p>例如，calculatePay() 函数和 reportHours() 函数使用同样的逻辑来计算正常工作时数。程序员为了避免重复编码，通常会将该算法单独实现为一个名为 regularHours() 的函数（见图 7.2）。</p></blockquote><p><Figures figure="7-2">Shared algorithm</Figures></p><p>Now suppose that the CFO’s team decides that the way non-overtime hours are calculated needs to be tweaked. In contrast, the COO’s team in HR does not want that particular tweak because they use non-overtime hours for a different purpose.</p><blockquote><p>接下来，假设 CFO 团队需要修改正常工作时数的计算方法，而 COO 带领的 HR 团队不需要这个修改，因为他们对数据的用法是不同的。</p></blockquote><p>A developer is tasked to make the change, and sees the convenient regularHours() function called by the calculatePay() method. Unfortunately, that developer does not notice that the function is also called by the reportHours() function.</p><blockquote><p>这时候，负责这项修改的程序员会注意到 calculatePay() 函数调用了 regularHours() 函数，但可能不会注意到该函数会同时被 reportHours() 调用。</p></blockquote><p>The developer makes the required change and carefully tests it. The CFO’s team validates that the new function works as desired, and the system is deployed.</p><blockquote><p>于是，该程序员就这样按照要求进行了修改，同时 CFO 团队的成员验证了新算法工作正常。这项修改最终被成功部署上线了。</p></blockquote><p>Of course, the COO’s team doesn’t know that this is happening. The HR personnel continue to use the reports generated by the reportHours() function—but now they contain incorrect numbers. Eventually the problem is discovered, and the COO is livid because the bad data has cost his budget millions of dollars.</p><blockquote><p>但是，COO 团队显然完全不知道这些事情的发生，HR 仍然在使用 reportHours() 产生的报表，随后就会发现他们的数据出错了！最终这个问题让 COO 十分愤怒，因为这些错误的数据给公司造成了几百万美元的损失。</p></blockquote><p>We’ve all seen things like this happen. These problems occur because we put code that different actors depend on into close proximity. The SRP says to separate the code that different actors depend on.</p><blockquote><p>与此类似的事情我们肯定多多少少都经历过。这类问题发生的根源就是因为我们将不同行为者所依赖的代码强凑到了一起。对此，SRP 强调这类代码一定要被分开。</p></blockquote><h2 id="SYMPTOM-2-MERGES-反面案例-2：代码合井"><a href="#SYMPTOM-2-MERGES-反面案例-2：代码合井" class="headerlink" title="SYMPTOM 2: MERGES 反面案例 2：代码合井"></a>SYMPTOM 2: MERGES 反面案例 2：代码合井</h2><p>It’s not hard to imagine that merges will be common in source files that contain many different methods. This situation is especially likely if those methods are responsible to different actors.</p><blockquote><p>一个拥有很多函数的源代码文件必然会经历很多次代码合并，该文件中的这些函数分别服务不同行为者的情况就更常见了。</p></blockquote><p>For example, suppose that the CTO’s team of DBAs decides that there should be a simple schema change to the Employee table of the database. Suppose also that the COO’s team of HR clerks decides that they need a change in the format of the hours report.</p><blockquote><p>例如，CTO 团队的 DBA 决定要对 Employee 数据库表结构进行简单修改。与此同时，COO 团队的 HR 需要修改工作时数报表的格式。</p></blockquote><p>Two different developers, possibly from two different teams, check out the Employee class and begin to make changes. Unfortunately their changes collide. The result is a merge.</p><blockquote><p>这样一来，就很可能出现两个来自不同团队的程序员分别对 Employee 类进行 修改的情况。不出意外的话，他们各自的修改一定会互相冲突，这就必须要进行代码合并。</p></blockquote><p>I probably don’t need to tell you that merges are risky affairs. Our tools are pretty good nowadays, but no tool can deal with every merge case. In the end, there is always risk.</p><p>In our example, the merge puts both the CTO and the COO at risk. It’s not inconceivable that the CFO could be affected as well.</p><blockquote><p>在这个例子中，这次代码合并不仅有可能让 CTO 和 COO 要求的功能出错，甚至连 CFO 原本正常的功能也可能收到影响。</p></blockquote><p>There are many other symptoms that we could investigate, but they all involve multiple people changing the same source file for different reasons.</p><blockquote><p>事实上，这样的案例还有很多，我们就不一一列举了。它们的一个共同点是，多人为了不同的目的修改了同一份源代码，这很容易造成问题的产生。</p></blockquote><p>Once again, the way to avoid this problem is to separate code that supports different actors.</p><blockquote><p>而避免这种问题产生的方法就是将服务不同行为者的代码进行切分。</p></blockquote><h2 id="SOLUTIONS-解决方案"><a href="#SOLUTIONS-解决方案" class="headerlink" title="SOLUTIONS 解决方案"></a>SOLUTIONS 解决方案</h2><p>There are many different solutions to this problem. Each moves the functions into different classes.</p><blockquote><p>我们有很多不同的方法可以用来解决上面的问题，每一种方法都需要将相关的函数划分成不同的类。</p></blockquote><p>Perhaps the most obvious way to solve the problem is to separate the data from the functions. The three classes share access to EmployeeData, which is a simple data structure with no methods (Figure 7.3). Each class holds only the source code necessary for its particular function. The three classes are not allowed to know about each other. Thus any accidental duplication is avoided.</p><blockquote><p>其中，最简单直接的办法是将数据与函数分离，设计三个类共同使用一个不包括函数的、十分简单的 EmployeeData 类（见图 7.3），每个类只包含与之相关的函数代码，互相不可见，这样就不存在互相依赖的情况了。</p></blockquote><p><Figures figure="7-3">The three classes do not know about each other</Figures></p><p>The downside of this solution is that the developers now have three classes that they have to instantiate and track. A common solution to this dilemma is to use the Facade pattern (Figure 7.4).</p><blockquote><p>这种解决方案的坏处在于：程序员现在需要在程序里处理三个类。另一种解决办法是使用 Facade 设计模式（见图 7.4）。</p></blockquote><p><Figures figure="7-4">The Facade pattern</Figures></p><p>The EmployeeFacade contains very little code. It is responsible for instantiating and delegating to the classes with the functions.</p><blockquote><p>这样一来，EmployeeFacade 类所需要的代码量就很少了，它仅仅包含了初始化和调用三个具体实现类的函数。</p></blockquote><p>Some developers prefer to keep the most important business rules closer to the data. This can be done by keeping the most important method in the original Employee class and then using that class as a Facade for the lesser functions (Figure 7.5).</p><blockquote><p>当然，也有些程序员更倾向于把最重要的业务逻辑与数据放在一起，那么我们也可以选择将最重要的函数保留在 Employee 类中，同时用这个类来调用其他没那么重要的函数（见图 7.5）。</p></blockquote><p><Figures figure="7-5">The most important method is kept in the original Employee class and used as a Facade for the lesser functions</Figures></p><p>You might object to these solutions on the basis that every class would contain just one function. This is hardly the case. The number of functions required to calculate pay, generate a report, or save the data is likely to be large in each case. Each of those classes would have many private methods in them.</p><blockquote><p>读者也许会反对上面这些解决方案，因为看上去这里的每个类中都只有一个函数。事实上并非如此，因为无论是计算工资、生成报表还是保存数据都是一个很复杂的过程，每个类都可能包含了许多私有函数。</p></blockquote><p>Each of the classes that contain such a family of methods is a scope. Outside of that scope, no one knows that the private members of the family exist.</p><blockquote><p>总而言之，上面的每一个类都分别容纳了一组作用于相同作用域的函数，而在该作用域之外，它们各自的私有函数是互相不可见的。</p></blockquote><h2 id="CONCLUSION-本章小结-5"><a href="#CONCLUSION-本章小结-5" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>The Single Responsibility Principle is about functions and classes—but it reappears in a different form at two more levels. At the level of components, it becomes the Common Closure Principle. At the architectural level, it becomes the Axis of Change responsible for the creation of Architectural Boundaries. We’ll be studying all of these ideas in the chapters to come.</p><blockquote><p>单一职责原则主要讨论的是函数和类之间的关系——但是它在两个讨论层面上会以不同的形式出现。在组件层面，我们可以将其称为共同闭包原则（Common Closure Principle)，在软件架构层面，它则是用于奠定架构边界的变更轴心（Axis of Change）。我们在接下来的章节中会深入学习这些原则。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap8-OCP-THE-OPEN-CLOSED-PRINCIPLE-OCP：开闭原则"><a href="#Chap8-OCP-THE-OPEN-CLOSED-PRINCIPLE-OCP：开闭原则" class="headerlink" title="Chap8. OCP: THE OPEN-CLOSED PRINCIPLE OCP：开闭原则"></a>Chap8. OCP: THE OPEN-CLOSED PRINCIPLE OCP：开闭原则</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN08.jpg"></p><p>The Open-Closed Principle (OCP) was coined in 1988 by Bertrand Meyer.1 It says:</p><blockquote><p>开闭原则（OCP）是 Bertrand Meyer 在 1988 年提出的，该设计原则认为：</p></blockquote><p>A software artifact should be open for extension but closed for modification.</p><blockquote><p>设计良好的计算机软件应该易于扩展，同时抗拒修改。</p></blockquote><p>In other words, the behavior of a software artifact ought to be extendible, without having to modify that artifact.</p><blockquote><p>换句话说，一个设计良好的计算机系统应该在不需要修改的前提下就可以轻易被扩展。</p></blockquote><p>This, of course, is the most fundamental reason that we study software architecture. Clearly, if simple extensions to the requirements force massive changes to the software, then the architects of that software system have engaged in a spectacular failure.</p><blockquote><p>其实这也是我们研究软件架构的根本目的。如果对原始需求的小小延伸就需要对原有的软件系统进行大幅修改，那么这个系统的架构设计显然是失败的。</p></blockquote><p>Most students of software design recognize the OCP as a principle that guides them in the design of classes and modules. But the principle takes on even greater significance when we consider the level of architectural components.</p><blockquote><p>尽管大部分软件设计师都已经认可了 OCP 是设计类与模块时的重要原则，但是在软件架构层面，这项原则的意义则更为重大。</p></blockquote><p>A thought experiment will make this clear.</p><blockquote><p>下面，让我们用一个思想实验来做一些说明。</p></blockquote><h2 id="A-THOUGHT-EXPERIMENT-思想实验"><a href="#A-THOUGHT-EXPERIMENT-思想实验" class="headerlink" title="A THOUGHT EXPERIMENT 思想实验"></a>A THOUGHT EXPERIMENT 思想实验</h2><p>Imagine, for a moment, that we have a system that displays a financial summary on a web page. The data on the page is scrollable, and negative numbers are rendered in red.</p><blockquote><p>假设我们现在要设计一个在 Web 页面上展示财务数据的系统，页面上的数据要可以滚动显示，其中负值应显示为红色。</p></blockquote><p>Now imagine that the stakeholders ask that this same information be turned into a report to be printed on a black-and-white printer. The report should be properly paginated, with appropriate page headers, page footers, and column labels. Negative numbers should be surrounded by parentheses.</p><blockquote><p>接下来，该系统的所有者又要求同样的数据需要形成一个报表，该报表要能用黑白打印机打印，并且其报表格式要得到合理分页，每页都要包含页头、页尾及栏目名。同时，负值应该以括号表示。</p></blockquote><p>Clearly, some new code must be written. But how much old code will have to change?</p><blockquote><p>显然，我们需要增加一些代码来完成这个要求。但在这里我们更关注的问题是，满足新的要求需要更改多少旧代码。</p></blockquote><p>A good software architecture would reduce the amount of changed code to the barest minimum. Ideally, zero.</p><blockquote><p>一个好的软件架构设计师会努力将旧代码的修改需求量降至最小，甚至为 0。</p></blockquote><p>How? By properly separating the things that change for different reasons (the Single Responsibility Principle), and then organizing the dependencies between those things properly (the Dependency Inversion Principle).</p><blockquote><p>但该如何实现这一点呢？我们可以先将满足不同需求的代码分组（即 SRP），然后再来调整这些分组之间的依赖关系（即 DIP）。</p></blockquote><p>By applying the SRP, we might come up with the data-flow view shown in Figure 8.1. Some analysis procedure inspects the financial data and produces reportable data, which is then formatted appropriately by the two reporter processes.</p><blockquote><p>利用 SRP，我们可以按图 8.1 中所展示的方式来处理数据流。即先用一段分析程序处理原始的财务数据，以形成报表的数据结构，最后再用两个不同的报表生成器来产生报表。</p></blockquote><p><Figures figure="8-1">Applying the SRP</Figures></p><p>The essential insight here is that generating the report involves two separate responsibilities: the calculation of the reported data, and the presentation of that data into a web- and printer-friendly form.</p><blockquote><p>这里的核心就是将应用生成报表的过程拆成两个不同的操作。即先计算出报表数据，再生成具体的展示报表（分别以网页及纸质的形式展示）。</p></blockquote><p>Having made this separation, we need to organize the source code dependencies to ensure that changes to one of those responsibilities do not cause changes in the other. Also, the new organization should ensure that the behavior can be extended without undo modification.</p><blockquote><p>接下来，我们就该修改其源代码之间的依赖关系了。这样做的目的是保证其中一个操作被修改之后不会影响到另外一个操作。同时，我们所构建的新的组织形式应该保证该程序后续在行为上的扩展都无须修改现有代码。</p></blockquote><p>We accomplish this by partitioning the processes into classes, and separating those classes into components, as shown by the double lines in the diagram in Figure 8.2. In this figure, the component at the upper left is the Controller. At the upper right, we have the Interactor. At the lower right, there is the Database. Finally, at the lower left, there are four components that represent the Presenters and the Views.</p><blockquote><p>在具体实现上，我们会将整个程序进程划分成一系列的类，然后再将这些类分割成不同的组件。下面，我们用图 8.2 中的那些双线框来具体描述一下整个实现。在这个图中，左上角的组件是 Controller，右上角是 Interactor，右下角是 Database，左下角则有四个组件分别用于代表不同的 Presenter 和 View。</p></blockquote><p><Figures figure="8-2">Partitioning the processes into classes and separating the classes into components</Figures></p><p>Classes marked with <code>&lt;I&gt;</code> are interfaces; those marked with <code>&lt;DS&gt;</code> are data structures. Open arrowheads are using relationships. Closed arrowheads are implements or inheritance relationships.</p><blockquote><p>在图 8.2 中，用 <code>&lt;I&gt;</code> 标记的类代表接口，用 <code>&lt;DS&gt;</code> 标记的则代表数据结构；开放箭头指代的是使用关系，闭合箭头则指代了实现与继承关系。</p></blockquote><p>The first thing to notice is that all the dependencies are source code dependencies. An arrow pointing from class A to class B means that the source code of class A mentions the name of class B, but class B mentions nothing about class A. Thus, in Figure 8.2, FinancialDataMapper knows about FinancialDataGateway through an implements relationship, but FinancialDataGateway knows nothing at all about FinancialDataMapper.</p><blockquote><p>首先，我们在图 8.2 中看到的所有依赖关系都是其源代码中存在的依赖关系。这里，从类 A 指向类 B 的箭头意味着 A 的源代码中涉及了 B，但 是 B 的源代码中并不涉及 A。因此在图 8.2 中，FinancialDataMapper 在实现接口时需要知道 FinancialDataGateway 的实现，而 FinancialDataGateway 则完全知道 FinancialDataMapper 的实现。</p></blockquote><p>The next thing to notice is that each double line is crossed in one direction only. This means that all component relationships are unidirectional, as shown in the component graph in Figure 8.3. These arrows point toward the components that we want to protect from change.</p><blockquote><p>其次，这里很重要的一点是这些双线框的边界都是单向跨越的。也就是说，上图中所有组件之间的关系都是单向依赖的，如图 8.3 所示，图中的箭头都指向那些我们不想经常更改的组件。</p></blockquote><p><Figures figure="8-3">The component relationships are unidirectional</Figures></p><p>Let me say that again: If component A should be protected from changes in component B, then component B should depend on component A.</p><blockquote><p>让我们再来复述一下这里的设计原则：如果 A 组件不想被 B 组件上发生的修改所影响，那么就应该让 B 组件依赖于 A 组件。</p></blockquote><p>We want to protect the Controller from changes in the Presenters. We want to protect the Presenters from changes in the Views. We want to protect the Interactor from changes in—well, anything.</p><blockquote><p>所以现在的情况是，我们不想让发生在 Presenter 上的修改影响到 Controller，也不想让发生在 View 上的修改影响到 Presenter。而最关键的是，我们不想让任何修改影响到 Interactor。</p></blockquote><p>The Interactor is in the position that best conforms to the OCP. Changes to the Database, or the Controller, or the Presenters, or the Views, will have no impact on the Interactor.</p><blockquote><p>其中，Interactor 组件是整个系统中最符合 OCP 的。发生在 Database、Controller、Presenter 甚至 View 上的修改都不会影响到 Interactor。</p></blockquote><p>Why should the Interactor hold such a privileged position? Because it contains the business rules. The Interactor contains the highest-level policies of the application. All the other components are dealing with peripheral concerns. The Interactor deals with the central concern.</p><blockquote><p>为什么 Interactor 会被放在这么重要的位置上呢？因为它是该程序的业务逻辑所在之处，Interactor 中包含了其最高层次的应用策略。其他组件都只是负责处理周边的辅助逻辑，只有 Interactor 才是核心组件。</p></blockquote><p>Even though the Controller is peripheral to the Interactor, it is nevertheless central to the Presenters and Views. And while the Presenters might be peripheral to the Controller, they are central to the Views.</p><blockquote><p>虽然 Controller 组件只是 Interactor 的附属品，但它却是 Presenter 和 View 所服务的核心。同样的，虽然 Presenter 组件是 Controller 的附属品，但它却是 View 所服务的核心。</p></blockquote><p>Notice how this creates a hierarchy of protection based on the notion of “level.” Interactors are the highest-level concept, so they are the most protected. Views are among the lowest-level concepts, so they are the least protected. Presenters are higher level than Views, but lower level than the Controller or the Interactor.</p><blockquote><p>另外需要注意的是，这里利用“层级”这个概念创造了一系列不同的保护层级。譬如，Interactor 是最高层的抽象，所以它被保护得最严密，而 Presenter 比 View 时层级高，但比 Controller 和 Interactor 的层级低。</p></blockquote><p>This is how the OCP works at the architectural level. Architects separate functionality based on how, why, and when it changes, and then organize that separated functionality into a hierarchy of components. Higher-level components in that hierarchy are protected from the changes made to lower-level components.</p><blockquote><p>以上就是我们在软件架构层次上对 OCP 这一设计原则的应用。软件架构师可以根据相关函数被修改的原因、修改的方式及修改的时间来对其进行分组隔离，并将这些互相隔离的函数分组整理成组件结构，使得高阶组件不会因低阶组件被修改而受到影响。</p></blockquote><h2 id="DIRECTIONAL-CONTROL-依赖方向的控制"><a href="#DIRECTIONAL-CONTROL-依赖方向的控制" class="headerlink" title="DIRECTIONAL CONTROL 依赖方向的控制"></a>DIRECTIONAL CONTROL 依赖方向的控制</h2><p>If you recoiled in horror from the class design shown earlier, look again. Much of the complexity in that diagram was intended to make sure that the dependencies between the components pointed in the correct direction.</p><blockquote><p>如果刚刚的类设计把你吓着了，别害怕！你刚刚在图表中所看到的复杂度是我们想要对组件之间的依赖方向进行控制而产生的。</p></blockquote><p>For example, the FinancialDataGateway interface between the FinancialReportGenerator and the FinancialDataMapper exists to invert the dependency that would otherwise have pointed from the Interactor component to the Database component. The same is true of the FinancialReportPresenter interface, and the two View interfaces.</p><blockquote><p>例如，FinanciaIReportGenerator 和 FinancialDataMapper 之间的 Financial Da taGateway 接口是为了反转 Interactor 与 Database 之间的依赖关系而产生的。同样的，FinancialReportPresenter 接口与两个 View 接口之间也类似于这种情况。</p></blockquote><h2 id="INFORMATION-HIDING-信息隐藏"><a href="#INFORMATION-HIDING-信息隐藏" class="headerlink" title="INFORMATION HIDING 信息隐藏"></a>INFORMATION HIDING 信息隐藏</h2><p>The FinancialReportRequester interface serves a different purpose. It is there to protect the FinancialReportController from knowing too much about the internals of the Interactor. If that interface were not there, then the Controller would have transitive dependencies on the FinancialEntities.</p><blockquote><p>当然，FinancialReportRequester 接口的作用则完全不同，它的作用是保护 FinancialReportController 不过度依赖于 Interactor 的内部细节。如果没有这个接口，则 Controller 将会传递性地依赖于 FinancialEntities。</p></blockquote><p>Transitive dependencies are a violation of the general principle that software entities should not depend on things they don’t directly use. We’ll encounter that principle again when we talk about the Interface Segregation Principle and the Common Reuse Principle.</p><blockquote><p>这种传递性依赖违反了“软件系统不应该依赖其不直接使用的组件”这一基本原则。之后，我们会在讨论接口隔离原则和共同复用原则的时候再次提到这一点。</p></blockquote><p>So, even though our first priority is to protect the Interactor from changes to the Controller, we also want to protect the Controller from changes to the Interactor by hiding the internals of the Interactor.</p><blockquote><p>所以，虽然我们的首要目的是为了让 Interactor 屏蔽掉发生在 Controller 上的修改，但也需要通过隐藏 Interactor 内部细节的方法来让其屏蔽掉来自 Controller 的依赖。</p></blockquote><h2 id="CONCLUSION-本章小结-6"><a href="#CONCLUSION-本章小结-6" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>The OCP is one of the driving forces behind the architecture of systems. The goal is to make the system easy to extend without incurring a high impact of change. This goal is accomplished by partitioning the system into components, and arranging those components into a dependency hierarchy that protects higher-level components from changes in lower-level components.</p><blockquote><p>OCP 是我们进行系统架构设计的主导原则，其主要目标是让系统易于扩展，同时限制其每次被修改所影响的范围。实现方式是通过将系统划分为一系列组件，并且将这些组件间的依赖关系按层次结构进行组织，使得高阶组件不会因低阶组件被修改而受到影响。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap9-LSP-THE-LISKOV-SUBSTITUTION-PRINCIPLE-LSP：里氏替换原则"><a href="#Chap9-LSP-THE-LISKOV-SUBSTITUTION-PRINCIPLE-LSP：里氏替换原则" class="headerlink" title="Chap9. LSP: THE LISKOV SUBSTITUTION PRINCIPLE LSP：里氏替换原则"></a>Chap9. LSP: THE LISKOV SUBSTITUTION PRINCIPLE LSP：里氏替换原则</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN09.jpg"></p><p>In 1988, Barbara Liskov wrote the following as a way of defining subtypes.</p><blockquote><p>1988 年，Barbara Liskov 在描述如何定义子类型时写下了这样一段话：</p></blockquote><p>What is wanted here is something like the following substitution property: If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T, the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T.1</p><blockquote><p>这里需要的是一种可替换性：如果对于每个类型是 S 的对象 o1 都存在一个类型为 T 的对象 o2，能使操作 T 类型的程序 P 在用 o2 替换 o1 时行为保持不变，我们就可以将 S 称为 T 的子类型。</p></blockquote><p>To understand this idea, which is known as the Liskov Substitution Principle (LSP), let’s look at some examples.</p><blockquote><p>为了让读者理解这段话中所体现的设计理念，也就是里氏替换原则（LSP），我们可以来看几个例子。</p></blockquote><h2 id="GUIDING-THE-USE-OF-INHERITANCE-继承的使用指导"><a href="#GUIDING-THE-USE-OF-INHERITANCE-继承的使用指导" class="headerlink" title="GUIDING THE USE OF INHERITANCE 继承的使用指导"></a>GUIDING THE USE OF INHERITANCE 继承的使用指导</h2><p>Imagine that we have a class named License, as shown in Figure 9.1. This class has a method named calcFee(), which is called by the Billing application. There are two “subtypes” of License: PersonalLicense and BusinessLicense. They use different algorithms to calculate the license fee.</p><blockquote><p>假设我们有一个 License 类，其结构如图 9.1 所示。该类中有一个名为 calcFee() 的方法，该方法将由 Billing 应用程序来调用。而 License 类有两个“子类型”：PersonalLicense 与 BusinessLicense，这两个类会用不同的算法来计算授权费用。</p></blockquote><p><Figures figure="9-1">License, and its derivatives, conform to LSP</Figures></p><p>This design conforms to the LSP because the behavior of the Billing application does not depend, in any way, on which of the two subtypes it uses. Both of the subtypes are substitutable for the License type.</p><blockquote><p>上述设计是符合 LSP 原则的，因为 Billing 应用程序的行为并不依赖于其使用的任何一个衍生类。也就是说，这两个衍生类的对象都是可以用来替换 License 类对象的。</p></blockquote><h2 id="THE-SQUARE-x2F-RECTANGLE-PROBLEM-正方形-x2F-长方形问题"><a href="#THE-SQUARE-x2F-RECTANGLE-PROBLEM-正方形-x2F-长方形问题" class="headerlink" title="THE SQUARE&#x2F;RECTANGLE PROBLEM 正方形&#x2F;长方形问题"></a>THE SQUARE&#x2F;RECTANGLE PROBLEM 正方形&#x2F;长方形问题</h2><p>The canonical example of a violation of the LSP is the famed (or infamous, depending on your perspective) square&#x2F;rectangle problem (Figure 9.2).</p><blockquote><p>正方形&#x2F;长方形问题是个著名（或者说臭名远扬）的违反 LSP 的设计案例（这个问题的结构如图 9.2 所示）。</p></blockquote><p><Figures figure="9-2">The infamous square&#x2F;rectangle problem</Figures></p><p>In this example, Square is not a proper subtype of Rectangle because the height and width of the Rectangle are independently mutable; in contrast, the height and width of the Square must change together. Since the User believes it is communicating with a Rectangle, it could easily get confused. The following code shows why:</p><blockquote><p>在这个案例中，Square 类并不是 Rectangle 类的子类型，因为 Rectangle 类的高和宽可以分别修改，而 Square 类的高和宽则必须一同修改。由于 User 类 始终认为自己在操作 Rectangle 类，因此会带来一些混淆。例如在下面的代码中：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Rectangle</span> <span class="variable">r</span> <span class="operator">=</span> …</span><br><span class="line">r.setW(<span class="number">5</span>);</span><br><span class="line">r.setH(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">assert</span>(r.area() == <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>If the … code produced a Square, then the assertion would fail.</p><blockquote><p>很显然，如果上述代码在…处返回的是 Square 类，则最后的这个 assert 是不会成立的。</p></blockquote><p>The only way to defend against this kind of LSP violation is to add mechanisms to the User (such as an if statement) that detects whether the Rectangle is, in fact, a Square. Since the behavior of the User depends on the types it uses, those types are not substitutable.</p><blockquote><p>如果想要防范这种违反 LSP 的行为，唯一的办法就是在 user 类中增加用于区分 Rectangle 和 Square 的检测逻辑（例如增加 if 语句）。但这样一来，user 为的行为又将依赖于它所使用的类，这两个类就不能互相替换了。</p></blockquote><h2 id="LSP-AND-ARCHITECTURE-LSP-与软件架构"><a href="#LSP-AND-ARCHITECTURE-LSP-与软件架构" class="headerlink" title="LSP AND ARCHITECTURE LSP 与软件架构"></a>LSP AND ARCHITECTURE LSP 与软件架构</h2><p>In the early years of the object-oriented revolution, we thought of the LSP as a way to guide the use of inheritance, as shown in the previous sections. However, over the years the LSP has morphed into a broader principle of software design that pertains to interfaces and implementations.</p><blockquote><p>在面向对象这场编程革命兴起的早期，我们的普遍认知正如上文所说，认为 LSP 只不过是指导如何使用继承关系的一种方法，然而随着时间的推移，LSP 逐渐演变成了一种更广泛的、指导接口与其实现方式的设计原则。</p></blockquote><p>The interfaces in question can be of many forms. We might have a Java-style interface, implemented by several classes. Or we might have several Ruby classes that share the same method signatures. Or we might have a set of services that all respond to the same REST interface.</p><blockquote><p>这里提到的接口可以有多种形式——可以是 Java 风格的接口，具有多个实现类；也可以像 Ruby 一样，几个类共用一样的方法签名，甚至可以是几个服务响应同一个 REST 接口。</p></blockquote><p>In all of these situations, and more, the LSP is applicable because there are users who depend on well-defined interfaces, and on the substitutability of the implementations of those interfaces.</p><blockquote><p>LSP 适用于上述所有的应用场景，因为这些场景中的用户都依赖于一种接口，并且都期待实现该接口的类之间能具有可替换性。</p></blockquote><p>The best way to understand the LSP from an architectural viewpoint is to look at what happens to the architecture of a system when the principle is violated.</p><blockquote><p>想要从软件架构的角度来理解 LSP 的意义，最好的办法还是来看几个反面案例。</p></blockquote><h2 id="EXAMPLE-LSP-VIOLATION-违反-LSP-的案例"><a href="#EXAMPLE-LSP-VIOLATION-违反-LSP-的案例" class="headerlink" title="EXAMPLE LSP VIOLATION 违反 LSP 的案例"></a>EXAMPLE LSP VIOLATION 违反 LSP 的案例</h2><p>Assume that we are building an aggregator for many taxi dispatch services. Customers use our website to find the most appropriate taxi to use, regardless of taxi company. Once the customer makes a decision, our system dispatches the chosen taxi by using a restful service.</p><blockquote><p>假设我们现在正在构建一个提供出租车调度服务的系统。在该系统中，用户可以通过访问我们的网站，从多个出租车公司内寻找最适合自己的出租车。当用户选定车子时，该系统会通过调用 restful 服务接口来调度这辆车。</p></blockquote><p>Now assume that the URI for the restful dispatch service is part of the information contained in the driver database. Once our system has chosen a driver appropriate for the customer, it gets that URI from the driver record and then uses it to dispatch the driver.</p><blockquote><p>接下来，我们再假设该 restful 调度服务接口的 URI 被存储在司机数据库中。一旦该系统选中了最合适的出租车司机，它就会从司机数据库的记录中读取相应的 URI 信息，并通过调用这个 URI 来调度汽车。</p></blockquote><p>Suppose Driver Bob has a dispatch URI that looks like this:</p><blockquote><p>也就是说，如果司机 Bob 的记录中包含如下调度 URI：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">purplecab.com/driver/Bob</span><br></pre></td></tr></table></figure><p>Our system will append the dispatch information onto this URI and send it with a PUT, as follows:</p><blockquote><p>那么，我们的系统就会将调度信息附加在这个 URI 上，并发送这样一个 PUT 请求：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">purplecab.com/driver/Bob</span><br><span class="line">       /pickupAddress/24 Maple St.</span><br><span class="line">       /pickupTime/153</span><br><span class="line">       /destination/ORD</span><br></pre></td></tr></table></figure><p>Clearly, this means that all the dispatch services, for all the different companies, must conform to the same REST interface. They must treat the pickupAddress, pickupTime, and destination fields identically.</p><blockquote><p>很显然，这意味着所存参与该调度服务的公司都必须遵守同样的 REST 接口，它们必须用同样的方式处理 pickupAddress、pickupTime 和 destination 字段。</p></blockquote><p>Now suppose the Acme taxi company hired some programmers who didn’t read the spec very carefully. They abbreviated the destination field to just dest. Acme is the largest taxi company in our area, and Acme’s CEO’s ex-wife is our CEO’s new wife, and … Well, you get the picture. What would happen to the architecture of our system?</p><blockquote><p>接下来，我们再假设 Acme 出租车公司现在招聘的程序员由于没有仔细阅读上述接口定义，结果将 destination 字段缩写成了 dest。而 Acme 又是本地最大的出租车公司，另外，Acme CEO 的前妻不巧还是我们 CEO 的新欢……你懂的！这这会对系统的架构造成什么影响呢？</p></blockquote><p>Obviously, we would need to add a special case. The dispatch request for any Acme driver would have to be constructed using a different set of rules from all the other drivers.</p><blockquote><p>显然，我们需要为系统增加一类特殊用例，以应对 Acme 司机的调度请求。这必须要用另外一套规则来构建。</p></blockquote><p>The simplest way to accomplish this goal would be to add an if statement to the module that constructed the dispatch command:</p><blockquote><p>最简单的做法当然是增加一条 if 语句：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (driver.getDispatchUri().startsWith(<span class="string">&quot;acme.com&quot;</span>))…</span><br></pre></td></tr></table></figure><p>But, of course, no architect worth his or her salt would allow such a construction to exist in the system. Putting the word “acme” into the code itself creates an opportunity for all kinds of horrible and mysterious errors, not to mention security breaches.</p><blockquote><p>然而很明显，任何一个称职的软件架构师都不会允许这样一条语句出现在自己的系统中。因为直接将“acme”这样的字串写入代码会留下各种各样神奇又可怕的错误隐患，甚至会导致安全问题。</p></blockquote><p>For example, what if Acme became even more successful and bought the Purple Taxi company. What if the merged company maintained the separate brands and the separate websites, but unified all of the original companies’ systems? Would we have to add another if statement for “purple”?</p><blockquote><p>例如，Acme 也许会变得更加成功，最终收购了 Purple 出租车公司。然后，它们在保留了各自名字的同时却统一了彼此的计算机系统。在这种情况下，系统中难道还要再增加一条“purple”的特例吗？</p></blockquote><p>Our architect would have to insulate the system from bugs like this by creating some kind of dispatch command creation module that was driven by a configuration database keyed by the dispatch URI. The configuration data might look something like this:</p><blockquote><p>软件架构师应该创建一个调度请求创建组件，并让该组件使用一个配置数据库来保存 URI 组装格式，这样的方式可以保护系统不受外界因素变化的影响。例如其配置信息可以如下：</p></blockquote><table><thead><tr><th>URI</th><th>Dispatch Format</th></tr></thead><tbody><tr><td>Acme.com</td><td>&#x2F;pickupAddress&#x2F;%s&#x2F;pickupTime&#x2F;%s&#x2F;dest&#x2F;%s</td></tr><tr><td><code>*.*</code></td><td>&#x2F;pickupAddress&#x2F;%s&#x2F;pickupTime&#x2F;%s&#x2F;destination&#x2F;%s</td></tr></tbody></table><p>And so our architect has had to add a significant and complex mechanism to deal with the fact that the interfaces of the restful services are not all substitutable.</p><blockquote><p>但这样一来，软件架构师就需要通过增加一个复杂的组件来应对并不完全能实现互相替换的 restful 服务接口。</p></blockquote><h2 id="CONCLUSION-本章小结-7"><a href="#CONCLUSION-本章小结-7" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>The LSP can, and should, be extended to the level of architecture. A simple violation of substitutability, can cause a system’s architecture to be polluted with a significant amount of extra mechanisms.</p><blockquote><p>LSP 可以且应该被应用于软件架构层面，因为一旦违背了可替换也该系统架构就不得不为此增添大量复杂的应对机制。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap10-ISP-THE-INTERFACE-SEGREGATION-PRINCIPLE-ISP：接口隔离原则"><a href="#Chap10-ISP-THE-INTERFACE-SEGREGATION-PRINCIPLE-ISP：接口隔离原则" class="headerlink" title="Chap10. ISP: THE INTERFACE SEGREGATION PRINCIPLE ISP：接口隔离原则"></a>Chap10. ISP: THE INTERFACE SEGREGATION PRINCIPLE ISP：接口隔离原则</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN10.jpg"></p><p>The Interface Segregation Principle (ISP) derives its name from the diagram shown in Figure 10.1.</p><blockquote><p>“接口隔离原则（ISP）”这个名字来自图 10.1 所示的这种软件结构。</p></blockquote><p><Figures figure="10-1">The Interface Segregation Principle</Figures></p><p>In the situation illustrated in Figure 10.1, there are several users who use the operations of the OPS class. Let’s assume that User1 uses only op1, User2 uses only op2, and User3 uses only op3.</p><blockquote><p>在图 10.1 所描绘的应用中，有多个用户需要操作 OPS 类。现在，我们假设这里的 User1 只需要使用 op1，User2 只需要使用 op2，User3 只需要使用 op3。</p></blockquote><p>Now imagine that OPS is a class written in a language like Java. Clearly, in that case, the source code of User1 will inadvertently depend on op2 and op3, even though it doesn’t call them. This dependence means that a change to the source code of op2 in OPS will force User1 to be recompiled and redeployed, even though nothing that it cared about has actually changed.</p><blockquote><p>在这种情况下，如果 OPS 类是用 Java 编程语言编写的，那么很明显，User1 虽然不需要调用 op2、op3，但在源代码层次上也与它们形成依赖关系。这种依赖意味着我们对 OPS 代码中 op2 所做的任何修改，即使不会影响到 User1 的功能，也会导致它需要被重新编译和部署。</p></blockquote><p>This problem can be resolved by segregating the operations into interfaces as shown in Figure 10.2.</p><p>Again, if we imagine that this is implemented in a statically typed language like Java, then the source code of User1 will depend on U1Ops, and op1, but will not depend on OPS. Thus a change to OPS that User1 does not care about will not cause User1 to be recompiled and redeployed.</p><blockquote><p>这个问题可以通过将不同的操作隔离成接口来解决，具体如图 10.2 所示。同样，我们也假设这个例子是用 Java 这种静态类型语言来实现的，那么现在 User1 的源代码会依赖于 U1Ops 和 op1，但不会依赖于 OPS。这样一来，我们之后对 OPS 做的修改只要不影响到 User1 的功能，就不需要重新编译和部署 User1 了。</p></blockquote><p><Figures figure="10-2">Segregated operations</Figures></p><h2 id="ISP-AND-LANGUAGE-ISP-与编程语言"><a href="#ISP-AND-LANGUAGE-ISP-与编程语言" class="headerlink" title="ISP AND LANGUAGE ISP 与编程语言"></a>ISP AND LANGUAGE ISP 与编程语言</h2><p>Clearly, the previously given description depends critically on language type. Statically typed languages like Java force programmers to create declarations that users must import, or use, or otherwise include. It is these included declarations in source code that create the source code dependencies that force recompilation and redeployment.</p><blockquote><p>很明显，上述例子很大程度上也依赖于我们所釆用的编程语言：对于 Java 这样的静态类型语言来说，它们需要程序员显式地 import、use 或者 include 其实现功能所需要的源代码。而正是这些语句带来了源代码之间的依赖关系，这也就导致了某些模块需要被重新编译和重新部署。</p></blockquote><p>In dynamically typed languages like Ruby and Python, such declarations don’t exist in source code. Instead, they are inferred at runtime. Thus there are no source code dependencies to force recompilation and redeployment. This is the primary reason that dynamically typed languages create systems that are more flexible and less tightly coupled than statically typed languages.</p><blockquote><p>而对于 Ruby 和 Python 这样的动态类型语言来说，源代码中就不存在这样的声明，它们所用对象的类型会在运行时被推演出来，所以也就不存在强制重新编译重新部署的必要性。这就是动态类型语言要比静态类型语言更灵活、耦合度更松的原因。</p></blockquote><p>This fact could lead you to conclude that the ISP is a language issue, rather than an architecture issue.</p><blockquote><p>当然，如果仅仅就这样说的话，读者可能会误以为 ISP 只是一个与编程语言的选择紧密相关的设计原则，而非软件架构问题，这就错了。</p></blockquote><h2 id="ISP-AND-ARCHITECTURE-ISP-与软件架构"><a href="#ISP-AND-ARCHITECTURE-ISP-与软件架构" class="headerlink" title="ISP AND ARCHITECTURE ISP 与软件架构"></a>ISP AND ARCHITECTURE ISP 与软件架构</h2><p>If you take a step back and look at the root motivations of the ISP, you can see a deeper concern lurking there. In general, it is harmful to depend on modules that contain more than you need. This is obviously true for source code dependencies that can force unnecessary recompilation and redeployment—but it is also true at a much higher, architectural level.</p><blockquote><p>回顾一下 ISP 最初的成因：在一般情况下，任何层次的软件设计如果依赖于不需要的东西，都会是有害的。从源代码层次来说，这样的依赖关系会导致不必要的重新编译和重新部署，对更高层次的软件架构设计来说，问题也是类似的。</p></blockquote><p>Consider, for example, an architect working on a system, S. He wants to include a certain framework, F, into the system. Now suppose that the authors of F have bound it to a particular database, D. So S depends on F. which depends on D (Figure 10.3).</p><blockquote><p>例如，我们假设某位软件架构师在设计系统 S 时，想要在该系统中引入某个框架 F。这时候，假设框架 F 的作者又将其捆绑在一个特定的数据库 D 上，那么就形成了 S 依赖于 F，F 又依赖于 D 的关系（参见图 10.3）。</p></blockquote><p><Figures figure="10-3">A problematic architecture</Figures></p><p>Now suppose that D contains features that F does not use and, therefore, that S does not care about. Changes to those features within D may well force the redeployment of F and, therefore, the redeployment of S. Even worse, a failure of one of the features within D may cause failures in F and S.</p><blockquote><p>在这种情况下，如果 D 中包含了 F 不需要的功能，那么这些功能同样也会是 S 不需要的。而我们对 D 中的这些功能的修改将会导致 F 需要被重新部署，后者又会导致 S 的重新部署。更糟糕的是，D 中一个无关功能的错误也可能会导致 F 和 S 运行出错。</p></blockquote><h2 id="CONCLUSION-本章小结-8"><a href="#CONCLUSION-本章小结-8" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>The lesson here is that depending on something that carries baggage that you don’t need can cause you troubles that you didn’t expect.</p><blockquote><p>本章所讨论的设计原则告诉我们：任何层次的软件设计如果依赖了它并不需要的东西，就会带来意料之外的麻烦。</p></blockquote><p>We’ll explore this idea in more detail when we discuss the Common Reuse Principle in Chapter 13, “Component Cohesion.”</p><blockquote><p>我们将会在第 13 章“组件聚合”中讨论共同复用原则的时候再来深入探讨更多相关的细节。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap11-DIP-THE-DEPENDENCY-INVERSION-PRINCIPLE-DIP：依赖反转原则"><a href="#Chap11-DIP-THE-DEPENDENCY-INVERSION-PRINCIPLE-DIP：依赖反转原则" class="headerlink" title="Chap11. DIP: THE DEPENDENCY INVERSION PRINCIPLE DIP：依赖反转原则"></a>Chap11. DIP: THE DEPENDENCY INVERSION PRINCIPLE DIP：依赖反转原则</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN11.jpg"></p><p>The Dependency Inversion Principle (DIP) tells us that the most flexible systems are those in which source code dependencies refer only to abstractions, not to concretions.</p><blockquote><p>依赖反转原则（DIP）主要想告诉我们的是，如果想要设计一个灵活的系统，在源代码层次的依赖关系中就应该多引用抽象类型，而用具体实现。</p></blockquote><p>In a statically typed language, like Java, this means that the use, import, and include statements should refer only to source modules containing interfaces, abstract classes, or some other kind of abstract declaration. Nothing concrete should be depended on.</p><blockquote><p>也就是说，在 Java 这类静态类型的编程语言中，在使用 use、import、include 这些语句时应该只引用那些包含接口、抽象类或者其他抽象类型声明的源文件，不应该引用任何具体实现。</p></blockquote><p>The same rule applies for dynamically typed languages, like Ruby and Python. Source code dependencies should not refer to concrete modules. However, in these languages it is a bit harder to define what a concrete module is. In particular, it is any module in which the functions being called are implemented.</p><blockquote><p>同样的，在 Ruby、Python 这类动态类型的编程语言中，我们也不应该在源代码 层次上引用包含具体实现的模块。当然，在这类语言中，事实上很难清晰界定某个模块是否属于“具体实现”。</p></blockquote><p>Clearly, treating this idea as a rule is unrealistic, because software systems must depend on many concrete facilities. For example, the String class in Java is concrete, and it would be unrealistic to try to force it to be abstract. The source code dependency on the concrete java.lang.string cannot, and should not, be avoided.</p><blockquote><p>显而易见，把这条设计原则当成金科玉律来加以严格执行是不现实的，因为软件系统在实际构造中不可避免地需要依赖到一些具体实现。例如，Java 中的 String 类就是这样一个具体实现，我们将其强迫转化为抽象类是不现实的，而在源代码层次上也无法避免对 java.lang.String 的依赖，并且也不应该尝试去避免。</p></blockquote><p>By comparison, the String class is very stable. Changes to that class are very rare and tightly controlled. Programmers and architects do not have to worry about frequent and capricious changes to String.</p><blockquote><p>但 String 类本身是非常稳定的，因为这个类被修改的情况是非常罕见的，而且可修改的内容也受到严格的控制，所以程序员和软件架构师完全不必担心 String 类上会发生经常性的或意料之外的修改。</p></blockquote><p>For these reasons, we tend to ignore the stable background of operating system and platform facilities when it comes to DIP. We tolerate those concrete dependencies because we know we can rely on them not to change.</p><blockquote><p>同理，在应用 DIP 时，我们也不必考虑稳定的操作系统或者平台设施，因为这些系统接口很少会有变动。</p></blockquote><p>It is the volatile concrete elements of our system that we want to avoid depending on. Those are the modules that we are actively developing, and that are undergoing frequent change.</p><blockquote><p>我们主要应该关注的是软件系统内部那些会经常变动的（volatile）具体实现模块，这些模块是不停开发的，也就会经常出现变更。</p></blockquote><h2 id="STABLE-ABSTRACTIONS-稳定的抽象层"><a href="#STABLE-ABSTRACTIONS-稳定的抽象层" class="headerlink" title="STABLE ABSTRACTIONS 稳定的抽象层"></a>STABLE ABSTRACTIONS 稳定的抽象层</h2><p>Every change to an abstract interface corresponds to a change to its concrete implementations. Conversely, changes to concrete implementations do not always, or even usually, require changes to the interfaces that they implement. Therefore interfaces are less volatile than implementations.</p><blockquote><p>我们每次修改抽象接口的时候，一定也会去修改对应的具体实现。但反过来，当我们修改具体实现时，却很少需要去修改相应的抽象接口。所以我们可以认为接口比实现更稳定。</p></blockquote><p>Indeed, good software designers and architects work hard to reduce the volatility of interfaces. They try to find ways to add functionality to implementations without making changes to the interfaces. This is Software Design 101.</p><blockquote><p>的确，优秀的软件设计师和架构师会花费很大精力来设计接口，以减少未来对其进行改动。毕竟争取在不修改接口的情况下为软件增加新的功能是软件设计的基础常识。</p></blockquote><p>The implication, then, is that stable software architectures are those that avoid depending on volatile concretions, and that favor the use of stable abstract interfaces. This implication boils down to a set of very specific coding practices:</p><blockquote><p>也就是说，如果想要在软件架构设计上追求稳定，就必须多使用稳定的抽象接口，少依赖多变的具体实现。下面，我们将该设计原则归结为以下几条具体的编码守则：</p></blockquote><ul><li>Don’t refer to volatile concrete classes. Refer to abstract interfaces instead. This rule applies in all languages, whether statically or dynamically typed. It also puts severe constraints on the creation of objects and generally enforces the use of Abstract Factories.</li><li>Don’t derive from volatile concrete classes. This is a corollary to the previous rule, but it bears special mention. In statically typed languages, inheritance is the strongest, and most rigid, of all the source code relationships; consequently, it should be used with great care. In dynamically typed languages, inheritance is less of a problem, but it is still a dependency—and caution is always the wisest choice.</li><li>Don’t override concrete functions. Concrete functions often require source code dependencies. When you override those functions, you do not eliminate those dependencies—indeed, you inherit them. To manage those dependencies, you should make the function abstract and create multiple implementations.</li><li>Never mention the name of anything concrete and volatile. This is really just a restatement of the principle itself.</li></ul><hr><blockquote><ul><li>应在代码中多使用抽象接口，尽量避免使用那些多变的具体实现类。这条守则适用于所有编程语言，无论静态类型语言还是动态类型语言。同时，对象的创建过程也应该受到严格限制，对此，我们通常会选择用抽象工厂（abstract factory）这个设计模式。</li><li>不要在具体实现类上创建衍生类。上一条守则虽然也隐含了这层意思，但它还是值得被单独拿出来做一次详细声明。在静态类型的编程语言中，继承关系是所有一切源代码依赖关系中最强的、最难被修改的，所以我们对继承的使用应该格外小心。即使是在稍微便于修改的动态类型语言中，这条守则也应该被认真考虑。</li><li>不要覆盖（override）包含具体实现的函数。调用包含具体实现的函数通常 就意味着引入了源代码级别的依赖。即使覆盖了这些函数，我们也无法消除这其中的依赖——这些函数继承了那些依赖关系。在这里，控制依赖关系的唯一办法，就是创建一个抽象函数，然后再为该函数提供多种具体实现。</li><li>应避免在代码中写入与任何具体实现相关的名字，或者是其他容易变动的事物的名字。这基本上是 DIP 原则的另外一个表达方式。</li></ul></blockquote><h2 id="FACTORIES-工厂模式"><a href="#FACTORIES-工厂模式" class="headerlink" title="FACTORIES 工厂模式"></a>FACTORIES 工厂模式</h2><p>To comply with these rules, the creation of volatile concrete objects requires special handling. This caution is warranted because, in virtually all languages, the creation of an object requires a source code dependency on the concrete definition of that object.</p><blockquote><p>如果想要遵守上述编码守则，我们就必须要对那些易变对象的创建过程做一些特殊处理，这样的谨慎是很有必要的，因为基本在所有的编程语言中，创建对象的操作都免不了需要在源代码层次上依赖对象的具体实现。</p></blockquote><p>In most object-oriented languages, such as Java, we would use an Abstract Factory to manage this undesirable dependency.</p><blockquote><p>在大部分面向对象编程语言中，人们都会选择用抽象工厂模式来解决这个源代码依赖的问题。</p></blockquote><p>The diagram in Figure 11.1 shows the structure. The Application uses the ConcreteImpl through the Service interface. However, the Application must somehow create instances of the ConcreteImpl. To achieve this without creating a source code dependency on the ConcreteImpl, the Application calls the makeSvc method of the ServiceFactory interface. This method is implemented by the ServiceFactoryImpl class, which derives from ServiceFactory. That implementation instantiates the ConcreteImpl and returns it as a Service.</p><blockquote><p>下面，我们通过图 11.1 来描述一下该设计模式的结构。如你所见 Application 类是通过 Service 接口来使用 Concretelmpl 类的。然而，Application 类还是必须要构造 Concretelmpl 类实例。于是，为了避免在源代码层次上引入对 Concretelmpl 类具体实现的依赖，我们现在让 Application 类去调用 ServiceFactory 接口的 makeSvc 方法。这个方法就由 ServiceFactorylmpl 类来具体提供，它是 ServiceFactory 的一个衍生类。该方法的具体实现就是初始化一个 Concretelmpl 类的实例，并且将其以 Service 类型返回。</p></blockquote><p><Figures figure="11-1">Use of the Abstract Factory pattern to manage the dependency</Figures></p><p>The curved line in Figure 11.1 is an architectural boundary. It separates the abstract from the concrete. All source code dependencies cross that curved line pointing in the same direction, toward the abstract side.</p><blockquote><p>图 11.1 中间的那条曲线代表了软件架构中的抽象层与具体实现层的边界。在这里，所有跨越这条边界源代码级别的依赖关系都应该是单向的，即具体实现层依赖抽象层。</p></blockquote><p>The curved line divides the system into two components: one abstract and the other concrete. The abstract component contains all the high-level business rules of the application. The concrete component contains all the implementation details that those business rules manipulate.</p><blockquote><p>这条曲线将整个系统划分为两部分组件：抽象接口与其具体实现。抽象接口组件中包含了应用的所有高阶业务规则，而具体实现组件中则包括了所有这些业务规则所需要做的具体操作及其相关的细节信息。</p></blockquote><p>Note that the flow of control crosses the curved line in the opposite direction of the source code dependencies. The source code dependencies are inverted against the flow of control—which is why we refer to this principle as Dependency Inversion.</p><blockquote><p>请注意，这里的控制流跨越架构边界的方向与源代码依赖关系跨越该边界的方向正好相反，源代码依赖方向永远是控制流方向的反转——这就是 DIP 被称为依赖反转原则的原因。</p></blockquote><h2 id="CONCRETE-COMPONENTS-具体实现组件"><a href="#CONCRETE-COMPONENTS-具体实现组件" class="headerlink" title="CONCRETE COMPONENTS 具体实现组件"></a>CONCRETE COMPONENTS 具体实现组件</h2><p>The concrete component in Figure 11.1 contains a single dependency, so it violates the DIP. This is typical. DIP violations cannot be entirely removed, but they can be gathered into a small number of concrete components and kept separate from the rest of the system.</p><blockquote><p>在图 11.1 中，具体实现组件的内部仅有一条依赖关系，这条关系其实是违反 DIP 的。这种情况很常见，我们在软件系统中并不可能完全消除违反 DIP 的情见通常只需要把它们集中于少部分的具体实现组件中，将其与系统的其他部分隔离即可。</p></blockquote><p>Most systems will contain at least one such concrete component—often called main because it contains the main1 function. In the case illustrated in Figure 11.1, the main function would instantiate the ServiceFactoryImpl and place that instance in a global variable of type ServiceFactory. The Application would then access the factory through that global variable.</p><blockquote><p>绝大部分系统中都至少存在一个具体实现组件 我们一般称之为 main 组化 因为它们通常是 main 函数所在之处。在 图 11.1 中，函数应该负责创建 ServiceFactoryImpl 实例，并将其赋值给类型为 ServiceFactory 的全局变量，以便让 Application 类通过这个全局变量来进行相关调用。</p></blockquote><h2 id="CONCLUSION-本章小结-9"><a href="#CONCLUSION-本章小结-9" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>As we move forward in this book and cover higher-level architectural principles, the DIP will show up again and again. It will be the most visible organizing principle in our architecture diagrams. The curved line in Figure 11.1 will become the architectural boundaries in later chapters. The way the dependencies cross that curved line in one direction, and toward more abstract entities, will become a new rule that we will call the Dependency Rule.</p><blockquote><p>随着本书内容的进一步深入，以及我们对高级系统架构理论的进一步讨论，DIP 出现的频率将会越来越高。在系统架构图中，DIP 通常是最显而易见的组织原此我们在后续章节中会把图 11.1 中的那条曲线称为架构边界，而跨越边界的、朝向抽象层的单向依赖关系则会成为一个设计守则——依赖守则。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Part4-COMPONENT-PRINCIPLES-组件构建原则"><a href="#Part4-COMPONENT-PRINCIPLES-组件构建原则" class="headerlink" title="Part4. COMPONENT PRINCIPLES 组件构建原则"></a>Part4. COMPONENT PRINCIPLES 组件构建原则</h1><p>If the SOLID principles tell us how to arrange the bricks into walls and rooms, then the component principles tell us how to arrange the rooms into buildings. Large software systems, like large buildings, are built out of smaller components.</p><blockquote><p>大型软件系统的构建过程与建筑物修建很类似，都是由一个个小组件组成的。所以，如果说 SOLID 原则是用于指导我们如何将砖块砌成墙与房间的，那么组件构建原则就是用来指导我们如何将这些房间组合成房子的。</p></blockquote><p>In Part IV, we will discuss what software components are, which elements should compose them, and how they should be composed together into systems.</p><blockquote><p>在第 4 部分中，我们会详细讨论软件组件是什么，它们由什么元素构成，以及如何利用组件来构建系统。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap12-COMPONENTS-组件"><a href="#Chap12-COMPONENTS-组件" class="headerlink" title="Chap12. COMPONENTS 组件"></a>Chap12. COMPONENTS 组件</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN12.jpg"></p><p>Components are the units of deployment. They are the smallest entities that can be deployed as part of a system. In Java, they are jar files. In Ruby, they are gem files. In .Net, they are DLLs. In compiled languages, they are aggregations of binary files. In interpreted languages, they are aggregations of source files. In all languages, they are the granule of deployment.</p><blockquote><p>组件是软件的部署单元，是整个软件系统在部署过程中可以独立完成部署的最小实体。例如，对于 Java 来说，它的组件是阿文件。而在 Ruby 中，它们是 gem 文件。在 .Net 中，它们则是 DLL 文件。总而言之，在编译运行语言中，组件是一组二进制文件的集合。而在解释运行语言中，组件则是一组源代码文件的集合。无论术用什么编程语言来开发软件，组件都是该软件在部署过程中的最小单元。</p></blockquote><p>Components can be linked together into a single executable. Or they can be aggregated together into a single archive, such as a .war file. Or they can be independently deployed as separate dynamically loaded plugins, such as.jar or .dll or .exe files. Regardless of how they are eventually deployed, well-designed components always retain the ability to be independently deployable and, therefore, independently developable.</p><blockquote><p>我们可以将多个组件链接成一个独立可执行文件，也可以将它们汇总成类似.W3：文件这样的部署单元，又或者，组件也可以被打包成 .jar、.dll 或者 .exe 文件，并以可动态加载的插件形式来独立部署。但无论采用哪种部署形式，设计良好的组件都应该永远保持可被独立部署的特性，这同时也意味着这些组件应该可以被单独开发。</p></blockquote><h2 id="A-BRIEF-HISTORY-OF-COMPONENTS-组件发展史"><a href="#A-BRIEF-HISTORY-OF-COMPONENTS-组件发展史" class="headerlink" title="A BRIEF HISTORY OF COMPONENTS 组件发展史"></a>A BRIEF HISTORY OF COMPONENTS 组件发展史</h2><p>In the early years of software development, programmers controlled the memory location and layout of their programs. One of the first lines of code in a program would be the origin statement, which declared the address at which the program was to be loaded.</p><blockquote><p>在早期的软件开发中，程序员可以完全掌控自己编写的程序所处的内存地址和存放格式。在那时，程序中的第一条语句被称为起源（origin）语句，它的作用是声明该程序应该被加载到的内存位置。</p></blockquote><p>Consider the following simple PDP-8 program. It consists of a subroutine named GETSTR that inputs a string from the keyboard and saves it in a buffer. It also has a little unit test program to exercise GETSTR.</p><blockquote><p>例如下面这段简单的 PDP-8 程序。该程序中包含一段名为 GETSTR 的子程序，作用是从键盘上读取一个字符串，并将其存入缓冲区。同时，该程序中还包含一段用于测试 GETSTR 功能的单元测试。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">           *200</span><br><span class="line">           TLS</span><br><span class="line">START,     CLA</span><br><span class="line">           TAD BUFR</span><br><span class="line">           JMS GETSTR</span><br><span class="line">           CLA</span><br><span class="line">           TAD BUFR</span><br><span class="line">           JMS PUTSTR</span><br><span class="line">           JMP START</span><br><span class="line">BUFR,      3000</span><br><span class="line"></span><br><span class="line">GETSTR,    0</span><br><span class="line">           DCA PTR</span><br><span class="line">NXTCH,     KSF</span><br><span class="line">           JMP -1</span><br><span class="line">           KRB</span><br><span class="line">           DCA I PTR</span><br><span class="line">           TAD I PTR</span><br><span class="line">           AND K177</span><br><span class="line">           ISZ PTR</span><br><span class="line">           TAD MCR</span><br><span class="line">           SZA</span><br><span class="line">           JMP NXTCH</span><br><span class="line"></span><br><span class="line">K177,      177</span><br><span class="line">MCR,       -15</span><br></pre></td></tr></table></figure><p>Note the <code>*200</code> command at the start of this program. It tells the compiler to generate code that will be loaded at address 2008.</p><blockquote><p>首先，程序开头的头 200 命令告诉编译器生成后的代码应该加载到内存地址为 200（八进制）的位置。</p></blockquote><p>This kind of programming is a foreign concept for most programmers today. They rarely have to think about where a program is loaded in the memory of the computer. But in the early days, this was one of the first decisions a programmer needed to make. In those days, programs were not relocatable.</p><blockquote><p>当然，上面这种编程方式如今应该已经很少见了，因为现在的程序员一般不需要考虑程序要加载的内存地址。但这的确是早期程序员们在编程初期就要做的一个重要决策，因为当时的程序基本不能被重定位（relocate）。</p></blockquote><p>How did you access a library function in those olden days? The preceding code illustrates the approach used. Programmers included the source code of the library functions with their application code, and compiled them all as a single program.1 Libraries were kept in source, not in binary.</p><blockquote><p>那么，当时是如何调用库函数呢？上述代码演示了具体调用过程。程序员们需要将所有要调用的库函数源代码包含到自己的程序代码中，然后再进行整体编译库函数文件都是以源代码而非二进制的形式保存的。</p></blockquote><p>The problem with this approach was that, during this era, devices were slow and memory was expensive and, therefore, limited. Compilers needed to make several passes over the source code, but memory was too limited to keep all the source code resident. Consequently, the compiler had to read in the source code several times using the slow devices.</p><blockquote><p>在那个年代，存储设备十分缓慢，而内存则非常昂贵，也非常有限。编译器在编译程序的过程中需要数次遍历整个源代码。由于内存非常有限，驻留所有的源代码是不现实的，编译器只能多次从缓慢的存储设备中读取源代码。</p></blockquote><p>This took a long time—and the larger your function library, the longer the compiler took. Compiling a large program could take hours.</p><blockquote><p>这样做是十分耗时的 库函数越多，编译就越慢。大型程序的编译过程经常需要几个小时。</p></blockquote><p>To shorten the compile times, programmers separated the source code of the function library from the applications. They compiled the function library separately and loaded the binary at a known address—say, 20008. They created a symbol table for the function library and compiled that with their application code. When they wanted to run an application, they would load the binary function library,2 and then load the application. Memory looked like the layout shown in Figure 12.1.</p><blockquote><p>为了缩短编译时间，程序员们改将库函数的源代码单独编译。而库函数的源码在单独编译后会被加载到一个指定位置，比如地址 2000（八进制）。然后，编译器会针对该库文件创建一个符号表（symbol table），并将其和应用程序代码编译在一起。当程序运行时，它会先加载二进制形式的库文件，再加载编译过的应用程序，其内存布局如图 12.1 所示。</p></blockquote><p><Figures figure="12-1">Early memory layout</Figures></p><p>This worked fine so long as the application could fit between addresses 00008 and 17778. But soon applications grew to be larger than the space allotted for them. At that point, programmers had to split their applications into two address segments, jumping around the function library (Figure 12.2).</p><blockquote><p>当然，只要应用程序的代码能够完全存放在地址 0000〜1777（八进制）内，这种组织方式就没有任何问题。但是，应用程序代码的大小很快就会超出这个范围。为了解决这个问题，程序员们必须将应用程序代码切分成两个不同的地址段，以跳过库函数存放的内存范围（具体如图 12.2 所示）。</p></blockquote><p><Figures figure="12-2">Splitting the application into two address segments</Figures></p><p>Obviously, this was not a sustainable situation. As programmers added more functions to the function library, it exceeded its bounds, and they had to allocate more space for it (in this example, near 70008). This fragmentation of programs and libraries necessarily continued as computer memory grew.</p><blockquote><p>很显然，这种方案也是不对持续的。因为随着函数用小函数的增加，它的大小也随之增加，我们同样也需要为此划分新的区域，譬如在上述例子中，我们需在 7000（八进制）左右的位置往后追加地址空间。这样一来，程序和函数库的碎片化程度会随着计算机内存的增加而不断增加。</p></blockquote><p>Clearly, something had to be done.</p><blockquote><p>显而易见，这个问题必须要有一个解决方案。</p></blockquote><h2 id="RELOCATABILITY-重定位技术"><a href="#RELOCATABILITY-重定位技术" class="headerlink" title="RELOCATABILITY 重定位技术"></a>RELOCATABILITY 重定位技术</h2><p>The solution was relocatable binaries. The idea behind them was very simple. The compiler was changed to output binary code that could be relocated in memory by a smart loader. The loader would be told where to load the relocatable code. The relocatable code was instrumented with flags that told the loader which parts of the loaded data had to be altered to be loaded at the selected address. Usually this just meant adding the starting address to any memory reference addresses in the binary.</p><blockquote><p>该解决方案就是生成可重定位的二进制文件。其背后的原理非常简单，即程序员修改编译器输出文件的二进制格式，使其可以由一个智能加载器加载到任意内存位置。当然，这需要我们在加载器启动时为这些文件指定要加载到的内存地址，而且可重定位的代码中还包含了一些记号，加载器将其加载到指定位置时会修改这些记号对应的地址值。一般来说，这个过程只不过就是将二进制文件中包含的内存地址都按照其加载到的内存基础位置进行递增。</p></blockquote><p>Now the programmer could tell the loader where to load the function library, and where to load the application. In fact, the loader would accept several binary inputs and simply load them in memory one right after the other, relocating them as it loaded them. This allowed programmers to load only those functions that they needed.</p><blockquote><p>这样一来，程序员们就可以用加载器来调整函数库及应用程序的位置了。事实上，这种加载器还可以接受多个二进制文件的输入，并按顺序在内存中加载它们，再逐个进行重定位。这样，程序员们就可以只加载他们实际会用到的函数了。</p></blockquote><p>The compiler was also changed to emit the names of the functions as metadata in the relocatable binary. If a program called a library function, the compiler would emit that name as an external reference. If a program defined a library function, the compiler would emit that name as an external definition. Then the loader could link the external references to the external definitions once it had determined where it had loaded those definitions.</p><blockquote><p>除此之外，程序员们还对编译器做了另外一个修改，就是在可重定位二进制文 件中将函数名输出为元数据并存储起来。这样一来，如果一段程序调用了某个库函数，编译器就会将这个函数的名字输出为外部引用（external reference），而将库函数的定义输出为外部定义（external definition）。加载器在加载完程序后，会将外部 引用和外部定义链接（link）起来。</p></blockquote><p>And the linking loader was born.</p><blockquote><p>这就是链接加载器（linking loader）的由来。</p></blockquote><h2 id="LINKERS-链接器"><a href="#LINKERS-链接器" class="headerlink" title="LINKERS 链接器"></a>LINKERS 链接器</h2><p>The linking loader allowed programmers to divide their programs up onto separately compilable and loadable segments. This worked well when relatively small programs were being linked with relatively small libraries. However, in the late 1960s and early 1970s, programmers got more ambitious, and their programs got a lot bigger.</p><blockquote><p>链接加载器让程序员们可以将程序切分成多个可被分别编译、加载的程序段。在程序规模较小、外部链接也较少的情况，这个方案一直都很好用。然而在 20 世纪 60 年代末期到 70 年代初期的那段时间里，程序的规模突然有了大幅的增长，情况就有所不同了。</p></blockquote><p>Eventually, the linking loaders were too slow to tolerate. Function libraries were stored on slow devices such a magnetic tape. Even the disks, back then, were quite slow. Using these relatively slow devices, the linking loaders had to read dozens, if not hundreds, of binary libraries to resolve the external references. As programs grew larger and larger, and more library functions accumulated in libraries, a linking loader could take more than an hour just to load the program.</p><blockquote><p>显然在这种情况下，链接加载器的处理过程实在是太慢了。且不说函数库当时还存储在磁带卷这样的低速存储设备上，即使是存储在磁盘上，其存取速度也是很慢的。毕竟，链接加载器在加载处理过程中必须要读取几十个甚至几百个二进制库文件来解析外部引用。因此随着程序规模的扩大，以及函数库中函数的累积，链接加载器的加载过程经常会出现需要一个多小时才能完成的情况。</p></blockquote><p>Eventually, the loading and the linking were separated into two phases. Programmers took the slow part—the part that did that linking—and put it into a separate application called the linker. The output of the linker was a linked relocatable that a relocating loader could load very quickly. This allowed programmers to prepare an executable using the slow linker, but then they could load it quickly, at any time.</p><blockquote><p>最后，程序员们只能将加载过程和链接过程也进行分离。他们将耗时较长的部分——链接部分——放到了一个单独的程序中去进行，这个程序就是所谓的链接器（linker）。链接器的输出是一个已经完成了外部链接的、可以重定位的二进制文件，这种文件可以由一个支持重定位的加载器迅速加载到内存中。这使得程序员可以用缓慢的链接器生产出可以很快进行多次加载的可执行文件。</p></blockquote><p>Then came the 1980s. Programmers were working in C or some other high-level language. As their ambitions grew, so did their programs. Programs that numbered hundreds of thousands of lines of code were not unusual.</p><blockquote><p>时间继续推移到了 20 世纪 80 年代，程序员们在那时己经用上了 C 这样的高级编程语言，程序的规模也得到了进一步的扩大，源代码行数超过几十万行在当时己经是很普遍的事了。</p></blockquote><p>Source modules were compiled from .c files into .o files, and then fed into the linker to create executable files that could be quickly loaded. Compiling each individual module was relatively fast, but compiling all the modules took a bit of time. The linker would then take even more time. Turnaround had again grown to an hour or more in many cases.</p><blockquote><p>于是，源代码模块会从 .c 文件被编译成 .o 文件，然后再由链接器创建出可被 快速加载的可执行文件。那时，虽然编译每个单独模块的速度相对较快，但所有模块的累计编译时间较长，链接过程则耗时更久，整个修改编译周期经常会超过数个小时。</p></blockquote><p>It seemed as if programmers were doomed to endlessly chase their tails. Throughout the 1960s, 1970s, and 1980s, all the changes made to speed up workflow were thwarted by programmers’ ambitions, and the size of the programs they wrote. They could not seem to escape from the hour-long turnaround times. Loading time remained fast, but compile-link times were the bottleneck.</p><blockquote><p>有时候，程序员们看上去似乎就是一直不停地在原地打转。从 20 世纪 60 年代一直到 80 年代，他们所有为提供编译速度所做的努力都被不断增长的程序规模抵消了。程序员好像永远也脱离不了长达几个小时的修改编译周期。程序加载的速度一直都很快，但是其编译和链接的过程也一直是整个开发过程的瓶颈。</p></blockquote><p>We were, of course, experiencing Murphy’s law of program size:</p><blockquote><p>这被我们称为程序规模上的墨菲定律：</p></blockquote><p>Programs will grow to fill all available compile and link time.</p><blockquote><p>程序的规模会一直不断地增长下去，直到将有限的编译和链接时间填满为止。</p></blockquote><p>But Murphy was not the only contender in town. Along came Moore,3 and in the late 1980s, the two battled it out. Moore won that battle. Disks started to shrink and got significantly faster. Computer memory started to get so ridiculously cheap that much of the data on disk could be cached in RAM. Computer clock rates increased from 1 MHz to 100 MHz.</p><blockquote><p>除了墨菲定律，我们还存摩尔定律。在 20 世纪 80 年代，两个定律一直在互相较量，最终以摩尔定律获胜告终。因为磁盘的物理尺寸一直在不断缩小，速度也在不断提高，同时内存的造价也一直在不断降低，以至于大部分存放在磁盘上的数据可以被缓存在内存中了。而计算机时钟频率则从 1 MHz 上升到了 100 MHz。</p></blockquote><p>By the mid-1990s, the time spent linking had begun to shrink faster than our ambitions could make programs grow. In many cases, link time decreased to a matter of seconds. For small jobs, the idea of a linking loader became feasible again.</p><blockquote><p>到了 20 世纪 90 年代中期，链接速度的提升速度已经远远超过了程序规模的增长速度。在大部分情况下，程序链接的时间已经降低到秒级。这对一些小程序来说.即使使用链接加载器也是可以接受的了。</p></blockquote><p>This was the era of Active-X, shared libraries, and the beginnings of .jar files. Computers and devices had gotten so fast that we could, once again, do the linking at load time. We could link together several .jar files, or several shared libraries in a matter of seconds, and execute the resulting program. And so the component plugin architecture was born.</p><blockquote><p>与此同时，编程领域中还诞生了 Active-X、共享库、.jar 文件等组件形式：由于计算与存储速度的大幅提高，我们又可以在加载过程中进行实时链接了，链接几个 .jar 文件或是共享库文件通常只需要几秒钟时间，由此，插件化架构也就随生了。</p></blockquote><p>Today we routinely ship .jar files or DLLs or shared libraries as plugins to existing applications. If you want to create a mod to Minecraft, for example, you simply include your custom .jar files in a certain folder. If you want to plug Resharper into Visual Studio, you simply include the appropriate DLLs.</p><blockquote><p>如今，我们用 .jar 文件、DLL 文件和共享库方式来部署应用的插件已经非常司空见惯了。如果现在我们想要给 Minecraft 增加一个模块，只需要将 .jar 文件放到一个指定的目录中即可。同样的，如果你想给 Visual Studio 增加 Resharper 插件，也只需要安装对应的 DLL 文件即可。</p></blockquote><h2 id="CONCLUSION-本章小结-10"><a href="#CONCLUSION-本章小结-10" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>These dynamically linked files, which can be plugged together at runtime, are the software components of our architectures. It has taken 50 years, but we have arrived at a place where component plugin architecture can be the casual default as opposed to the herculean effort it once was.</p><blockquote><p>我们常常会在程序运行时插入某些动态链接文件，这些动态链接文件所使用的就是软件架构中的组件概念。在经历了 50 年的演进之后，组件化的插件式架构己经成为我们习以为常的软件构建形式了。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap13-COMPONENT-COHESION-组件聚合"><a href="#Chap13-COMPONENT-COHESION-组件聚合" class="headerlink" title="Chap13. COMPONENT COHESION 组件聚合"></a>Chap13. COMPONENT COHESION 组件聚合</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN13.jpg"></p><p>Which classes belong in which components? This is an important decision, and requires guidance from good software engineering principles. Unfortunately, over the years, this decision has been made in an ad hoc manner based almost entirely on context.</p><blockquote><p>那么，究竟是哪些类应该被组合成一个组件呢？这是一个非常重要的设计决策，应该遵循优秀的软件工程经验来行事。但不幸的是，很多年以来，我们对于这么重要的决策经常是根据当下面临的实际情况临时拍脑门决定的。</p></blockquote><p>In this chapter we will discuss the three principles of component cohesion:</p><blockquote><p>在本章中，我们会具体讨论以下三个与构建组件相关的基本原则：</p></blockquote><ul><li>REP: The Reuse&#x2F;Release Equivalence Principle</li><li>CCP: The Common Closure Principle</li><li>CRP: The Common Reuse Principle</li></ul><hr><blockquote><ul><li>REP：复用&#x2F;发布等同原则。</li><li>CCP：共同闭包原则。</li><li>CRP：共同复用原则。</li></ul></blockquote><h2 id="THE-REUSE-x2F-RELEASE-EQUIVALENCE-PRINCIPLE-复用-x2F-发布等同原则"><a href="#THE-REUSE-x2F-RELEASE-EQUIVALENCE-PRINCIPLE-复用-x2F-发布等同原则" class="headerlink" title="THE REUSE&#x2F;RELEASE EQUIVALENCE PRINCIPLE 复用&#x2F;发布等同原则"></a>THE REUSE&#x2F;RELEASE EQUIVALENCE PRINCIPLE 复用&#x2F;发布等同原则</h2><p>The granule of reuse is the granule of release.</p><blockquote><p>软件复用的最小粒度应等同于其发布的最小粒度。</p></blockquote><p>The last decade has seen the rise of a menagerie of module management tools, such as Maven, Leiningen, and RVM. These tools have grown in importance because, during that time, a vast number of reusable components and component libraries have been created. We are now living in the age of software reuse—a fulfillment of one of the oldest promises of the object-oriented model.</p><blockquote><p>过去十年间，模块管理工具得到了长足的发展，例如 Maven、Leiningen、RVM 等。这些工具日益重要的原因是正好在这十年间出现了大量可复用的组件和组件库应该说，我们现在至少已经实现了面向对象编程的一个原始初衷——软件复用。</p></blockquote><p>The Reuse&#x2F;Release Equivalence Principle (REP) is a principle that seems obvious, at least in hindsight. People who want to reuse software components cannot, and will not, do so unless those components are tracked through a release process and are given release numbers.</p><blockquote><p>REP 原则初看起来好像是不言自明的。毕竟如果想要复用某个软件组件的话，一般就必须要求该组件的开发由某种发布流程来驱动，并且有明确的发布版本号。</p></blockquote><p>This is not simply because, without release numbers, there would be no way to ensure that all the reused components are compatible with each other. Rather, it also reflects the fact that software developers need to know when new releases are coming, and which changes those new releases will bring.</p><blockquote><p>这其中的一个原因是，如果没有设定版本号，我们就没有办法保证所有被复用的组件之间能够彼此兼容。另外更重要的一点是，软件开发者必须要能够知道这些组件的发布时间，以及每次发布带来了哪些变更。</p></blockquote><p>It is not uncommon for developers to be alerted about a new release and decide, based on the changes made in that release, to continue to use the old release instead. Therefore the release process must produce the appropriate notifications and release documentation so that users can make informed decisions about when and whether to integrate the new release.</p><blockquote><p>只有这样，软件工程师才能在收到相关组件新版本发布的通知之后，依据该发布所变更的内容来决定是继续使用旧版本还是做些相应的升级，这是很基本的要求。因此，组件的发布过程还必须要能够产生适当的通知和发布文档，以便让它的用户根据这些信息做出有效的升级决策。</p></blockquote><p>From a software design and architecture point of view, this principle means that the classes and modules that are formed into a component must belong to a cohesive group. The component cannot simply consist of a random hodgepodge of classes and modules; instead, there must be some overarching theme or purpose that those modules all share.</p><blockquote><p>从软件设计和架构设汁的角度来看，REP 原则就是指组件中的类与模块必须是 彼此紧密相关的。也就是说，一个组件不能由一组毫无关联的类和模块组成，它们之间应该有一个共同的主题或者大方向。</p></blockquote><p>Of course, this should be obvious. However, there is another way to look at this issue that is perhaps not quite so obvious. Classes and modules that are grouped together into a component should be releasable together. The fact that they share the same version number and the same release tracking, and are included under the same release documentation, should make sense both to the author and to the users.</p><blockquote><p>但从另外一个视角来看，这个原则就没那么简单了。因为根据该原则，一个组件中包含的类与模块还应该是可以同时发布的。这意味着它们共享相同的版本号与版本跟踪，并且包含在相同的发行文档中，这些都应该同时对该组件的作者和用户有意义。</p></blockquote><p>This is weak advice: Saying that something should “make sense” is just a way of waving your hands in the air and trying to sound authoritative. The advice is weak because it is hard to precisely explain the glue that holds the classes and modules together into a single component. Weak though the advice may be, the principle itself is important, because violations are easy to detect—they don’t “make sense.” If you violate the REP, your users will know, and they won’t be impressed with your architectural skills.</p><blockquote><p>这层建议听起来就比较薄弱了，毕竟说某项事情的安排应该“合理”的确有点假大空，不着实际。该建议薄弱的原因是它没有清晰地定义出到底应该如何将类与模块组合成组件。但即使这样，REP 原则的重要性也是毋庸置疑的，因为违反这个原则的后果事实上很明显——一定会有人抱怨你的安排“不合理”，并进而对你的软件架构能力产生怀疑。</p></blockquote><p>The weakness of this principle is more than compensated for by the strength of the next two principles. Indeed, the CCP and the CRP strongly define this principle, but in a negative sense.</p><blockquote><p>而且，REP 原则的上述薄弱性也会由以下两个原则所补充。CCP 和 CRP 会从相反的角度对这个原则进行有力的补偿。</p></blockquote><h2 id="THE-COMMON-CLOSURE-PRINCIPLE-共同闭包原则"><a href="#THE-COMMON-CLOSURE-PRINCIPLE-共同闭包原则" class="headerlink" title="THE COMMON CLOSURE PRINCIPLE 共同闭包原则"></a>THE COMMON CLOSURE PRINCIPLE 共同闭包原则</h2><p>Gather into components those classes that change for the same reasons and at the same times. Separate into different components those classes that change at different times and for different reasons.</p><blockquote><p>我们应该将那些会同时修改，并且为相同目的而修改的类放到同一个组件中，而将不会同时修改，并且不会为了相同目的而修改的那些类放到不同的组件中。</p></blockquote><p>This is the Single Responsibility Principle restated for components. Just as the SRP says that a class should not contain multiples reasons to change, so the Common Closure Principle (CCP) says that a component should not have multiple reasons to change.</p><blockquote><p>这其实是 SRP 原则在组件层面上的再度阐述。正如 SRP 原则中提到的“一个类不应该同时存在着多个变更原因”一样，CCP 原则也认为一个组件不应该同时存在着多个变更原因。</p></blockquote><p>For most applications, maintainability is more important than reusability. If the code in an application must change, you would rather that all of the changes occur in one component, rather than being distributed across many components.1 If changes are confined to a single component, then we need to redeploy only the one changed component. Other components that don’t depend on the changed component do not need to be revalidated or redeployed.</p><blockquote><p>对大部分应用程序来说，可维护性的重要性要远远高于可复用性。如果某程序中的代码必须要进行某些变更，那么这些变更最好都体现在同一个组件中，而不是分布于很多个组件中打因为如果这些变更都集中在同一个组件中，我们就只需要重新部署该组件，其他组件则不需要被重新验证、重新部署了。</p></blockquote><p>The CCP prompts us to gather together in one place all the classes that are likely to change for the same reasons. If two classes are so tightly bound, either physically or conceptually, that they always change together, then they belong in the same component. This minimizes the workload related to releasing, revalidating, and redeploying the software.</p><blockquote><p>总而言之，CCP 的主要作用就是提示我们要将所有可能会被一起修改的类集中在一处。也就是说，如果两个类紧密相关，不管是源代码层面还是抽象理念层面，永远都会被一起修改，那么它们就应该被归属为同一个组件。通过遵守这个原则，我们就可以有效地降低因软件发布、验证及部署所带来的工作压力。</p></blockquote><p>This principle is closely associated with the Open Closed Principle (OCP). Indeed, it is “closure” in the OCP sense of the word that the CCP addresses. The OCP states that classes should be closed for modification but open for extension. Because 100% closure is not attainable, closure must be strategic. We design our classes such that they are closed to the most common kinds of changes that we expect or have experienced.</p><blockquote><p>另外 CCP 原则和开闭原则（OCP）也是紧密相关的。CCP 讨论的就是 OCP 中所指的“闭包”。OCP 原则认为一个类应该便于扩展，而抗拒修改。由于 100% 的闭包是不可能的，所以我们只能战略性地选择闭包范围。在设计类的时候，我们需要根据历史经验和预测能力，尽可能地将需要被一同变更的那些点聚合在一起。</p></blockquote><p>The CCP amplifies this lesson by gathering together into the same component those classes that are closed to the same types of changes. Thus, when a change in requirements comes along, that change has a good chance of being restricted to a minimal number of components.</p><blockquote><p>对于 CCP，我们还可以在此基础上做进一步的延伸，即可以将某一类变更所涉及的所有类尽量聚合在一处。这样当此类变更出现时，我们就可以最大限度地做到使该类变更只影响到有限的相关组件。</p></blockquote><h3 id="SIMILARITY-WITH-SRP-与-SRP-原则的相似点"><a href="#SIMILARITY-WITH-SRP-与-SRP-原则的相似点" class="headerlink" title="SIMILARITY WITH SRP 与 SRP 原则的相似点"></a>SIMILARITY WITH SRP 与 SRP 原则的相似点</h3><p>As stated earlier, the CCP is the component form of the SRP. The SRP tells us to separate methods into different classes, if they change for different reasons. The CCP tells us to separate classes into different components, if they change for different reasons. Both principles can be summarized by the following sound bite:</p><blockquote><p>如前所述，CCP 原则实际上就是 SRP 原则的组件版。在 SRP 原则的指导下，我们将会把变更原因不同的函数放入不同的类中。而 CCP 原则指导我们应该将变更原因不同的类放入不同的组件中。简而言之，这两个原则都可以用以下一句简短的话来概括：</p></blockquote><p>Gather together those things that change at the same times and for the same reasons. Separate those things that change at different times or for different reasons.</p><blockquote><p>将由于相同原因而修改，并且需要同时修改的东西放在一起，将由于不同原因而修改，并且不同时修改的东西分开。</p></blockquote><h2 id="THE-COMMON-REUSE-PRINCIPLE-共同复用原则"><a href="#THE-COMMON-REUSE-PRINCIPLE-共同复用原则" class="headerlink" title="THE COMMON REUSE PRINCIPLE 共同复用原则"></a>THE COMMON REUSE PRINCIPLE 共同复用原则</h2><p>Don’t force users of a component to depend on things they don’t need.</p><blockquote><p>不要强迫一个组件的用户依赖他们不需要的东西。</p></blockquote><p>The Common Reuse Principle (CRP) is yet another principle that helps us to decide which classes and modules should be placed into a component. It states that classes and modules that tend to be reused together belong in the same component.</p><blockquote><p>共同复用原则（CRP）是另外一个帮助我们决策类和模块归属于哪一个组件的原则。该原则建议我们将经常共同复用的类和模块放在同一个组件中。</p></blockquote><p>Classes are seldom reused in isolation. More typically, reusable classes collaborate with other classes that are part of the reusable abstraction. The CRP states that these classes belong together in the same component. In such a component we would expect to see classes that have lots of dependencies on each other.</p><blockquote><p>通常情况下，类很少会被单独复用。更常见的情况是多个类同时作为某个可复用的抽象定义被共同复用。CRP 原则指导我们将这些类放在同一个组件中，而在这样的组件中，我们应该预见到会存在着许多互相依赖的类。</p></blockquote><p>A simple example might be a container class and its associated iterators. These classes are reused together because they are tightly coupled to each other. Thus they ought to be in the same component.</p><blockquote><p>一个简单的例子就是容器类与其相关的遍历器类，这些类之间通常是紧密相关的，一般会被共同复用，因此应该被放置在同一个组件中。</p></blockquote><p>But the CRP tells us more than just which classes to put together into a component: It also tells us which classes not to keep together in a component. When one component uses another, a dependency is created between the components. Perhaps the using component uses only one class within the used component—but that still doesn’t weaken the dependency. The using component still depends on the used component.</p><blockquote><p>但是 CRP 的作用不仅是告诉我们应该将哪些类放在一起，更重要的是要告诉我们应该将哪些类分开。因为每当一个组件引用了另一个组件时，就等于增加了一条依赖关系。虽然这个引用关系仅涉及被引用组件中的一个类，但它所带来的依赖关系丝毫没有减弱。也就是说，引用组件已然依赖于被引用组件了。</p></blockquote><p>Because of that dependency, every time the used component is changed, the using component will likely need corresponding changes. Even if no changes are necessary to the using component, it will likely still need to be recompiled, revalidated, and redeployed. This is true even if the using component doesn’t care about the change made in the used component.</p><blockquote><p>由于这种依赖关系的存在，每当被引用组件发生变更时，引用它的组件一般也需要做出相应的变更。即使它们不需要进行代码级的变更，一般也免不了需要被重新编译、验证和部署。哪怕引用组件根本不关心被引用组件中的变更，也要如此。</p></blockquote><p>Thus when we depend on a component, we want to make sure we depend on every class in that component. Put another way, we want to make sure that the classes that we put into a component are inseparable—that it is impossible to depend on some and not on the others. Otherwise, we will be redeploying more components than is necessary, and wasting significant effort.</p><blockquote><p>因此，当我们决定要依赖某个组件时，最好是实际需要依赖该组件中的每个类。换句话说，我们希望组件中的所有类是不能拆分的，即不应该出现别人只需要依赖它的某几个类而不需要其他类的情况。否则，我们后续就会浪费不少时间与精力来做不必要的组件部署。</p></blockquote><p>Therefore the CRP tells us more about which classes shouldn’t be together than about which classes should be together. The CRP says that classes that are not tightly bound to each other should not be in the same component.</p><blockquote><p>因此在 CRP 原则中，关于哪些类不应该被放在一起的建议是其更为重要的内容。简而言之，CRP 原则实际上是在指导我们：不是紧密相连的类不应该被放在同一个组件里。</p></blockquote><h3 id="RELATION-TO-ISP-与-ISP-原则的关系"><a href="#RELATION-TO-ISP-与-ISP-原则的关系" class="headerlink" title="RELATION TO ISP 与 ISP 原则的关系"></a>RELATION TO ISP 与 ISP 原则的关系</h3><p>The CRP is the generic version of the ISP. The ISP advises us not to depend on classes that have methods we don’t use. The CRP advises us not to depend on components that have classes we don’t use.</p><blockquote><p>CRP 原则实际上是 LSP 原则的一个普适版。ISP 原则是建议我们不要依赖带有不需要的函数的类，而 CRP 原则则是建议我们不要依赖带有不需要的类的组件。不要依赖不需要用到的东西。</p></blockquote><p>All of this advice can be reduced to a single sound bite:</p><p>Don’t depend on things you don’t need.</p><h2 id="THE-TENSION-DIAGRAM-FOR-COMPONENT-COHESION-组件聚合张力图"><a href="#THE-TENSION-DIAGRAM-FOR-COMPONENT-COHESION-组件聚合张力图" class="headerlink" title="THE TENSION DIAGRAM FOR COMPONENT COHESION 组件聚合张力图"></a>THE TENSION DIAGRAM FOR COMPONENT COHESION 组件聚合张力图</h2><p>You may have already realized that the three cohesion principles tend to fight each other. The REP and CCP are inclusive principles: Both tend to make components larger. The CRP is an exclusive principle, driving components to be smaller. It is the tension between these principles that good architects seek to resolve.</p><blockquote><p>读到这里，读者可能已经意识到上述三个原则之间彼此存在着竞争关系。REP 和 CCP 原则是黏合性原则，它们会让组件变得更大，而 CRP 原则是排除性原则，它会尽量让组件变小。软件架构师的任务就是要在这三个原则中间进行取舍。</p></blockquote><p>Figure 13.1 is a tension diagram2 that shows how the three principles of cohesion interact with each other. The edges of the diagram describe the cost of abandoning the principle on the opposite vertex.</p><blockquote><p>下面我们来看一下图 13.1。这是一张组件聚合三大原则的张力图，图的边线所描述的是忽视对应原则的后果。</p></blockquote><p><Figures figure="13-1">Cohesion principles tension diagram</Figures></p><p>An architect who focuses on just the REP and CRP will find that too many components are impacted when simple changes are made. In contrast, an architect who focuses too strongly on the CCP and REP will cause too many unneeded releases to be generated.</p><blockquote><p>简而言之，只关注 REP 和 CRP 的软件架构师会发现，即使是简单的变更也会同时影响到许多组件。相反，如果软件架构师过于关注 CCP 和 REP，则会导致很多不必要的发布。</p></blockquote><p>A good architect finds a position in that tension triangle that meets the current concerns of the development team, but is also aware that those concerns will change over time. For example, early in the development of a project, the CCP is much more important than the REP, because develop-ability is more important than reuse.</p><blockquote><p>优秀的软件架构师应该能在上述三角张力区域中定位一个最适合目前研发团队状态的位置，同时也会根据时间不停调整。例如在项目早期，CCP 原则会比 REP 原则更重要，因为在这一阶段研发速度比复用性更重要。</p></blockquote><p>Generally, projects tend to start on the right hand side of the triangle, where the only sacrifice is reuse. As the project matures, and other projects begin to draw from it, the project will slide over to the left. This means that the component structure of a project can vary with time and maturity. It has more to do with the way that project is developed and used, than with what the project actually does.</p><blockquote><p>一般来说，一个软件项目的重心会从该三角区域的右侧开始，先期主要牺牲的是复用性。然后，随着项目逐渐成熟，其他项目会逐渐开始对其产生依赖，项目重心就会逐渐向该二角区域的左侧滑动。换句话说，一个项目在组件结构设计上的重心是根据该项目的开发时间和成熟度不断变动的，我们对组件结构的安排主要与项目开发的进度和它被使用的方式有关，与项目本身功能的关系其实很小。</p></blockquote><h2 id="CONCLUSION-本章小结-11"><a href="#CONCLUSION-本章小结-11" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>In the past, our view of cohesion was much simpler than the REP, CCP, and CRP implied. We once thought that cohesion was simply the attribute that a module performs one, and only one, function. However, the three principles of component cohesion describe a much more complex variety of cohesion. In choosing the classes to group together into components, we must consider the opposing forces involved in reusability and develop-ability. Balancing these forces with the needs of the application is nontrivial. Moreover, the balance is almost always dynamic. That is, the partitioning that is appropriate today might not be appropriate next year. As a consequence, the composition of the components will likely jitter and evolve with time as the focus of the project changes from develop-ability to reusability.</p><blockquote><p>过去，我们对组件在构建过程中要遵循的组合原则的理解要比 REP、CCP、CRP 这三个原则更有限。我们最初所理解的组合原则可能完全基于单一职责原则。然而，本章介绍的这三个原则为我们描述了一个更为复杂的决策过程。在决定将哪些类归为同一个组件时，必须要考虑到研发性与复用性之间的矛盾，并根据应用程序的需要来平衡这两个矛盾，这是一件很不容易的事。而且，这种平衡本身也在不断变化。也就是说，当下适用的分割方式可能明年就不再适用了。所以，组件的构成安排应随着项目重心的不同，以及研发性与复用性的不同而不断演化。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap14-COMPONENT-COUPLING-组件耦合"><a href="#Chap14-COMPONENT-COUPLING-组件耦合" class="headerlink" title="Chap14. COMPONENT COUPLING 组件耦合"></a>Chap14. COMPONENT COUPLING 组件耦合</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN14.jpg"></p><p>The next three principles deal with the relationships between components. Here again we will run into the tension between develop-ability and logical design. The forces that impinge upon the architecture of a component structure are technical, political, and volatile.</p><blockquote><p>接下来要讨论的三条原则主要关注的是组件之间的关系。在这些原则中，我们同样会面临着研发能力和逻辑设计之间的冲突。毕竟，影响组件结构的不仅有技术水平和公司内部政治斗争这两个因素，其结构本身更是不断变化的。</p></blockquote><h2 id="THE-ACYCLIC-DEPENDENCIES-PRINCIPLE-无依赖环原则"><a href="#THE-ACYCLIC-DEPENDENCIES-PRINCIPLE-无依赖环原则" class="headerlink" title="THE ACYCLIC DEPENDENCIES PRINCIPLE 无依赖环原则"></a>THE ACYCLIC DEPENDENCIES PRINCIPLE 无依赖环原则</h2><p>Allow no cycles in the component dependency graph.</p><blockquote><p>组件依赖关系图中不应该出现环。</p></blockquote><p>Have you ever worked all day, gotten some stuff working, and then gone home, only to arrive the next morning to find that your stuff no longer works? Why doesn’t it work? Because somebody stayed later than you and changed something you depend on! I call this “the morning after syndrome.”</p><blockquote><p>我们一定都有过这样的经历：当你花了一整天的时间，好不容易搞定了一段代码，第二天上班时却发现这段代码莫名其妙地又不能工作了。这通常是因为有人在你走后修改了你所依赖的某个组件。我给这种情况起了个名字——“一觉醒来综合征”。</p></blockquote><p>The “morning after syndrome” occurs in development environments where many developers are modifying the same source files. In relatively small projects with just a few developers, it isn’t too big a problem. But as the size of the project and the development team grow, the mornings after can get pretty nightmarish. It is not uncommon for weeks to go by without the team being able to build a stable version of the project. Instead, everyone keeps on changing and changing their code trying to make it work with the last changes that someone else made.</p><blockquote><p>这种综合征的主要病因是多个程序员同时修改了同一个源代码文件。虽然在规模相对较小、人员较少的项目中，这种问题或许并不严重，但是随着项目的增长，研发人员的增加，这种每天早上刚上班时都要经历一遍的痛苦就会越来越多。甚至会严重到让有的团队在长达数周的时间内都不能发布一个稳定的项目版本，因为每个人都在不停地修改自己的代码，以适应其他人所提交的变更。</p></blockquote><p>Over the last several decades, two solutions to this problem have evolved, both of which came from the telecommunications industry. The first is “the weekly build,” and the second is the Acyclic Dependencies Principle (ADP).</p><blockquote><p>在过去几十年中，针对这个问题逐渐演化出了两种解决方案，它们都来自电信行业。第一种是“每周构建”，第二种是“无依赖环原则（ADP）”。</p></blockquote><h3 id="THE-WEEKLY-BUILD-每周构建"><a href="#THE-WEEKLY-BUILD-每周构建" class="headerlink" title="THE WEEKLY BUILD 每周构建"></a>THE WEEKLY BUILD 每周构建</h3><p>The weekly build used to be common in medium-sized projects. It works like this: All the developers ignore each other for the first four days of the week. They all work on private copies of the code, and don’t worry about integrating their work on a collective basis. Then, on Friday, they integrate all their changes and build the system.</p><blockquote><p>每周构建方案是中型项目中很常见的一种管理手段。其具体做法如下：在每周的前四天中，让所有的程序员在自己的私有库上工作，忽略其他人的修改，也不考虑互相之间的集成问题；然后在每周五要求所有人将自己所做的变更提交，进行统一构建。</p></blockquote><p>This approach has the wonderful advantage of allowing the developers to live in an isolated world for four days out of five. The disadvantage, of course, is the large integration penalty that is paid on Friday.</p><blockquote><p>上述方案确实可以让程序员每周都有四天的时间放手干活。然而一到星期五，所有人都必须要花费大量的精力来处理前四天留下来的问题。</p></blockquote><p>Unfortunately, as the project grows, it becomes less feasible to finish integrating the project on Friday. The integration burden grows until it starts to overflow into Saturday. A few such Saturdays are enough to convince the developers that integration should really begin on Thursday—and so the start of integration slowly creeps toward the middle of the week.</p><blockquote><p>而且更不幸的是，随着项目越来越大，每周五的集成工作会越来越难以按时完成。而随着集成任务越来越重，周六的加班也会变得越来越频繁。经历过几次这样的加班之后，就会有人提出应该将集成任务提前到星期四开始，就这样一步一步地，集成工作漫漫地就要占用掉差不多半周的时间。</p></blockquote><p>As the duty cycle of development versus integration decreases, the efficiency of the team decreases, too. Eventually this situation becomes so frustrating that the developers, or the project managers, declare that the schedule should be changed to a biweekly build. This suffices for a time, but the integration time continues to grow with project size.</p><blockquote><p>事实上，这个问题最终还会造成更大的麻烦。因为如果我们想歩保持高效率的开发，就不能频繁地进行构建操作，但是如果我们减少了构建次数，延长了项目被构建的时间间隔，又会影响到该项目的质量，增大它的风险。整个项目会变得越来越难以构建与测试，团队反馈周期会越来越长，研发质量自然也会越来越差。</p></blockquote><p>Eventually, this scenario leads to a crisis. To maintain efficiency, the build schedule has to be continually lengthened—but lengthening the build schedule increases project risks. Integration and testing become increasingly harder to do, and the team loses the benefit of rapid feedback.</p><h3 id="ELIMINATING-DEPENDENCY-CYCLES-消除循环依赖"><a href="#ELIMINATING-DEPENDENCY-CYCLES-消除循环依赖" class="headerlink" title="ELIMINATING DEPENDENCY CYCLES 消除循环依赖"></a>ELIMINATING DEPENDENCY CYCLES 消除循环依赖</h3><p>The solution to this problem is to partition the development environment into releasable components. The components become units of work that can be the responsibility of a single developer, or a team of developers. When developers get a component working, they release it for use by the other developers. They give it a release number and move it into a directory for other teams to use. They then continue to modify their component in their own private areas. Everyone else uses the released version.</p><blockquote><p>对于上述情景，我们的解决办法是将研发项目划分为一些可单独发布的组件，这些组件可以交由单人或者某一组程序员来独立完成。当有人或团队完成某个组件的某个版本时，他们就会通过发布机制通知其他程序员，并给该组件打一个版本号，放入一个共享目录。这样一来，每个人都可以依赖于这些组件公开发布的版本来进行开发，而组件开发者则可以继续去修改自己的私有版本。</p></blockquote><p>As new releases of a component are made available, other teams can decide whether they will immediately adopt the new release. If they decide not to, they simply continue using the old release. Once they decide that they are ready, they begin to use the new release.</p><blockquote><p>每当一个组件发布新版本时，其他依赖这个组件的团队都可以自主决定是否立即采用新版本。若不采用，该团队可以选择继续使用旧版组件，直到他们准备好采用新版本为止。</p></blockquote><p>Thus no team is at the mercy of the others. Changes made to one component do not need to have an immediate affect on other teams. Each team can decide for itself when to adapt its own components to new releases of the components. Moreover, integration happens in small increments. There is no single point in time when all developers must come together and integrate everything they are doing.</p><blockquote><p>这样就不会出现团队之间相互依赖的情况了。任何一个组件上的变更都不会立刻影响到其他团队。每个团队都可以自主决定是否立即集成自己所依赖组件的新版本。更重要的是，这种方法使我们的集成工作能以一种小型渐进的方式来进行。程序员们再也不需要集中在一起，统一集成相互的变更了。</p></blockquote><p>This is a very simple and rational process, and it is widely used. To make it work successfully, however, you must manage the dependency structure of the components. There can be no cycles. If there are cycles in the dependency structure, then the “morning after syndrome” cannot be avoided.</p><blockquote><p>如你所见，上述整个过程既简单又很符合逻辑，因而得到了各个研发团队的广泛采用。但是，如果想要成功推广这个开发流程，就必须控制好组件之间的依赖结构，绝对不能允许该结构中存在着循环依赖关系。如果某项目结构中存在着循环依赖关系，那么“一觉醒来综合征”将是不可避免的。</p></blockquote><p>Consider the component diagram in Figure 14.1. It shows a rather typical structure of components assembled into an application. The function of this application is unimportant for the purpose of this example. What is important is the dependency structure of the components. Notice that this structure is a directed graph. The components are the nodes, and the dependency relationships are the directed edges.</p><blockquote><p>下面让我们来看看图 14.1，该图展示了一个典型应用程序的组件结构。当然，这个应用程序的具体功能与我们要讨论的无关，真正重要的是其组件之间的依赖结构。我们应该可以注意到，该组件依赖结构所呈现的是一个有向图，图中的每个节点都是一个项目组件，依赖关系就是有向图中的边。</p></blockquote><p><Figures figure="14-1">Typical component diagram</Figures></p><p>Notice one more thing: Regardless of which component you begin at, it is impossible to follow the dependency relationships and wind up back at that component. This structure has no cycles. It is a directed acyclic graph (DAG).</p><blockquote><p>更重要的是，不管我们从该图中的哪个节点开始，都不能沿着这些代表了依赖关系的边最终走回到起始点。也就是说，这种结构中不存在坏，我们称这种结构为有向无环图（Directed Acyclic Graph，简写为 DAG）。</p></blockquote><p>Now consider what happens when the team responsible for Presenters makes a new release of their component. It is easy to find out who is affected by this release; you just follow the dependency arrows backward. Thus View and Main will both be affected. The developers currently working on those components will have to decide when they should integrate their work with the new release of Presenters.</p><blockquote><p>现在，如果负责 Presenters 组件的团队需要发布一个新版本，我们就应该很容易判断出哪些组件会受这个变更的影响——只需要按其依赖关系反向追溯即可。显然在图 14.1 中，View 和 Main 是同时会被影响的两个组件。这两个组件的研发团队需要决定是否采用 Presenters 组件的新版本。</p></blockquote><p>Notice also that when Main is released, it has utterly no effect on any of the other components in the system. They don’t know about Main, and they don’t care when it changes. This is nice. It means that the impact of releasing Main is relatively small.</p><blockquote><p>另外值得注意的是，当 Main 组件发布新版本时，它对系统中的其他组件根本就没有影响，既没有一个组件依赖于 Main，也就没有人关系 Main 组件上发生的变更。这太好了，至少表示我们在发布 Main 的新版本时，可以不必考虑它对整个项目微乎其微的影响。</p></blockquote><p>When the developers working on the Presenters component would like to run a test of that component, they just need to build their version of Presenters with the versions of the Interactors and Entities components that they are currently using. None of the other components in the system need be involved. This is nice. It means that the developers working on Presenters have relatively little work to do to set up a test, and that they have relatively few variables to consider.</p><blockquote><p>当 Presenters 组件的程序员们需要进行一次测试时，他们只需将对应版本的 Presenters 和 Interactors 及 Entities 的当前版本一起构建并测试即可，其他的组件不需要做任何修改。这可以让编写 Presenters 组件的程序员们在编写测试时考虑更少的变量，工作量更小。</p></blockquote><p>When it is time to release the whole system, the process proceeds from the bottom up. First the Entities component is compiled, tested, and released. Then the same is done for Database and Interactors. These components are followed by Presenters, View, Controllers, and then Authorizer. Main goes last. This process is very clear and easy to deal with. We know how to build the system because we understand the dependencies between its parts.</p><blockquote><p>当我们需要发布整个系统时，可以让整个过程从下至上来进行。貝体来说就是首先对 Entities 组件进行编译、测试、发布。随后是 Database 和 Interactors 这两个组件。再紧随其后的是 Presenters、View、Controllers，以及 Authorizer 四个组件。最后是 Main 组件。这样一来，整个流程会非常清晰，也很容易。只要我们了解系统各部分之间的依赖关系，构建整套系统就会变得很容易。</p></blockquote><h3 id="THE-EFFECT-OF-A-CYCLE-IN-THE-COMPONENT-DEPENDENCY-GRAPH-循环依赖在组件依赖图中的影响"><a href="#THE-EFFECT-OF-A-CYCLE-IN-THE-COMPONENT-DEPENDENCY-GRAPH-循环依赖在组件依赖图中的影响" class="headerlink" title="THE EFFECT OF A CYCLE IN THE COMPONENT DEPENDENCY GRAPH 循环依赖在组件依赖图中的影响"></a>THE EFFECT OF A CYCLE IN THE COMPONENT DEPENDENCY GRAPH 循环依赖在组件依赖图中的影响</h3><p>Suppose that a new requirement forces us to change one of the classes in Entities such that it makes use of a class in Authorizer. For example, let’s say that the User class in Entities uses the Permissions class in Authorizer. This creates a dependency cycle, as shown in Figure 14.2.</p><blockquote><p>假设某个新需求使我们修改了 Entities 组件中的某个类，而这个类又依赖于 Authorizer 组件中的某个类。例如，Entities 组件中的 User 类使用了 Authorizer 组件中的 Permissions 类。这就形成了一个循环依赖关系，如图 14.2 所示。</p></blockquote><p>This cycle creates some immediate problems. For example, the developers working on the Database component know that to release it, the component must be compatible with Entities. However, with the cycle in place, the Database component must now also be compatible with Authorizer. But Authorizer depends on Interactors. This makes Database much more difficult to release. Entities, Authorizer, and Interactors have, in effect, become one large component—which means that all of the developers working on any of those components will experience the dreaded “morning after syndrome.” They will be stepping all over one another because they must all use exactly the same release of one another’s components.</p><blockquote><p>这种循环依赖立刻就会给我们的项目带来麻烦。例如，当 Database 组件的程序员需要发布新版本时，他们需要与 Entities 组件进行集成。但现在由于出现了循环依赖，Database 组件就必须也要与 Authorizer 组件兼容，而 Authorizer 组件又依赖于 Interactors 组件。这样一来，Database 组件的发布就会变得非常困难。在这里，Entities、Authorizer 及 Interactors 这三个组件事实上被合并成一个更大的组件。这些组件的程序员现在会互相形成干扰，因为他们在开发中都必须使用完全相同的组件版本。</p></blockquote><p><Figures figure="14-2">A dependency cycle</Figures></p><p>But this is just part of the trouble. Consider what happens when we want to test the Entities component. To our chagrin, we find that we must build and integrate with Authorizer and Interactors. This level of coupling between components is troubling, if not intolerable.</p><blockquote><p>这还只是问题的冰山一角，请想象一下我们在测试 Entities 组件时会发生什么？情况会让人触目惊心我们会发现自己必须将 Authorizer 和 Interactors 集成到一起测试。即使这不是不能容忍的事，但至少这些组件之间的耦合度也是非常令人不安的。</p></blockquote><p>You may have wondered why you have to include so many different libraries, and so much of everybody else’s stuff, just to run a simple unit test of one of your classes. If you investigate the matter a bit, you will probably discover that there are cycles in the dependency graph. Such cycles make it very difficult to isolate components. Unit testing and releasing become very difficult and error prone. In addition, build issues grow geometrically with the number of modules.</p><blockquote><p>很显然，这样一个小小的测试必须要依赖大量的库就是因为其组件结构依赖图中存在的这个循环依赖。这种循环依赖会使得组件的独立维护工作变得十分困难。不仅如此，单元测试和发布流程也都会变得非常困难，并且很容易出错。此外，项目在构建中出现的问题会随着组件数量的增多而呈现出几何级数的增长。</p></blockquote><p>Moreover, when there are cycles in the dependency graph, it can be very difficult to work out the order in which you must build the components. Indeed, there probably is no correct order. This can lead to some very nasty problems in languages like Java that read their declarations from compiled binary files.</p><blockquote><p>所以，当组件结构依赖图中存在循环依赖时，想要按正确的顺序构建组件几乎是不可能的。这种依赖关系将会在 Java 这种需要在编译好的二级制文件中读取声明信息的语言中导致一些非常棘手的问题。</p></blockquote><h3 id="BREAKING-THE-CYCLE-打破循环依赖"><a href="#BREAKING-THE-CYCLE-打破循环依赖" class="headerlink" title="BREAKING THE CYCLE 打破循环依赖"></a>BREAKING THE CYCLE 打破循环依赖</h3><p>It is always possible to break a cycle of components and reinstate the dependency graph as a DAG. There are two primary mechanisms for doing so:</p><blockquote><p>当然，我们可以打破这些组件中的循环依赖，并将其依赖图转化为 DAG。目前有以下两种主要机制可以做到这件事情。</p></blockquote><ol><li>Apply the Dependency Inversion Principle (DIP). In the case in Figure 14.3, we could create an interface that has the methods that User needs. We could then put that interface into Entities and inherit it into Authorizer. This inverts the dependency between Entities and Authorizer, thereby breaking the cycle.</li></ol><blockquote><ol><li>应用依赖反转原则（DIP）：在图 14.3 中，我们可以创建一个 User 类需要使用的接口，然后将这个接口放入 Entities 组件，并在 Authorizer 组件中继承它。这样就将 Entities 与 Authorizer 之间的依赖关系反转了，自然也就打破了循环依赖关系。</li></ol></blockquote><p><Figures figure="14-3">Inverting the dependency between Entities and Authorizer</Figures></p><ol start="2"><li>Create a new component that both Entities and Authorizer depend on. Move the class(es) that they both depend on into that new component (Figure 14.4).</li></ol><blockquote><ol start="2"><li>创建一个新的组件，并让 Entities 与 Authorize 这两个组件都依赖于它。将现有的这两个组件中互相依赖的类全部放入新组件（如图 14.4 所示）。</li></ol></blockquote><p><Figures figure="14-4">The new component that both Entities and Authorizer depend on</Figures></p><h3 id="THE-“JITTERS”-“抖动”"><a href="#THE-“JITTERS”-“抖动”" class="headerlink" title="THE “JITTERS” “抖动”"></a>THE “JITTERS” “抖动”</h3><p>The second solution implies that the component structure is volatile in the presence of changing requirements. Indeed, as the application grows, the component dependency structure jitters and grows. Thus the dependency structure must always be monitored for cycles. When cycles occur, they must be broken somehow. Sometimes this will mean creating new components, making the dependency structure grow.</p><blockquote><p>当然，采用第二种解决方案也意味着在需求变更时，项目的组件结构也要随之变更。确实是这样的，随着应用程序的不断演进，其组件结构也会不停地抖动和扩张。因此，我们必须要持续地监控顶目中的循环依赖关系。当循环依赖出现时，必须以某种力式消除它们。为此，我们有时候不可避免地需要创建新的组件，而使整个组件结构变得更大。</p></blockquote><h2 id="TOP-DOWN-DESIGN-自上而下的设计"><a href="#TOP-DOWN-DESIGN-自上而下的设计" class="headerlink" title="TOP-DOWN DESIGN 自上而下的设计"></a>TOP-DOWN DESIGN 自上而下的设计</h2><p>The issues we have discussed so far lead to an inescapable conclusion: The component structure cannot be designed from the top down. It is not one of the first things about the system that is designed, but rather evolves as the system grows and changes.</p><blockquote><p>根据上述讨论，我们可以得出一个无法逃避的结论：组件结构图是不可能自上而下被设计出来的。它必须随着软件系统的变化而变化和扩张，而不可能在系统构建的最初就被完美设计出来。</p></blockquote><p>Some readers may find this point to be counterintuitive. We have come to expect that large-grained decompositions, like components, will also be high-level functional decompositions.</p><blockquote><p>有些读者可能会觉得这个结论有些反直觉。人们通常会直观地认为，代表项目粗粒度的结构单元，也就是组件，应该与顶层设计中的功能单元是相对应的。</p></blockquote><p>When we see a large-grained grouping such as a component dependency structure, we believe that the components ought to somehow represent the functions of the system. Yet this does not seem to be an attribute of component dependency diagrams.</p><blockquote><p>同样的，人们也普遍认为项目粗粒度的组件分组规则所产生的就是组件的依赖结构，也应该在某种程度上与项目的系统功能分解的结果相互对应。但是很明显，组件依赖关系图其实不具备这样的属性。</p></blockquote><p>In fact, component dependency diagrams have very little do to with describing the function of the application. Instead, they are a map to the buildability and maintainability of the application. This is why they aren’t designed at the beginning of the project. There is no software to build or maintain, so there is no need for a build and maintenance map. But as more and more modules accumulate in the early stages of implementation and design, there is a growing need to manage the dependencies so that the project can be developed without the “morning after syndrome.” Moreover, we want to keep changes as localized as possible, so we start paying attention to the SRP and CCP and collocate classes that are likely to change together.</p><blockquote><p>事实上，组件依赖结构图并不是用来描述应用程序功能的，它更像是应用程序在构建性与维护性方面的一张地图。这就是组件的依赖结构图不能在项目的开始阶段被设计出来的原因——当时该项目还没有任何被构建和维护的需要，自然也就不需要一张地图来指引。然而，随着早期被设计并实现出来的模块越来越多，项目中就逐渐出现了要对组件依赖关系进行管理的需求，以此来预防“一觉醒来综合征”的爆发。除此之外，我们还希望将项目变更所影响的范围被限制得越小越好，因此需要应用单一职责原则（SRP）和共同闭包原则（CCP）来将经常同时被变更的类聚合在一起。</p></blockquote><p>One of the overriding concerns with this dependency structure is the isolation of volatility. We don’t want components that change frequently and for capricious reasons to affect components that otherwise ought to be stable. For example, we don’t want cosmetic changes to the GUI to have an impact on our business rules. We don’t want the addition or modification of reports to have an impact on our highest-level policies. Consequently, the component dependency graph is created and molded by architects to protect stable high-value components from volatile components.</p><blockquote><p>组件结构图中的一个重要目标是指导如何隔离频繁的变更。我们不希望那些频繁变更的组件影响到其他本来应该很稳定的组件，例如，我们通常不会希望无关紧要的 GUI 变更影响到业务逻辑组件；我们也不希望对报表的增删操作影响到其高阶策略。出于这样的考虑，软件架构师们才有必要设计并且铸造出一套组件依赖关系图来，以便将稳定的高价值组件与常变的组件隔离开，从而起到保护作用。</p></blockquote><p>As the application continues to grow, we start to become concerned about creating reusable elements. At this point, the CRP begins to influence the composition of the components. Finally, as cycles appear, the ADP is applied and the component dependency graph jitters and grows.</p><blockquote><p>另外，随着应用程序的增长，创建可重用组件的需要也会逐渐重要起来。这时 CRP 又会开始影响组件的组成。最后当循环依赖出现时，随着无循环依赖原则（ADP）的应用，组件依赖关系会产生相应的抖动和扩张。</p></blockquote><p>If we tried to design the component dependency structure before we designed any classes, we would likely fail rather badly. We would not know much about common closure, we would be unaware of any reusable elements, and we would almost certainly create components that produced dependency cycles. Thus the component dependency structure grows and evolves with the logical design of the system.</p><blockquote><p>如果我们在设计具体类之前就来设计组件依赖关系，那么几乎是必然要失败的。因为在当下，我们对项目中的共同闭包一无所知，也不可能知道哪些组件可以复用，这样几乎一定会创造出循环依赖的组件。因此，组件依赖关系是必须要随着项目的逻辑设计一起扩张和演进的。</p></blockquote><h2 id="THE-STABLE-DEPENDENCIES-PRINCIPLE-稳定依赖原则"><a href="#THE-STABLE-DEPENDENCIES-PRINCIPLE-稳定依赖原则" class="headerlink" title="THE STABLE DEPENDENCIES PRINCIPLE 稳定依赖原则"></a>THE STABLE DEPENDENCIES PRINCIPLE 稳定依赖原则</h2><p>Depend in the direction of stability.</p><blockquote><p>依赖关系必须要指向更稳定的方向。</p></blockquote><p>Designs cannot be completely static. Some volatility is necessary if the design is to be maintained. By conforming to the Common Closure Principle (CCP), we create components that are sensitive to certain kinds of changes but immune to others. Some of these components are designed to be volatile. We expect them to change.</p><blockquote><p>设计这件事不可能是完全静止的，如果我们要让一个设计是可维护的，那么其中某些部分就必须是可变的。通过遵守共同闭包原则（CCP），我们可以创造出对某些变更敏感，对其他变更不敏感的组件。这其中的一些组件在设计上就已经是考虑了易变性，预期它们会经常发生变更的。</p></blockquote><p>Any component that we expect to be volatile should not be depended on by a component that is difficult to change. Otherwise, the volatile component will also be difficult to change.</p><blockquote><p>任何一个我们预期会经常变更的组件都不应该被一个难于修改的组件所依赖，否则这个多变的组件也将会变得非常难以被修改。</p></blockquote><p>It is the perversity of software that a module that you have designed to be easy to change can be made difficult to change by someone else who simply hangs a dependency on it. Not a line of source code in your module need change, yet your module will suddenly become more challenging to change. By conforming to the Stable Dependencies Principle (SDP), we ensure that modules that are intended to be easy to change are not depended on by modules that are harder to change.</p><blockquote><p>这就是软件开发的困难之处，我们精心设计的一个容易被修改的组件很可能会由于别人的一条简单依赖而变得非常难以被修改。即使该模块中没有一行代码需要被修改，但是整个模块在被修改时所面临的挑战性也已经存在了。而通过遵守稳定依赖原则（SDP），我们就可以确保自己设计中那些容易变更的模块不会被那些难于修改的组件所依赖。</p></blockquote><h3 id="STABILITY-稳定性"><a href="#STABILITY-稳定性" class="headerlink" title="STABILITY 稳定性"></a>STABILITY 稳定性</h3><p>What is meant by “stability”? Stand a penny on its side. Is it stable in that position? You would likely say “no.” However, unless disturbed, it will remain in that position for a very long time. Thus stability has nothing directly to do with frequency of change. The penny is not changing, but it is difficult to think of it as stable.</p><blockquote><p>我们该如何定义“稳定性”呢？譬如说将一个硬币立起来放，你认为它会处于一个稳定的位置吗？当然不会。然而，除非受到外界因素干扰，否则硬币本身可以在这个位置保持相当长的一段时间。因此稳定性应该与变更的频繁度没有直接关系但问题是硬币并没有倒，为什么我们却并不认为它是稳定的呢?</p></blockquote><p>Webster’s Dictionary says that something is stable if it is “not easily moved.” Stability is related to the amount of work required to make a change. On the one hand, the standing penny is not stable because it requires very little work to topple it. On the other hand, a table is very stable because it takes a considerable amount of effort to turn it over.</p><blockquote><p>下面来看看 Webster 在线字典中的描述：稳定指的是“很难移动”。所以稳定性应该与变更所需的工作量有关。例如，硬币是不稳定的，因为只需要很小的动作就可以推倒它，而桌子则是非常稳定的，因为将它掀翻需要很大的动作。</p></blockquote><p>How does this relate to software? Many factors may make a software component hard to change—for example, its size, complexity, and clarity, among other characteristics. We will ignore all those factors and focus on something different here. One sure way to make a software component difficult to change, is to make lots of other software components depend on it. A component with lots of incoming dependencies is very stable because it requires a great deal of work to reconcile any changes with all the dependent components.</p><blockquote><p>但如果将这套理论关联到软件开发的问题上呢？软件组件的变更困难度与很多因素有关，例如代码的体量大小、复杂度、清晰度等。我们在这里会忽略这些因素，只集中讨论一个特别的因素——让软件组件难于修改的一个最直接的办法就是让很多其他组件依赖于它。带有许多入向依赖关系的组件是非常稳定的，因为它的任何变更都需要应用到所有依赖它的组件上。</p></blockquote><p>The diagram in Figure 14.5 shows X, which is a stable component. Three components depend on X, so it has three good reasons not to change. We say that X is responsible to those three components. Conversely, X depends on nothing, so it has no external influence to make it change. We say it is independent.</p><blockquote><p>在图 14.5 中，X 是一个稳定的组件。因为有三个组件依赖着 X，所以 X 有三个不应该被修改的原因。这里就说 X 要对三个组件负责。另一方面，X 不依赖于任何组件，所以不会有任何原因导致它需要被变更，我们称它为“独立”组件。</p></blockquote><p><Figures figure="14-5">X: a stable component</Figures></p><p>Figure 14.6 shows Y, which is a very unstable component. No other components depend on Y, so we say that it is irresponsible. Y also has three components that it depends on, so changes may come from three external sources. We say that Y is dependent.</p><blockquote><p>下面再来看看图 14.6 中的 Y 组件，这是一个非常不稳定的组件。由于没有其他的组件依赖 Y，所以 Y 并不对任何组件负责。但因为 Y 同时依赖于三个组件，所以它的变更就可能由三个不同的源产生。这里就说 Y 是有依赖性的组件。</p></blockquote><p><Figures figure="14-6">Y: a very unstable component</Figures></p><h3 id="STABILITY-METRICS-稳定性指标"><a href="#STABILITY-METRICS-稳定性指标" class="headerlink" title="STABILITY METRICS 稳定性指标"></a>STABILITY METRICS 稳定性指标</h3><p>How can we measure the stability of a component? One way is to count the number of dependencies that enter and leave that component. These counts will allow us to calculate the positional stability of the component.</p><blockquote><p>那么，究竟该如何来量化一个组件的稳定性呢？其中一种方法是计算所有入和出的依赖关系。通过这种方法，我们就可以计算出一个组件的位置稳定性（positional stability）。</p></blockquote><ul><li>Fan-in: Incoming dependencies. This metric identifies the number of classes outside this component that depend on classes within the component.</li><li>Fan-out: Outgoing dependencies. This metric identifies the number of classes inside this component that depend on classes outside the component.</li><li>I: Instability: I &#x3D; Fan-out &#x2F; (Fan-in + Fan-out). This metric has the range [0, 1]. I &#x3D; 0 indicates a maximally stable component. I &#x3D; 1 indicates a maximally unstable component.</li></ul><hr><blockquote><ul><li>Fan-in：入向依赖，这个指标指代了组件外部类依赖于组件内部类的数量。</li><li>Fan-out：出向依赖，这个指标指代了组件内部类依赖于组件外部类的数量。</li><li>I：不稳定性，<code>I=Fan-out/(Fan-in+Fan-out)</code>.该指标的范围是[0,1]，I&#x3D;0 意味着组件是最稳定的，I&#x3D;1 意味着组件是最不稳定的。</li></ul></blockquote><p>The Fan-in and Fan-out metrics1 are calculated by counting the number of classes outside the component in question that have dependencies with the classes inside the component in question. Consider the example in Figure 14.7.</p><blockquote><p>在这里，Fan-in 和 Fan-out 这两个指标是通过统计和组件内部类有依赖的组件外部类的数量来计算的，具体如图 14.7 所示。</p></blockquote><p><Figures figure="14-7">Our example</Figures></p><p>Let’s say we want to calculate the stability of the component Cc. We find that there are three classes outside Cc that depend on classes in Cc. Thus, Fan-in &#x3D; 3. Moreover, there is one class outside Cc that classes in Cc depend on. Thus, Fan-out &#x3D; 1 and I &#x3D; 1&#x2F;4.</p><blockquote><p>在这里，我们想要计算组件 Cc 的稳定性指标，可以观察到有 3 个类在 Cc 外部，它们都依赖于 Cc 内部的类，因此 Fan-in&#x3D;3，此外，Cc 中的一个类也依赖于组件外部的类，因此 Fan-out&#x3D;1，I&#x3D;1&#x2F;4。</p></blockquote><p>In C++, these dependencies are typically represented by #include statements. Indeed, the I metric is easiest to calculate when you have organized your source code such that there is one class in each source file. In Java, the I metric can be calculated by counting import statements and qualified names.</p><blockquote><p>在 C++中，这些依赖关系一般是通过 <code>#include</code> 语句来表达的。事实上，当每个源文件只包含一个类的时候，I 指标是最容易计算的。同样在 Java 中，I 指标也可以通过 import 语句和全引用名字的数量来计算。</p></blockquote><p>When the I metric is equal to 1, it means that no other component depends on this component (Fan-in &#x3D; 0), and this component depends on other components (Fan-out &gt; 0). This situation is as unstable as a component can get; it is irresponsible and dependent. Its lack of dependents gives the component no reason not to change, and the components that it depends on may give it ample reason to change.</p><blockquote><p>当 I 指标等于 1 时，说明没有组件依赖当前组件（Fan-in&#x3D;0），同时该组件却依赖于其他组件（Fan-out&gt;0）。这是组件最不稳定的一种情况，我们认为这种组件是“不负责的（irresponsible）、对外依赖的（dependent）”。由于这个组件没有被其他组件依赖，所以自然也就没有力量会干预它的变更，同时也因为该组件依赖于其他组件，所以就必然会经常需要变更。</p></blockquote><p>In contrast, when the I metric is equal to 0, it means that the component is depended on by other components (Fan-in &gt; 0), but does not itself depend on any other components (Fan-out &#x3D; 0). Such a component is responsible and independent. It is as stable as it can get. Its dependents make it hard to change the component, and its has no dependencies that might force it to change.</p><blockquote><p>相反，当 1&#x3D;0 的时候，说明当前组件是其他组件所依赖的目标(Fan-in&gt;0)，同时其自身并不依赖任何其他组件（Fan-out&#x3D;0）。我们通常认为这样的组件是“负责的（responsibile）、不对外依赖的（independent）”。这是组件最具稳定性的一种情况，其他组件对它的依赖关系会导致这个组件很难被变更，同时由于它没有对外依赖关系，所以不会有来自外部的变更理由。</p></blockquote><p>The SDP says that the I metric of a component should be larger than the I metrics of the components that it depends on. That is, I metrics should decrease in the direction of dependency.</p><blockquote><p>稳定依赖原则（SDP）的要求是让每个组件的&#x2F;指标都必须大于其所依赖组件的 I 指标。也就是说，组件结构依赖图中各组件的&#x2F;指标必须要按其依赖关系方向递减。</p></blockquote><h3 id="NOT-ALL-COMPONENTS-SHOULD-BE-STABLE-并不是所有组件都应该是稳定的"><a href="#NOT-ALL-COMPONENTS-SHOULD-BE-STABLE-并不是所有组件都应该是稳定的" class="headerlink" title="NOT ALL COMPONENTS SHOULD BE STABLE 并不是所有组件都应该是稳定的"></a>NOT ALL COMPONENTS SHOULD BE STABLE 并不是所有组件都应该是稳定的</h3><p>If all the components in a system were maximally stable, the system would be unchangeable. This is not a desirable situation. Indeed, we want to design our component structure so that some components are unstable and some are stable. The diagram in Figure 14.8 shows an ideal configuration for a system with three components.</p><blockquote><p>如果一个系统中的所有组件都处于最高稳定性状态，那么系统就一定无法再进行变更了，这显然不是我们想要的。事实上，我们设计组件架构图的目的就是要决定应该让哪些组件稳定，让哪些组件不稳定。譬如在图 14.8 中，我们所示范的就是一个具有三个组件的系统的理想配置。</p></blockquote><p>The changeable components are on top and depend on the stable component at the bottom. Putting the unstable components at the top of the diagram is a useful convention because any arrow that points up is violating the SDP (and, as we shall see later, the ADP).</p><blockquote><p>在该系统组件结构图中，可变更的组件位于顶层，同时依赖于底层的稳定组件。将不稳定组件放在该结构图的顶层是很有用的，因为这样我们就可以很容易地找出箭头向上的依赖关系，而这些关系是违反 SDP（以及后面将会讨论的 ADP）的。</p></blockquote><p><Figures figure="14-8">An ideal configuration for a system with three components</Figures></p><p>The diagram in Figure 14.9 shows how the SDP can be violated.</p><blockquote><p>下面再通过图 14.9 来看看违反 SDP 的情况：</p></blockquote><p><Figures figure="14-9">SDP violation</Figures></p><p>Flexible is a component that we have designed to be easy to change. We want Flexible to be unstable. However, some developer, working in the component named Stable, has hung a dependency on Flexible. This violates the SDP because the I metric for Stable is much smaller than the I metric for Flexible. As a result, Flexible will no longer be easy to change. A change to Flexible will force us to deal with Stable and all its dependents.</p><blockquote><p>在图 14.9 中，Flexible 是在设计中要确保其易于变更的组件，因此我们会希望 Flexible 是不稳定的。然而，Stable 组件的开发人员却引入了对 Flexible 组件的依赖。这种情况就违反了 SDP，因为 Stable 组件的 I 指标要远小于 Flexible 的 I 指标。这将导致 Flexible 组件的变更难度大大增加，因为对 Flexible 组件的任何修改都必须要考虑 Stable 组件及该组件自身存在的依赖关系。</p></blockquote><p>To fix this problem, we somehow have to break the dependence of Stable on Flexible. Why does this dependency exist? Let’s assume that there is a class C within Flexible that another class U within Stable needs to use (Figure 14.10).</p><blockquote><p>如果想要修复这个问题，就必须要将 stable 与 Flexible 这两个组件之间的依赖关系打破。为此，我们就需要了解这个依赖关系到底为什么会存在，这里假设是因为 Stable 组件中的某个类 U 需要使用 Flexible 组件中的一个类 C，如图 14.10 所示：</p></blockquote><p><Figures figure="14-10">U within Stable uses C within Flexible</Figures></p><p>We can fix this by employing the DIP. We create an interface class called US and put it in a component named UServer. We make sure that this interface declares all the methods that U needs to use. We then make C implement this interface as shown in Figure 14.11. This breaks the dependency of Stable on Flexible, and forces both components to depend on UServer. UServer is very stable (I &#x3D; 0), and Flexible retains its necessary instability (I &#x3D; 1). All the dependencies now flow in the direction of decreasing I.</p><blockquote><p>我们可以利用 DIP 来修复这个问题。具体来说就是创造一个 UServer 组件，并在其中设置一个 US 接口类。然后，确保这个接口类中包含了所有 U 需要使用的函数，再让 C 实现这个接口，如图 14.11 所示。这样一来，我们就将从 Stable 到 Flexible 的这条依赖关系打破了，强迫这两个组件都依赖于 UServer。现在，UServer 组件会是非常稳定的（I&#x3D;0），而 Flexibile 组件则会依然保持不稳定的状态（I&#x3D;1），结构图中所有的依赖关系都流向 I 递减的方向了。</p></blockquote><p><Figures figure="14-11">C implements the interface class US</Figures></p><h3 id="Abstract-Components-抽象组件"><a href="#Abstract-Components-抽象组件" class="headerlink" title="Abstract Components 抽象组件"></a>Abstract Components 抽象组件</h3><p>You may find it strange that we would create a component—in this example, UService—that contains nothing but an interface. Such a component contains no executable code! It turns out, however, that this is a very common, and necessary, tactic when using statically typed languages like Java and C#. These abstract components are very stable and, therefore, are ideal targets for less stable components to depend on.</p><blockquote><p>读者可能会觉得创造新组件（譬如上述例子中的 UService 组件，它其实只包含了一个接口类）这种做法挺奇怪的。因为这样的组件中几乎不包含任何可执行的代码！但事实上，这种做法在 C# 或者 Java 这种静态类型语言中是非常普遍的，而且也必须这样做。因为这些抽象组件通常会非常稳定，可以被那些相对不稳定的组件依赖。</p></blockquote><p>When using dynamically typed languages like Ruby and Python, these abstract components don’t exist at all, nor do the dependencies that would have targeted them. Dependency structures in these languages are much simpler because dependency inversion does not require either the declaration or the inheritance of interfaces.</p><blockquote><p>而当我们使用 Ruby 和 Python 这种动态类型语言时，这些抽象接口事实上并不存在，因此也就没有对它们的依赖。动态类型语言中的依赖关系是非常简单的，因为其依赖反转的过程并不需要声明和继承接口。</p></blockquote><h2 id="THE-STABLE-ABSTRACTIONS-PRINCIPLE-稳定抽象原则"><a href="#THE-STABLE-ABSTRACTIONS-PRINCIPLE-稳定抽象原则" class="headerlink" title="THE STABLE ABSTRACTIONS PRINCIPLE 稳定抽象原则"></a>THE STABLE ABSTRACTIONS PRINCIPLE 稳定抽象原则</h2><p>A component should be as abstract as it is stable.</p><blockquote><p>一个组件的抽象化程度应该与其稳定性保持一致。</p></blockquote><h3 id="WHERE-DO-WE-PUT-THE-HIGH-LEVEL-POLICY-高阶策略应该放在哪里"><a href="#WHERE-DO-WE-PUT-THE-HIGH-LEVEL-POLICY-高阶策略应该放在哪里" class="headerlink" title="WHERE DO WE PUT THE HIGH-LEVEL POLICY? 高阶策略应该放在哪里"></a>WHERE DO WE PUT THE HIGH-LEVEL POLICY? 高阶策略应该放在哪里</h3><p>Some software in the system should not change very often. This software represents high-level architecture and policy decisions. We don’t want these business and architectural decisions to be volatile. Thus the software that encapsulates the high-level policies of the system should be placed into stable components (I &#x3D; 0). Unstable components (I &#x3D; 1) should contain only the software that is volatile—software that we want to be able to quickly and easily change.</p><blockquote><p>在一个软件系统中，总有些部分是不应该经常发生变更的。这些部分通常用于表现该系统的高阶架构设计及一些策略相关的高阶决策。我们不想让这些业务决策和架构设计经常发生变更，因此这些代表了系统咼阶策略的组件应该被放到稳定组件（I&#x3D;0）中，而不稳定的组件（I&#x3D;1）中应该只包含那些我们想要快速和方便修改的部分。</p></blockquote><p>However, if the high-level policies are placed into stable components, then the source code that represents those policies will be difficult to change. This could make the overall architecture inflexible. How can a component that is maximally stable (I &#x3D; 0) be flexible enough to withstand change? The answer is found in the OCP. This principle tells us that it is possible and desirable to create classes that are flexible enough to be extended without requiring modification. Which kind of classes conform to this principle? Abstract classes.</p><blockquote><p>然而，如果我们将高阶策略放入稳定组件中，那么用于描述那些策略的源代码就很难被修改了。这可能会导致整个系统的架构设计难于被修改。如何才能让一个无限稳定的组件（I&#x3D;0）接受变更呢？开闭原则（OCP）为我们提供了答案。这个原则告诉我们：创造一个足够灵活、能够被扩展，而且不需要修改的类是可能的，而这正是我们所需要的。哪一种类符合这个原则呢？答案是抽象类。</p></blockquote><h3 id="INTRODUCING-THE-STABLE-ABSTRACTIONS-PRINCIPLE-稳定抽象原则简介"><a href="#INTRODUCING-THE-STABLE-ABSTRACTIONS-PRINCIPLE-稳定抽象原则简介" class="headerlink" title="INTRODUCING THE STABLE ABSTRACTIONS PRINCIPLE 稳定抽象原则简介"></a>INTRODUCING THE STABLE ABSTRACTIONS PRINCIPLE 稳定抽象原则简介</h3><p>The Stable Abstractions Principle (SAP) sets up a relationship between stability and abstractness. On the one hand, it says that a stable component should also be abstract so that its stability does not prevent it from being extended. On the other hand, it says that an unstable component should be concrete since its instability allows the concrete code within it to be easily changed.</p><blockquote><p>稳定抽象原则（SAP）为组件的稳定性与它的抽象化程度建立了一种关联。一方面，该原则要求稳定的组件同时应该是抽象的，这样它的稳定性就不会影响到扩展性。另一方面，该原则也要求一个不稳定的组件应该包含具体的实现代码，这样它的稳定性就可以通过具体的代码被轻易修改。</p></blockquote><p>Thus, if a component is to be stable, it should consist of interfaces and abstract classes so that it can be extended. Stable components that are extensible are flexible and do not overly constrain the architecture.</p><blockquote><p>因此，如果一个组件想要成为稳定组件，那么它就应该由接口和抽象类组成，以便将来做扩展。如此，这些既稳定又便于扩展的组件可以被组合成既灵活又不会受到过度限制的架构。</p></blockquote><p>The SAP and the SDP combined amount to the DIP for components. This is true because the SDP says that dependencies should run in the direction of stability, and the SAP says that stability implies abstraction. Thus dependencies run in the direction of abstraction.</p><blockquote><p>将 SAP 与 SDP 这两个原则结合起来，就等于组件层次上的 DIP。因为 SDP 要求的是让依赖关系指向更稳定的方向，而 SAP 则告诉我们稳定性本身就隐含了对抽象化的要求，即依赖关系应该指向更抽象的方向。</p></blockquote><p>The DIP, however, is a principle that deals with classes—and with classes there are no shades of gray. Either a class is abstract or it is not. The combination of the SDP and the SAP deals with components, and allows that a component can be partially abstract and partially stable.</p><blockquote><p>然而，DIP 毕竟是与类这个层次有关的原则——对类来说，设计是没有灰色地带的。一个类要么是抽象类，要么就不是。SDP 与 SAP 这对原则是应用在组件层面上的，我们要允许一个组件部分抽象，部分稳定。</p></blockquote><h3 id="MEASURING-ABSTRACTION-衡量抽象化程度"><a href="#MEASURING-ABSTRACTION-衡量抽象化程度" class="headerlink" title="MEASURING ABSTRACTION 衡量抽象化程度"></a>MEASURING ABSTRACTION 衡量抽象化程度</h3><p>The A metric is a measure of the abstractness of a component. Its value is simply the ratio of interfaces and abstract classes in a component to the total number of classes in the component.</p><blockquote><p>下面，假设 A 指标是对组件抽象化程度的一个衡量，它的值是组件中抽象类与接口所占的比例。那么：</p></blockquote><ul><li>Nc: The number of classes in the component.</li><li>Na: The number of abstract classes and interfaces in the component.</li><li>A: Abstractness. A &#x3D; Na ÷ Nc.</li></ul><hr><blockquote><ul><li>Nc：组件中类的数量。</li><li>Na：组件中抽象类和接口的数量。</li><li>A：抽象程度，A&#x3D;Na&#x2F;Nc。</li></ul></blockquote><p>The A metric ranges from 0 to 1. A value of 0 implies that the component has no abstract classes at all. A value of 1 implies that the component contains nothing but abstract classes.</p><blockquote><p>A 指标的取值范围是从 0 到 1，值为 0 代表组件中没有任何抽象类，值为 1 就意味着组件中只有抽象类。</p></blockquote><h3 id="THE-MAIN-SEQUENCE-主序列"><a href="#THE-MAIN-SEQUENCE-主序列" class="headerlink" title="THE MAIN SEQUENCE 主序列"></a>THE MAIN SEQUENCE 主序列</h3><p>We are now in a position to define the relationship between stability (I) and abstractness (A). To do so, we create a graph with A on the vertical axis and I on the horizontal axis (Figure 14.12). If we plot the two “good” kinds of components on this graph, we will find the components that are maximally stable and abstract at the upper left at (0, 1). The components that are maximally unstable and concrete are at the lower right at (1, 0).</p><blockquote><p>现在，我们可以来定义组件的稳定性 I 与其抽象化程度 A 之间的关系了，具体如图 14.12 所示。在该图中，纵轴为 A 值，横轴为 I 值。如果我们将两个“设计良好”的组件绘制在该图上，那么最稳定的、包含了无限抽象类的组件应该位于左上角(0,1)，最不稳定的、最具体的组件应该位于右下角(1,0)。</p></blockquote><p><Figures figure="14-12">The I&#x2F;A graph</Figures></p><p>Not all components fall into one of these two positions, because components often have degrees of abstraction and stability. For example, it is very common for one abstract class to derive from another abstract class. The derivative is an abstraction that has a dependency. Thus, though it is maximally abstract, it will not be maximally stable. Its dependency will decrease its stability.</p><blockquote><p>当然，不可能所有的组件都能处于这两个位置上，因为组件通常都有各自的稳定程度和抽象化程度。例如一个抽象类有时会衍生于另一个抽象类，这种情况是很常见的，而这个衍生过程就意味着某种依赖关系的产生。因此，虽然该组件是全抽象的，但它并不是完全稳定的，上述依赖关系降低了它的稳定程度。</p></blockquote><p>Since we cannot enforce a rule that all components sit at either (0, 1) or (1, 0), we must assume that there is a locus of points on the A&#x2F;I graph that defines reasonable positions for components. We can infer what that locus is by finding the areas where components should not be—in other words, by determining the zones of exclusion (Figure 14.13).</p><blockquote><p>既然不能强制要求所有的组件都处于(0,1)和(1,0)这两个位置上，那么就必须假设 A&#x2F;I 图上存在着一个合理组件的区间。而这个区间应该可以通过排除法推导出来，也就是说，我们可以先找出那些组件不应该处于的位置（请参考图 14.13）：</p></blockquote><p><Figures figure="14-13">Zones of exclusion</Figures></p><h3 id="The-Zone-of-Pain-痛苦区"><a href="#The-Zone-of-Pain-痛苦区" class="headerlink" title="The Zone of Pain 痛苦区"></a>The Zone of Pain 痛苦区</h3><p>Consider a component in the area of (0, 0). This is a highly stable and concrete component. Such a component is not desirable because it is rigid. It cannot be extended because it is not abstract, and it is very difficult to change because of its stability. Thus we do not normally expect to see well-designed components sitting near (0, 0). The area around (0, 0) is a zone of exclusion called the Zone of Pain.</p><blockquote><p>在图 14.13 中，假设某个组件处于(0,0)位置，那么它应该是一个非常稳定但也非常具体的组件。这样的组件在设计上是不佳的，因为它很难被修改，这意味着该组件不能被扩展。这样一来，因为这个组件不是抽象的，而且它又由于稳定性的原因变得特别难以被修改，我们并不希望一个设计良好的组件贴近这个区域，因此(0,0)周围的这个区域被我们称为痛苦区（zone of pain）。</p></blockquote><p>Some software entities do, in fact, fall within the Zone of Pain. An example would be a database schema. Database schemas are notoriously volatile, extremely concrete, and highly depended on. This is one reason why the interface between OO applications and databases is so difficult to manage, and why schema updates are generally painful.</p><blockquote><p>当然，有些软件组件确实会处于这个区域中，这方面的一个典型案例就是数据库的表结构（schema）。它在可变性上可谓臭名昭著，但是它同时又非常具体，并被非常多的组件依赖。这就是面向对象应用程序与数据库之间的接口这么难以管理，以及每次更新数据库的过程都那么痛苦的原因。</p></blockquote><p>Another example of software that sits near the area of (0, 0) is a concrete utility library. Although such a library has an I metric of 1, it may actually be nonvolatile. Consider the String component, for example. Even though all the classes within it are concrete, it is so commonly used that changing it would create chaos. Therefore String is nonvolatile.</p><blockquote><p>另一个会处于这个区域的典型软件组件是工具型类库。虽然这种类库的 I 指标为 1，但事实上通常是不可变的。例如 String 组件，虽然其中所有的类都是具体的，但由于它被使用得太过普遍，任何修改都会造成大范围的混乱，因此 String 组件只能是不可变的。</p></blockquote><p>Nonvolatile components are harmless in the (0, 0) zone since they are not likely to be changed. For that reason, it is only volatile software components that are problematic in the Zone of Pain. The more volatile a component in the Zone of Pain, the more “painful” it is. Indeed, we might consider volatility to be a third axis of the graph. With this understanding, Figure 14.13 shows only the most painful plane, where volatility &#x3D; 1.</p><blockquote><p>不可变组件落在(0,0)这一区域中是无害的，因为它们不太可能会发生变更。正因为如此，只有多变的软件组件落在痛苦区中才会造成麻烦，而且组件的多变性越强，造成的麻烦就会越大。其实，我们应该将多变性作为图 14.13 的第三个轴，这时图 14.13 所展示的便是多变性&#x3D;1 时的情况，也就是最痛苦的切面。</p></blockquote><h3 id="The-Zone-of-Uselessness-无用区"><a href="#The-Zone-of-Uselessness-无用区" class="headerlink" title="The Zone of Uselessness 无用区"></a>The Zone of Uselessness 无用区</h3><p>Consider a component near (1, 1). This location is undesirable because it is maximally abstract, yet has no dependents. Such components are useless. Thus this area is called the Zone of Uselessness.</p><blockquote><p>现在我们来看看靠近(1,1)这一位置点的组件。该位置上的组件不会是我们想要的，因为这些组件通常是无限抽象的，但是没有被其他组件依赖，这样的组件往往无法使用。因此我们将这个区域称为无用区。</p></blockquote><p>The software entities that inhabit this region are a kind of detritus. They are often leftover abstract classes that no one ever implemented. We find them in systems from time to time, sitting in the code base, unused.</p><blockquote><p>对于这个区域中的软件组件来说，其源码或者类中的设计问题通常是由于历史原因造成的。例如我们常常会在系统的某个角落里看到某个没有人实现的抽象类，它们一直静静地躺在那里，没有人使用。</p></blockquote><p>A component that has a position deep within the Zone of Uselessness must contain a significant fraction of such entities. Clearly, the presence of such useless entities is undesirable.</p><blockquote><p>同样的，落在无用区中的组件也一定会包含大量的无用代码。很明显，这类组件也不是我们想要的。</p></blockquote><h3 id="AVOIDING-THE-ZONES-OF-EXCLUSION-避开这两个区域"><a href="#AVOIDING-THE-ZONES-OF-EXCLUSION-避开这两个区域" class="headerlink" title="AVOIDING THE ZONES OF EXCLUSION 避开这两个区域"></a>AVOIDING THE ZONES OF EXCLUSION 避开这两个区域</h3><p>It seems clear that our most volatile components should be kept as far from both zones of exclusion as possible. The locus of points that are maximally distant from each zone is the line that connects (1, 0) and (0, 1). I call this line the Main Sequence.2</p><blockquote><p>很明显，最多变的组件应该离上述两个区域越远越好。在图 14.13 中，我们可以将距离两个区域最远的点连成一条线，即从(1,0)连接到(0,1)。我将这条线称为主序列线（main sequence）。</p></blockquote><p>A component that sits on the Main Sequence is not “too abstract” for its stability, nor is it “too unstable” for its abstractness. It is neither useless nor particularly painful. It is depended on to the extent that it is abstract, and it depends on others to the extent that it is concrete.</p><blockquote><p>坐落于主序列线上的组件不会为了追求稳定性而被设计得“太过抽象”，也不会为了避免抽象化而被设计得“太过不稳定”。这样的组件既不会特别难以被修改，又可以实现足够的功能。对于这些组件来说，通常会有足够多的组件依赖于它们，这使得它们会具有一定程度的抽象，同时它们也依赖了足够多的其他组件，这又使得它一定会包含很多具体实现。</p></blockquote><p>The most desirable position for a component is at one of the two endpoints of the Main Sequence. Good architects strive to position the majority of their components at those endpoints. However, in my experience, some small fraction of the components in a large system are neither perfectly abstract nor perfectly stable. Those components have the best characteristics if they are on, or close, to the Main Sequence.</p><blockquote><p>在这条主序列线上，组件所能处于最优的位置是线的两端。一个优秀的软件架构师应该争取将自己设计的大部分组件尽可能地推向这两个位置。然而，以我的个人经验来说，大型系统中的组件不可能做到完全抽象，也不可能做到完全稳定。所以我们只要追求让这些组件位于主序列线上，或者贴近这条线即可。</p></blockquote><h3 id="DISTANCE-FROM-THE-MAIN-SEQUENCE-离主序列线的距离"><a href="#DISTANCE-FROM-THE-MAIN-SEQUENCE-离主序列线的距离" class="headerlink" title="DISTANCE FROM THE MAIN SEQUENCE 离主序列线的距离"></a>DISTANCE FROM THE MAIN SEQUENCE 离主序列线的距离</h3><p>This leads us to our last metric. If it is desirable for components to be on, or close, to the Main Sequence, then we can create a metric that measures how far away a component is from this ideal.</p><blockquote><p>接下来介绍最后一个指标：如果让组件位于或者靠近主序列是可取的目标，那么我们就可以创建一个指标来衡量一个组件距离最佳位置的距离。</p></blockquote><ul><li>D3: Distance. D &#x3D; |A+I–1| . The range of this metric is [0, 1]. A value of 0 indicates that the component is directly on the Main Sequence. A value of 1 indicates that the component is as far away as possible from the Main Sequence.</li></ul><blockquote><ul><li>D 指标：距离 <code>D=|A+I-1|</code>，该指标的取值范围是[0,1]。值为 0 意味着组件是直接位于主序列线上的，值为 1 则意味着组件在距离主序列最远的位置。</li></ul></blockquote><p>Given this metric, a design can be analyzed for its overall conformance to the Main Sequence. The D metric for each component can be calculated. Any component that has a D value that is not near zero can be reexamined and restructured.</p><blockquote><p>通过计算每个组件的 D 指标，就可以量化一个系统设计与主序列的契合程度了。另外，我们也可以用 D 指标大于 0 多少来指导组件的重构与重新设计。</p></blockquote><p>Statistical analysis of a design is also possible. We can calculate the mean and variance of all the D metrics for the components within a design. We would expect a conforming design to have a mean and variance that are close to zero. The variance can be used to establish “control limits” so as to identify components that are “exceptional” in comparison to all the others.</p><blockquote><p>除此之外，通过计算设计中所有组件的 D 指标的平均值和方差，我们还可以用统计学的方法来量化分析一个系统设计。对于一个良好的系统设计来说，D 指标的平均值和方差都应该接近于 0。其中，方差还可以被当作组件的“达标红线”来使用，我们可以通过它找出系统设计中那些不合常规的组件。</p></blockquote><p>In the scatterplot in Figure 14.14, we see that the bulk of the components lie along the Main Sequence, but some of them are more than one standard deviation (Z &#x3D; 1) away from the mean. These aberrant components are worth examining more closely. For some reason, they are either very abstract with few dependents or very concrete with many dependents.</p><blockquote><p>在图 14.14 中，我们可以看到大部分的组件都位于主序列附近，但是有些组件处于平均值的标准差（Z&#x3D;1）以外。这些组件值得被重点分析，它们要么过于抽象依赖不足，要么过于具体而被依赖得太多。</p></blockquote><p><Figures figure="14-14">Scatterplot of the components</Figures></p><p>Another way to use the metrics is to plot the D metric of each component over time. The graph in Figure 14.15 is a mock-up of such a plot. You can see that some strange dependencies have been creeping into the Payroll component over the last few releases. The plot shows a control threshold at D &#x3D; 0.1. The R2.1 point has exceeded this control limit, so it would be worth our while to find out why this component is so far from the main sequence.</p><blockquote><p>D 指标的另外一种用法是按时间来跟踪每个组件的值，下面用图 14.15 来做一个示范。在该图中可以看到，Payroll 组件在最近几次发布中累积了一些意外的对外依赖。图中的 Q&#x3D;0.1 是组件的达标红线，R2.1 这个值已经超出了红线范围，这就告诉我们现在值得花一些精力来找出这个组件偏离主序列线的原因了。</p></blockquote><p><Figures figure="14-15">Plot of D for a single component over time</Figures></p><h2 id="CONCLUSION-本章小结-12"><a href="#CONCLUSION-本章小结-12" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>The dependency management metrics described in this chapter measure the conformance of a design to a pattern of dependency and abstraction that I think is a “good” pattern. Experience has shown that certain dependencies are good and others are bad. This pattern reflects that experience. However, a metric is not a god; it is merely a measurement against an arbitrary standard. These metrics are imperfect, at best, but it is my hope that you find them useful.</p><blockquote><p>本章介绍了各种可用于依赖关系管理的指标，它们可以被用来里化分析某个系统设计与“优秀”设计模式之间的契合度。根据以往的经验，组件之间有些依赖关系是好的，有些依赖关系则是不好的，这些经验最后都会体现在这个设计模式中。当然，指标并不等同于真理，它只是对我们所定义标准的一个衡量。这些指标肯定是不完美的，但是我希望它们对读者有价值。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Part5-ARCHITECTURE-软件架构"><a href="#Part5-ARCHITECTURE-软件架构" class="headerlink" title="Part5. ARCHITECTURE 软件架构"></a>Part5. ARCHITECTURE 软件架构</h1><h1 id="Chap15-WHAT-IS-ARCHITECTURE-什么是软件架构"><a href="#Chap15-WHAT-IS-ARCHITECTURE-什么是软件架构" class="headerlink" title="Chap15. WHAT IS ARCHITECTURE? 什么是软件架构"></a>Chap15. WHAT IS ARCHITECTURE? 什么是软件架构</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN15.jpg"></p><p>The word “architecture” conjures visions of power and mystery. It makes us think of weighty decisions and deep technical prowess. Software architecture is at the pinnacle of technical achievement. When we think of a software architect, we think of someone who has power, and who commands respect. What young aspiring software developer has not dreamed of one day becoming a software architect?</p><blockquote><p>“架构”这个词给人的直观感受就充满了权力与神秘感，因此谈论架构总让人有一种正在进行责任重大的决策或者深度技术分析的感觉。毕竟，进阶到软件架构这一层次是我们走技术路线的人的终极目标。一个软件架构师总是给人一种权力非凡、广受尊敬的感觉，有哪个年轻的工程师没有梦想过成为一个软件架构师呢?</p></blockquote><p>But what is software architecture? What does a software architect do, and when does he or she do it?</p><blockquote><p>那么，究竟什么才是“软件架构”呢?软件架构师的工作内容究竟是什么?这项工作又是什么时候进行的呢？</p></blockquote><p>First of all, a software architect is a programmer; and continues to be a programmer. Never fall for the lie that suggests that software architects pull back from code to focus on higher-level issues. They do not! Software architects are the best programmers, and they continue to take programming tasks, while they also guide the rest of the team toward a design that maximizes productivity. Software architects may not write as much code as other programmers do, but they continue to engage in programming tasks. They do this because they cannot do their jobs properly if they are not experiencing the problems that they are creating for the rest of the programmers.</p><blockquote><p>首先，软件架构师自身需要是程序员，并且必须一直坚持做一线程序员，绝对不要听从那些说应该让软件架构师从代码中解放出来以专心解决高阶问题的伪建议。不是这样的！软件架构师其实应该是能力最强的一群程序员，他们通常会在自身承接编程任务的同时。逐渐引导整个团队向一个能够最大化生产力的系统设计方向前进。也许软件架构师生产的代码量不是最多的，但是他们必须不停地承接编程任务。如果不亲身承受因系统设计而带来的麻烦，就体会不到设计不佳所带来的痛苦，接着就会逐渐迷失正确的设计方向。</p></blockquote><p>The architecture of a software system is the shape given to that system by those who build it. The form of that shape is in the division of that system into components, the arrangement of those components, and the ways in which those components communicate with each other.</p><blockquote><p>软件系统的架构质量是由它的构建者所决定的，软件架构这项工作的实质就是规划如何将系统切分成组件，并安排好组件之间的排列关系，以及组件之间互相通信的方式。</p></blockquote><p>The purpose of that shape is to facilitate the development, deployment, operation, and maintenance of the software system contained within it.</p><blockquote><p>而设计软件架构的目的，就是为了在工作中更好地对这些组件进行研发、部署、运行以及维护。</p></blockquote><p>The strategy behind that facilitation is to leave as many options open as possible, for as long as possible.</p><blockquote><p>如果想设计一个便于推进各项工作的系统，其策略就是要在设计中尽可能长时间地保留尽可能多的可选项。</p></blockquote><p>Perhaps this statement has surprised you. Perhaps you thought that the goal of software architecture was to make the system work properly. Certainly we want the system to work properly, and certainly the architecture of the system must support that as one of its highest priorities.</p><blockquote><p>上面这句话可能会让人很意外，也许你一直认为设计软件架构的目的应该是让一个系统能正常地工作。我们当然需要让系统正常工作，软件架构设计最高优先级的目标就是保持系统正常工作。</p></blockquote><p>However, the architecture of a system has very little bearing on whether that system works. There are many systems out there, with terrible architectures, that work just fine. Their troubles do not lie in their operation; rather, they occur in their deployment, maintenance, and ongoing development.</p><blockquote><p>然而，一个软件系统的架构质量和该系统是否能正常工作的关系并不大，毕竟世界上有很多架构设计糟糕但是工作正常的软件系统。真正的麻烦往往并不会在我们运行软件的过程中出现，而是会出现在这个软件系统的开发、部署以及后续的补充开发中。</p></blockquote><p>This is not to say that architecture plays no role in supporting the proper behavior of the system. It certainly does, and that role is critical. But the role is passive and cosmetic, not active or essential. There are few, if any, behavioral options that the architecture of a system can leave open.</p><blockquote><p>当然，这并不意味着好的软件架构对系统的行为就没有影响了，事实上架构在其中的角色还是很重要的。然而在这个方面，架构能起到的作用更多的时候是被动的，修饰性的，并不是主动的，更不是必不可少的。在系统的架构设计中，能影响系统行为的可选项少之又少。</p></blockquote><p>The primary purpose of architecture is to support the life cycle of the system. Good architecture makes the system easy to understand, easy to develop, easy to maintain, and easy to deploy. The ultimate goal is to minimize the lifetime cost of the system and to maximize programmer productivity.</p><blockquote><p>软件架构设计的主要目标是支撑软件系统的全生命周期，设计良好的架构可以让系统便于理解、易于修改、方便维护，并且能轻松部署。软件架构的终极目标就是最大化程序员的生产力，同时最小化系统的总运营成本。</p></blockquote><h2 id="DEVELOPMENT-开发（Development）"><a href="#DEVELOPMENT-开发（Development）" class="headerlink" title="DEVELOPMENT 开发（Development）"></a>DEVELOPMENT 开发（Development）</h2><p>A software system that is hard to develop is not likely to have a long and healthy lifetime. So the architecture of a system should make that system easy to develop, for the team(s) who develop it.</p><blockquote><p>一个开发起来很困难的软件系统一般不太可能会有一个长久、健康的生命周期，所以系统架构的作用就是要方便其开发团队对它的开发。</p></blockquote><p>Different team structures imply different architectural decisions. On the one hand, a small team of five developers can quite effectively work together to develop a monolithic system without well-defined components or interfaces. In fact, such a team would likely find the strictures of an architecture something of an impediment during the early days of development. This is likely the reason why so many systems lack good architecture: They were begun with none, because the team was small and did not want the impediment of a superstructure.</p><blockquote><p>这意味着，不同的团队结构应该采用不同的架构设计。一方面，对于一个只有五个开发人员的小团队来说，他们完全可以非常高效地共同开发一个没有明确定义组件和接口的单体系统（monolithic system）。事实上，这样的团队可能会发现软件架构在早期开发中反而是一种障碍。这可能就是为什么许多系统都没有设计一个良好架构的原因，因为它们的开发团队起初都很小，不需要设计一些上层建筑来限制某些事情。</p></blockquote><p>On the other hand, a system being developed by five different teams, each of which includes seven developers, cannot make progress unless the system is divided into well-defined components with reliably stable interfaces. If no other factors are considered, the architecture of that system will likely evolve into five components—one for each team.</p><blockquote><p>但另一方面，如果一个软件系统是由五个不同的团队合作开发的，而每个团队各自都有七个开发人员的话，不将系统划分成定义清晰的组件和可靠稳定的接口，开发工作就没法继续推进。通常，如果忽略其他因素，该系统的架构会逐渐演变成五个组件，一个组件对应一个团队。</p></blockquote><p>Such a component-per-team architecture is not likely to be the best architecture for deployment, operation, and maintenance of the system. Nevertheless, it is the architecture that a group of teams will gravitate toward if they are driven solely by development schedule.</p><blockquote><p>当然，这种一个组件对应一个团队的架构不太可能是该系统在部署、运行以及维护方面的最优方案。但不管怎样，如果研发团队只受开发进度来驱动的话，他们的架构设计最终一定会倾向于这个方向。</p></blockquote><h2 id="DEPLOYMENT-部署（Deployment）"><a href="#DEPLOYMENT-部署（Deployment）" class="headerlink" title="DEPLOYMENT 部署（Deployment）"></a>DEPLOYMENT 部署（Deployment）</h2><p>To be effective, a software system must be deployable. The higher the cost of deployment, the less useful the system is. A goal of a software architecture, then, should be to make a system that can be easily deployed with a single action.</p><blockquote><p>为了让开发成为有效的工作，软件系统就必须是可部署的。在通常情况下，一个系统的部署成本越高，可用性就越低。因此，实现一键式的轻松部署应该是我们设计软件架构的一个目标。</p></blockquote><p>Unfortunately, deployment strategy is seldom considered during initial development. This leads to architectures that may make the system easy to develop, but leave it very difficult to deploy.</p><blockquote><p>但很不幸，我们在系统的早期开发中很少会考虑部署策略方面的事情，这常常会导致一些易于开发、难于部署的系统架构。</p></blockquote><p>For example, in the early development of a system, the developers may decide to use a “micro-service architecture.” They may find that this approach makes the system very easy to develop since the component boundaries are very firm and the interfaces relatively stable. However, when it comes time to deploy the system, they may discover that the number of micro-services has become daunting; configuring the connections between them, and the timing of their initiation, may also turn out to be a huge source of errors.</p><blockquote><p>例如，在系统的早期开发中，开发人员可能会决定采用某种“微服务架构”。这种架构的组件边界清晰，接口稳定，非常利于开发。但当我们实际部署这种系统时，就会发现其微服务的数量已经大到令人望而生畏，而配置这些微服务之间的连接以及启动时间都会成为系统出错的主要来源。</p></blockquote><p>Had the architects considered deployment issues early on, they might have decided on fewer services, a hybrid of services and in-process components, and a more integrated means of managing the interconnections.</p><blockquote><p>如果软件架构师早先就考虑到这些部署问题，可能就会有意地减少微服务的数量，采用进程内部组件与外部服务混合的架构，以及更加集成式的连接管理方式。</p></blockquote><h2 id="OPERATION-运行（Operation）"><a href="#OPERATION-运行（Operation）" class="headerlink" title="OPERATION 运行（Operation）"></a>OPERATION 运行（Operation）</h2><p>The impact of architecture on system operation tends to be less dramatic than the impact of architecture on development, deployment, and maintenance. Almost any operational difficulty can be resolved by throwing more hardware at the system without drastically impacting the software architecture.</p><blockquote><p>软件架构对系统运行的影响远不及它对开发、部署和维护的影响。几乎任何运行问题都可以通过增加硬件的方式来解决，这避免了软件架构的重新设计。</p></blockquote><p>Indeed, we have seen this happen over and over again. Software systems that have inefficient architectures can often be made to work effectively simply by adding more storage and more servers. The fact that hardware is cheap and people are expensive means that architectures that impede operation are not as costly as architectures that impede development, deployment, and maintenance.</p><blockquote><p>事实上，我们长期以来就是一直目睹着这种情况一再发生。对于一个因架构设计糟糕而效率低下的系统，我们通常只需要增加更多的存储器与服务器，就能够让它完满地完成任务。另外，硬件也远比人力要便宜，这也是软件架构对系统运行的影响远没有它对开发、部署、维护的影响那么深远的一个原因。</p></blockquote><p>This is not to say that an architecture that is well tuned to the operation of the system is not desirable. It is! It’s just that the cost equation leans more toward development, deployment, and maintenance.</p><blockquote><p>当然，这并不是说我们不应该为了让系统能更好地运转而优化软件的架构设计，这样做是应该的，只是基于投入&#x2F;产出比的考虑，我们的优化重心应该更倾向于系统的开发、部署以及维护。</p></blockquote><p>Having said that, there is another role that architecture plays in the operation of the system: A good software architecture communicates the operational needs of the system.</p><blockquote><p>即使这样，软件架构在整个系统运行的过程中还发挥着另外一个重要作用，那就是一个设计良好的软件架构应该能明确地反映该系统在运行时的需求。</p></blockquote><p>Perhaps a better way to say this is that the architecture of a system makes the operation of the system readily apparent to the developers. Architecture should reveal operation. The architecture of the system should elevate the use cases, the features, and the required behaviors of the system to first-class entities that are visible landmarks for the developers. This simplifies the understanding of the system and, therefore, greatly aids in development and maintenance.</p><blockquote><p>也许我们可以换一个更好的说法，那就是设计良好的系架构应该可以使开发人员对系统的运行过程一目了然。架构应该起到揭示系统运行过程的作用。具体来说，就是该架构应该将系统中的用例、功能以及该系统的必备行为设置为对开发者可见的一级实体，简化它们对于系统的理解，这将为整个系统的开发与维护提供很大的帮助。</p></blockquote><h2 id="MAINTENANCE-维护（Maintenance）"><a href="#MAINTENANCE-维护（Maintenance）" class="headerlink" title="MAINTENANCE 维护（Maintenance）"></a>MAINTENANCE 维护（Maintenance）</h2><p>Of all the aspects of a software system, maintenance is the most costly. The never-ending parade of new features and the inevitable trail of defects and corrections consume vast amounts of human resources.</p><blockquote><p>在软件系统的所有方面中，维护所需的成本是最高的。满足永不停歇的新功能需求，以及修改层出不穷的系统缺陷这些工作将会占去绝大部分的人力资源。</p></blockquote><p>The primary cost of maintenance is in spelunking and risk. Spelunking is the cost of digging through the existing software, trying to determine the best place and the best strategy to add a new feature or to repair a defect. While making such changes, the likelihood of creating inadvertent defects is always there, adding to the cost of risk.</p><blockquote><p>系统维护的主要成本集中在“探秘”和“风险”这两件事上。其中，“探秘（spelunking）”的成本主要来自我们对于现有软件系统的挖掘，目的是确定新增功能或被修复问题的最佳位置和最佳方式。而“风险（risk）”，则是指当我们进行上述修改时，总是有可能衍生出新的问题，这种可能性就是风险成本。</p></blockquote><p>A carefully thought-through architecture vastly mitigates these costs. By separating the system into components, and isolating those components through stable interfaces, it is possible to illuminate the pathways for future features and greatly reduce the risk of inadvertent breakage.</p><blockquote><p>我们可以通过精雕细琢的架构设计极大地降低这两项成本。通过将系统切分为组件，并使用稳定的接口将组件隔离，我们可以将未来新功能的添加方式明确出来，并大幅度地降低在修改过程中对系统其他部分造成伤害的可能性。</p></blockquote><h2 id="KEEPING-OPTIONS-OPEN-保持可选项"><a href="#KEEPING-OPTIONS-OPEN-保持可选项" class="headerlink" title="KEEPING OPTIONS OPEN 保持可选项"></a>KEEPING OPTIONS OPEN 保持可选项</h2><p>As we described in an earlier chapter, software has two types of value: the value of its behavior and the value of its structure. The second of these is the greater of the two because it is this value that makes software soft.</p><blockquote><p>正如我们在之前章节中所说的，软件有行为价值与架构价值两种价值。这其中的第二种价值又比第一种更重要，因为它正是软件之所以“软”的原因。</p></blockquote><p>Software was invented because we needed a way to quickly and easily change the behavior of machines. But that flexibility depends critically on the shape of the system, the arrangement of its components, and the way those components are interconnected.</p><blockquote><p>软件被发明出来就是因为我们需要一种灵活和便捷的方式来改变机器的行为。而软件的灵活性则取决于系统的整体状况、组件的布置以及组件之间的连接方式。</p></blockquote><p>The way you keep software soft is to leave as many options open as possible, for as long as possible. What are the options that we need to leave open? They are the details that don’t matter.</p><blockquote><p>我们让软件维持“软”性的方法就是尽可能长时间地保留尽可能多的可选项。那么到底哪些选项是我们应该保留的？它们就是那些无关紧要的细节设计。</p></blockquote><p>All software systems can be decomposed into two major elements: policy and details. The policy element embodies all the business rules and procedures. The policy is where the true value of the system lives.</p><blockquote><p>基本上，所有的软件系统部可以降解为策略打细节这两种主要元素。策略体现的是软件中所有的业务规则与操作过程，因此它是系统真正的价值所在。</p></blockquote><p>The details are those things that are necessary to enable humans, other systems, and programmers to communicate with the policy, but that do not impact the behavior of the policy at all. They include IO devices, databases, web systems, servers, frameworks, communication protocols, and so forth.</p><blockquote><p>而细节则是指那些让操作该系统的人、其他系统以及程序员们与策略进行交互，但是又不会影响到策略本身的行为。它们包括 I&#x2F;O 设备、数据库、Web 系统、服务器、框架、交互协议等。</p></blockquote><p>The goal of the architect is to create a shape for the system that recognizes policy as the most essential element of the system while making the details irrelevant to that policy. This allows decisions about those details to be delayed and deferred.</p><blockquote><p>软件架构师的目标是创建一种系统形态，该形态会以策略为最基本的元素，并让细节与策略脱离关系，以允许在具体决策过程中推迟或延迟与细节相关的内容。</p></blockquote><p>For example:</p><blockquote><p>例如，</p></blockquote><ul><li>It is not necessary to choose a database system in the early days of development, because the high-level policy should not care which kind of database will be used. Indeed, if the architect is careful, the high-level policy will not care if the database is relational, distributed, hierarchical, or just plain flat files.</li><li>It is not necessary to choose a web server early in development, because the high-level policy should not know that it is being delivered over the web. If the high-level policy is unaware of HTML, AJAX, JSP, JSF, or any of the rest of the alphabet soup of web development, then you don’t need to decide which web system to use until much later in the project. Indeed, you don’t even have to decide if the system will be delivered over the web.</li><li>It is not necessary to adopt REST early in development, because the high-level policy should be agnostic about the interface to the outside world. Nor is it necessary to adopt a micro-services framework, or a SOA framework. Again, the high-level policy should not care about these things.</li><li>It is not necessary to adopt a dependency injection framework early in development, because the high-level policy should not care how dependencies are resolved.</li></ul><hr><blockquote><ul><li>在开发的早期阶段应该无须选择数据库系统，因为软件的高层策略不应该关心其底层到底使用哪一种数据库。事实上，如果软件架构师足够小心，软件的高层策略甚至可以不用关心该数据库是关系型数据库，还是分布式数据库，是多级数据库，还只是一些文本文件而已。</li><li>在开发的早期阶段也不应该选定使用的 Web 服务，因为高层策略并不应该知道自己未来要以网页形式发布。如果高层策略能够与 HTML、AJAX、JSP、JSF 或任何 Web 开发技术脱钩，那么我们就可以将对 Web 系统的选择推迟到项目的最后阶段。事实上，很有可能我们压根不需要考虑这个系统到底是不是以网页形式发布的。</li><li>在开发的早期阶段不应该过早地采用 REST 模式，因为软件的高层策略应该与外部接口无关。同样的，我们也不应该过早地考虑采用微服务框架、SOA 框架等。再说一遍，软件的高层策略压根不应该跟这些有关。</li><li>在开发的早期阶段不应过早地采用依赖注入框架（dependency injection framework），因为高层策略不应该操心如何解析系统的依赖关系。</li></ul></blockquote><p>I think you get the point. If you can develop the high-level policy without committing to the details that surround it, you can delay and defer decisions about those details for a long time. And the longer you wait to make those decisions, the more information you have with which to make them properly.</p><blockquote><p>说到这里，我想读者应该明白我的意思了。如果在开发高层策略时有意地让自自摆脱具体细节的纠缠，我们就可以将与具体实现相关的细节决策推迟或延后，因为越到项目的后期，我们就拥有越多的信息来做出合理的决策。</p></blockquote><p>This also leaves you the option to try different experiments. If you have a portion of the high-level policy working, and it is agnostic about the database, you could try connecting it to several different databases to check applicability and performance. The same is true with web systems, web frameworks, or even the web itself.</p><blockquote><p>同时，这样做还可以让我们有机会做不同的尝试。例如。如果我们现在手里有一部分与数据库无关的高层策略，那么我们就可以用不同的数据库来做实验，以检验该系统与不同数据库之间的适应性件和性能。类似的情况也适用于各种 Web 框架，甚至 Web 这种发布形式本身。</p></blockquote><p>The longer you leave options open, the more experiments you can run, the more things you can try, and the more information you will have when you reach the point at which those decisions can no longer be deferred.</p><blockquote><p>另外，我们保留这些可选项的时间越长，实验的机会也就越多。而实验做得越多，我们做决策的时候就能拥有越充足的信息。</p></blockquote><p>What if the decisions have already been made by someone else? What if your company has made a commitment to a certain database, or a certain web server, or a certain framework? A good architect pretends that the decision has not been made, and shapes the system such that those decisions can still be deferred or changed for as long as possible.</p><blockquote><p>那么如果其他人已经替我们做出了决策呢？譬如说，我们的公司已经指定了某个数据库，或某种 Web 服务，或某个框架，这时应该怎么办？通常一个优秀的软件架构师会假装这些决策还没有确定，并尽可能长时间地让系统有推迟或修改这些决策的能力。</p></blockquote><p>A good architect maximizes the number of decisions not made.</p><blockquote><p>一个优秀的软件架构师应该致力于最大化可选项数量。</p></blockquote><h2 id="DEVICE-INDEPENDENCE-设备无关性"><a href="#DEVICE-INDEPENDENCE-设备无关性" class="headerlink" title="DEVICE INDEPENDENCE 设备无关性"></a>DEVICE INDEPENDENCE 设备无关性</h2><p>As an example of this kind of thinking, let’s take a trip back to the 1960s, when computers were teenagers and most programmers were mathematicians or engineers from other disciplines (and-one third or more were women).</p><blockquote><p>如果想要找反映这方面思想的例子，我们还得先回到 20 世纪 60 年代。由于当时的计算机行业还处于萌芽阶段，大部分程序员都来自数学专业，或者是其他工程类专业（当时超过三分之一的程序员是女性）。</p></blockquote><p>In those days we made a lot of mistakes. We didn’t know they were mistakes at the time, of course. How could we?</p><blockquote><p>当时，我们曾经犯过很多错误，而且还没有人知道那些是错误。当然了，那时候我们怎么可能知道?</p></blockquote><p>One of those mistakes was to bind our code directly to the IO devices. If we needed to print something on a printer, we wrote code that used the IO instructions that would control the printer. Our code was device dependent.</p><blockquote><p>其中一个错误就是将代码与 I&#x2F;O 设备直接紧密地绑定在一起。当时，如果我们需要用打印机打印东西，就得专门写一段 I&#x2F;O 指令来操作打印机，因此我们的代码是依赖于设备的。</p></blockquote><p>For example, when I wrote PDP-8 programs that printed on the teleprinter, I used a set of machine instructions that looked like this:</p><blockquote><p>例如，当我们要写一段要在电传打印机上输出的 PDP-8 程序时，需要用到像下面这样一组机器指令：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PRTCHR, 0</span><br><span class="line">        TSF</span><br><span class="line">        JMP .-1</span><br><span class="line">        TLS</span><br><span class="line">        JMP I PRTCHR</span><br></pre></td></tr></table></figure><p>PRTCHR is a subroutine that prints one character on the teleprinter. The beginning zero was used as the storage for the return address. (Don’t ask.) The TSF instruction skipped the next instruction if the teleprinter was ready to print a character. If the teleprinter was busy, then TSF just fell through to the JMP .-1 instruction, which just jumped back to the TSF instruction. If the teleprinter was ready, then TSF would skip to the TLS instruction, which sent the character in the A register to the teleprinter. Then the JMP I PRTCHR instruction returned to the caller.</p><blockquote><p>这里的 PRTCHR 是电传打印机上一段用来打印字符的子程序。首语句中的 0 是存储其返回地址用的（这里就不要细究这些了）。下来是 TSF 指令，它的作用是告诉电传三印机如果准备就绪，就跳过下一指令。如果电传打印机处于繁忙状态，就继续执行 <code>JMP.-1</code> 指令，也就是再跳转回 TSF 指令。一旦电传打印机处于就绪状态，TSF 就会跳转到 TLS 指令，该指令会将 A 寄存器中保存的要打印的字符发送给电传打印机。随后，JMP I PRTCHR 指令会将程序返回给调用方。</p></blockquote><p>At first this strategy worked fine. If we needed to read cards from the card reader, we used code that talked directly to the card reader. If we needed to punch cards, we wrote code that directly manipulated the punch. The programs worked perfectly. How could we know this was a mistake?</p><blockquote><p>一开始，这一策略工作起来完全没有问题。如果我们需要从读卡器中读取卡片，我们就直接用代码与读卡器进行交互。如果我们需要在卡上打孔，就写一段代码直接控制打卡的过程。整套程序运行得非常完美。我们当时怎么会知道这是一个错误呢？</p></blockquote><p>But big batches of punched cards are difficult to manage. They can be lost, mutilated, spindled, shuffled, or dropped. Individual cards can be lost and extra cards can be inserted. So data integrity became a significant problem.</p><blockquote><p>然而，管理大量的卡片是一件很麻烦的事。这些卡片可能会出现丢失、损坏、旋转、排序错误等问题。各部分的卡片都有可能丢失或混入多余的卡片，保持数据的一致性是当时的一大难题。</p></blockquote><p>Magnetic tape was the solution. We could move the card images to tape. If you drop a magnetic tape, the records don’t get shuffled. You can’t accidentally lose a record, or insert a blank record simply by handing the tape. The tape is much more secure. It’s also faster to read and write, and it is very easy to make backup copies.</p><blockquote><p>后来就出现了磁带这种解决方案。它允许我们将原本打在卡片上的图像存储在磁带上。如果磁带不小心掉在地上，不会出现顺序被打乱的问题，我们也不会因此意外丢失记录，或者处理磁带时意外插入空白记录。显然，磁带是更安全的选择，而且它的读取和写入也更快，同时也很容易进行备份。</p></blockquote><p>Unfortunately, all our software was written to manipulate card readers and card punches. Those programs had to be rewritten to use magnetic tape. That was a big job.</p><blockquote><p>但不幸的是，我们当时所有的软件都是用于直接操作读卡器和打卡器的。为了让这些软件改用磁带，我们不得不花很大的力气重新修改代码。</p></blockquote><p>By the late 1960s, we had learned our lesson—and we invented device independence. The operating systems of the day abstracted the IO devices into software functions that handled unit records that looked like cards. The programs would invoke operating system services that dealt with abstract unit-record devices. Operators could tell the operating system whether those abstract services should be connected to card readers, magnetic tape, or any other unit-record device.</p><blockquote><p>到了 20 世纪 60 年代末期，我们己经吸取了这个教训，并为此提出了设备无关性这个概念。当时的操作系统会将 I&#x2F;O 设备抽象成打孔卡那样的，处理一条条记录的标准软件函数。我们写的程序会通过调用操作系统提供的服务来与抽象的记录处理函数进行交互。而系统运行人员可以将操作系统的抽象设备与具体的读卡器、磁带读取器以及其他类似的设备进行对接。</p></blockquote><p>Now the same program could read and write cards, or read and write tape, without any change. The Open–Closed Principle was born (but not yet named).</p><blockquote><p>这样一来，同一段程序不经任何修改就既可以读&#x2F;写卡片，也可以读&#x2F;写磁带。开闭原则（OCP）此时就诞生了（当然，那时候还不叫这个名字）。</p></blockquote><h2 id="JUNK-MAIL-垃圾邮件"><a href="#JUNK-MAIL-垃圾邮件" class="headerlink" title="JUNK MAIL 垃圾邮件"></a>JUNK MAIL 垃圾邮件</h2><p>In the late 1960s, I worked for a company that printed junk mail for clients. The clients would send us magnetic tapes with unit records containing the names and addresses of their customers, and we would write programs that printed nice personalized advertisements.</p><blockquote><p>20 世纪 60 年底末期，我曾经在一家为客户打印群发垃圾邮件的公司工作。当时，客户会将一条条与消费者名字和地址相关的记录存储在磁带中并寄给我们，我们则负责编写程序为他们打印个人化的广告。</p></blockquote><p>You know the kind:</p><p>Hello Mr. Martin,</p><p>Congratulations!</p><p>We chose YOU from everyone else who lives on Witchwood Lane to participate in our new fantastic one-time-only offering…</p><hr><blockquote><p>相信下面这些邮件读者一定不陌生。</p><p>Hello，马丁先生：</p><p>恭喜！</p><p>您是 Witchwood Lane 上唯一被选中参加我们仅有一次的特惠活动…</p></blockquote><p>The clients would send us huge rolls of form letters with all the words except the name and address, and any other element they wanted us to print. We wrote programs that extracted the names, addresses, and other elements from the magnetic tape, and printed those elements exactly where they needed to appear on the forms.</p><blockquote><p>客户会给我们寄来一大卷信纸，其中的姓名和地址留空，其他文字都已经填好。我们的程序需要从磁带上读取姓名、地址等信息，然后将这些信息精确地打印在信纸上的对应位置。</p></blockquote><p>These rolls of form letters weighed 500 pounds and contained thousands of letters. Clients would send us hundreds of these rolls. We would print each one individually.</p><blockquote><p>这样的每一卷信纸里面有几千封信，重量近 500 磅，而且通常有数百卷之多，我们必须一封一封地打印。</p></blockquote><p>At first, we had an IBM 360 doing the printing on its sole line printer. We could print a few thousand letters per shift. Unfortunately, this tied up a very expensive machine for a very long time. In those days, IBM 360s rented for tens of thousands of dollars per month.</p><blockquote><p>起初，我们使用的是 IBM 360 自带的单行打印机，它每个工作日可以打印几千张。但是，当时 IBM 360 每个月的租金要几万美金，成本太高了。</p></blockquote><p>So we told the operating system to use magnetic tape instead of the line printer. Our programs didn’t care, because they had been written to use the IO abstractions of the operating system.</p><blockquote><p>这时候，我们只需要让操作系统放弃单行打印机，改用磁带即可，我们的程序不需要做任何的改动，因为它们使用的是操作系统提供的抽象 I&#x2F;O 设备接口。</p></blockquote><p>The 360 could pump out a full tape in 10 minutes or so—enough to print several rolls of form letters. The tapes were taken outside of the computer room and mounted on tape drives connected to offline printers. We had five of them, and we ran those five printers 24 hours per day, seven days per week, printing hundreds of thousands of pieces of junk mail every week.</p><blockquote><p>而且 IBM 360 机器每 10 分钟就可以写满一卷磁带——这一时间足够单行打印机打印几卷信纸了。然后这些磁带可以从计算机上取下，装载到离线打印机上进行离线打印。当时我们有五台这样的打印机，它们可以 7x24 小时不停地工作，每周可以打印几十万封信。</p></blockquote><p>The value of device independence was enormous! We could write our programs without knowing or caring which device would be used. We could test those programs using the local line printer connected to the computer. Then we could tell the operating system to “print” to magnetic tape and run off hundreds of thousands of forms.</p><blockquote><p>设备无关性的价值真是太巨大了！它使我们的程序不再需要关心具体使用的 I&#x2F;O 设备。这样一来，我们可以用本地连接的打印机来调试程序，随后将它“打印”到磁带卷上，并放到离线打印机上进行批量打印。</p></blockquote><p>Our programs had a shape. That shape disconnected policy from detail. The policy was the formatting of the name and address records. The detail was the device. We deferred the decision about which device we would use.</p><blockquote><p>这段程序是有架构设计的，并且在设计中实现了高层策略与底层实现细节的分离。其策略部分负责格式化姓名和地址，细节部分负责操作具体的 I&#x2F;O 设备。而我们具体采用哪个设备的决策是最后才做出的。</p></blockquote><h2 id="PHYSICAL-ADDRESSING-物理地址寻址"><a href="#PHYSICAL-ADDRESSING-物理地址寻址" class="headerlink" title="PHYSICAL ADDRESSING 物理地址寻址"></a>PHYSICAL ADDRESSING 物理地址寻址</h2><p>In the early 1970s, I worked on a large accounting system for a local truckers union. We had a 25MB disk drive on which we stored records for Agents, Employers, and Members. The different records had different sizes, so we formatted the first few cylinders of the disk so that each sector was just the size of an Agent record. The next few cylinders were formatted to have sectors that fit the Employer records. The last few cylinders were formatted to fit the Member records.</p><blockquote><p>20 世纪 70 年代早期，我曾为本地卡车工会编写过一套大型的账务系统。当时，Agent、Employer、Member 这些记录都被存储在一块 25MB 大小的磁盘上。由于不同的记录尺寸不同，所以我们将磁盘的前几个柱面（cylinder）按 Agent 记录的大小格式化每个扇区，中间的按 Employer 记录的大小格式化，最后几个柱面按照 Member 记录的大小格式化。</p></blockquote><p>We wrote our software to know the detailed structure of the disk. It knew that the disk had 200 cylinders and 10 heads, and that each cylinder had several dozen sectors per head. It knew which cylinders held the Agents, Employers, and Members. All this was hard-wired into the code.</p><blockquote><p>当时我们编写的软件需要知道硬盘的具体结构。它知道每个硬盘包含 200 个柱面，10 个磁头，每个柱面每个磁头有几十个扇区。它也知道哪些柱面上包含的是 Agent 记录，哪些柱面上包含的是 Employer 和 Member 记录，我们对所有的这些都进行了硬编码。</p></blockquote><p>We kept an index on the disk that allowed us to look up each of the Agents, Employers, and Members. This index was in yet another specially formatted set of cylinders on the disk. The Agent index was composed of records that contained the ID of an agent, and the cylinder number, head number, and sector number of that Agent record. Employers and Members had similar indices. Members were also kept in a doubly linked list on the disk. Each Member record held the cylinder, head, and sector number of the next Member record, and of the previous Member record.</p><blockquote><p>另外，我们还在磁盘上保留了一个索引，以方便后续的记录查询。该索引也是通过一个特别的格式被存储到磁盘上的。譬如说，Agent 记录的索引中每条记录包括 Agent 的 ID，以及对应的柱面号码、磁头号码、扇区号码。Employer 和 Member 的索引也有类似的结构。其中，Member 记录用一种双向链表结构存储在磁盘上。每条 Member 记录都会包含前一个和后一个 Member 记录所在的柱面号码、磁头号码、扇区号码。</p></blockquote><p>What would happen if we needed to upgrade to a new disk drive—one with more heads, or one with more cylinders, or one with more sectors per cylinder? We had to write a special program to read in the old data from the old disk, and then write it out to the new disk, translating all of the cylinder&#x2F;head&#x2F;sector numbers. We also had to change all the hard-wiring in our code—and that hard-wiring was everywhere! All the business rules knew the cylinder&#x2F;head&#x2F;sector scheme in detail.</p><blockquote><p>在这种情况下，如果我们升级新硬盘会发生什么呢？新硬盘可能会有更多的磁头，更多的柱面，或是每个柱面有更多的扇区。这时候，我们就必须编写一介特殊的程序从旧磁盘读取数据，并将其写入新磁盘，同时换掉柱面、磁头、扇区的值。另外，我们还要修改代码中所有硬编码的部分——这样的代码到处都是! 毕竟我们所有的业务逻辑都和柱面、磁头、扇区的分配方案紧密地耦合在了一起。</p></blockquote><p>One day a more experienced programmer joined our ranks. When he saw what we had done, the blood drained from his face, and he stared aghast at us, as if we were aliens of some kind. Then he gently advised us to change our addressing scheme to use relative addresses.</p><blockquote><p>直到有一天，一位更有经验旳程序员加入了我们的团队。当他看到我们的程序实现逻辑时差点吐血，就像见到外星人一样盯着我们看了半天。随后，他温柔地建议我们改用相对地址方式来寻址。</p></blockquote><p>Our wiser colleague suggested that we consider the disk to be one huge linear array of sectors, each addressable by a sequential integer. Then we could write a little conversion routine that knew the physical structure of the disk, and could translate the relative address to a cylinder&#x2F;head&#x2F;sector number on the fly.</p><blockquote><p>这位聪明的同事建议我们将磁盘当成一个扇区的线性队別来处理，用一串连续的整数来对每个扇区进行寻址。然后，我们可以编写一个针对磁盘物理结构的转换程序，以便将这些相对地址在线转换为柱面、磁头、扇区的号码。</p></blockquote><p>Fortunately for us, we took his advice. We changed the high-level policy of the system to be agnostic about the physical structure of the disk. That allowed us to decouple the decision about disk drive structure from the application.</p><blockquote><p>幸运的是，我们釆纳了他的建议。我们修改了系统的高层策略，使其与磁盘的物理结构脱钩。这样一来，我们就可以将具体选择哪种磁盘的决策从该应用程序中分离出来。</p></blockquote><h2 id="CONCLUSION-本章小结-13"><a href="#CONCLUSION-本章小结-13" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>The two stories in this chapter are examples, in the small, of a principle that architects employ in the large. Good architects carefully separate details from policy, and then decouple the policy from the details so thoroughly that the policy has no knowledge of the details and does not depend on the details in any way. Good architects design the policy so that decisions about the details can be delayed and deferred for as long as possible.</p><blockquote><p>在本章中，我们用两个小故事示范了一些架构师们普遍会采用的设计原则。优秀的架构师会小心地将软件的高层策略与其底层实现隔离开，让高层策略与实现细节脱钩，使其策略部分完全不需要关心底层细节，当然也不会对这些细节有任何形式的依赖。另外，优秀的架构师所设计的策略应该允许系统尽可能地推迟与实现细节相关的决策，越晚做决策越好。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap16-INDEPENDENCE-独立性"><a href="#Chap16-INDEPENDENCE-独立性" class="headerlink" title="Chap16. INDEPENDENCE 独立性"></a>Chap16. INDEPENDENCE 独立性</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN16.jpg"></p><p>As we previously stated, a good architecture must support:</p><blockquote><p>正如我们之前所述，</p></blockquote><ul><li>The use cases and operation of the system.</li><li>The maintenance of the system.</li><li>The development of the system.</li><li>The deployment of the system.</li></ul><hr><blockquote><ul><li>系统的用例与正常运行。</li><li>系统的维护。</li><li>系统的开发。</li><li>系统的部署。</li></ul></blockquote><h2 id="USE-CASES-用例"><a href="#USE-CASES-用例" class="headerlink" title="USE CASES 用例"></a>USE CASES 用例</h2><p>The first bullet—use cases—means that the architecture of the system must support the intent of the system. If the system is a shopping cart application, then the architecture must support shopping cart use cases. Indeed, this is the first concern of the architect, and the first priority of the architecture. The architecture must support the use cases.</p><blockquote><p>我们先来看第一个支持目标：用例。我们认为一个系统的架构必须能够支持其自身的设计意图。也就是说，如果某系统是一个购物车应用，那么该系统的架构就必须非常直观地支持这类应用可能会涉及的所有用例。事实上，这本来就是架构师们首先要关注的问题，也是架构设计过程中的首要工作。软件的架构必须为其用例提供支持。</p></blockquote><p>However, as we discussed previously, architecture does not wield much influence over the behavior of the system. There are very few behavioral options that the architecture can leave open. But influence isn’t everything. The most important thing a good architecture can do to support behavior is to clarify and expose that behavior so that the intent of the system is visible at the architectural level.</p><blockquote><p>然而，正如我们前面所讨论的，一个系统的架构对其行为并没有太大的影响。虽然架构也可以限制一些行为选项，但这种影响所涉及的范围并不大。一个设计良好的架构在行为上对系统最重要的作用就是明确和显式地反映系统设计意图的行为，使其在架构层面上可见。</p></blockquote><p>A shopping cart application with a good architecture will look like a shopping cart application. The use cases of that system will be plainly visible within the structure of that system. Developers will not have to hunt for behaviors, because those behaviors will be first-class elements visible at the top level of the system. Those elements will be classes or functions or modules that have prominent positions within the architecture, and they will have names that clearly describe their function.</p><blockquote><p>譬如说，一个架构优良的购物车应用看起来就该像是一个购物车应用。该系统的主要用例会在其系统结构上明确可见。开发人员将不需要在系统中查找系统所应有的行为，因为这些行为在系统顶层作为主要元素已经是明确可见的了，这些元素会以类、函数或模块的形式在架构中占据明显位置，它们的名字也能够清晰地描述对应的功能。</p></blockquote><p>Chapter 21, “Screaming Architecture,” will make this point much clearer.</p><blockquote><p>在第 21 章“尖叫的软件架构”中，我们还会更详细地解释这部分内容。</p></blockquote><h2 id="OPERATION-运行"><a href="#OPERATION-运行" class="headerlink" title="OPERATION 运行"></a>OPERATION 运行</h2><p>Architecture plays a more substantial, and less cosmetic, role in supporting the operation of the system. If the system must handle 100,000 customers per second, the architecture must support that kind of throughput and response time for each use case that demands it. If the system must query big data cubes in milliseconds, then the architecture must be structured to allow this kind of operation.</p><blockquote><p>架构在支持系统运行方面扮演着更实际的角色。如果某个系统每秒要处理 100 000 个用户，该系统的架构就必须能支持这种级别的吞吐量和响应时间。同样的，如果某个系统要在毫秒级的时间内完成对大数据仓库的查询，那么该系统的架构也必须能支持这类操作。</p></blockquote><p>For some systems, this will mean arranging the processing elements of the system into an array of little services can be run in parallel on many different servers. For other systems, it will mean a plethora of little lightweight threads sharing the address space of a single process within a single processor. Still other systems will need just a few processes running in isolated address spaces. And some systems can even survive as simple monolithic programs running in a single process.</p><blockquote><p>对一些系统来说，这意味着它的架构应该支持将其计算部分拆分成一系列小型服务，然后让它们并行运行在不同的服务器上。而在另一些系统中，采用一堆轻量级线程，然后让这些线程共享一个运行在单处理器上的进程的地址空间。还有一些系统，它们可能只是一组运行在独立地址空间内的进程。甚至有些系统设计为一个单进程的单体程序就够了。</p></blockquote><p>As strange as it may seem, this decision is one of the options that a good architect leaves open. A system that is written as a monolith, and that depends on that monolithic structure, cannot easily be upgraded to multiple processes, multiple threads, or micro-services should the need arise. By comparison, an architecture that maintains the proper isolation of its components, and does not assume the means of communication between those components, will be much easier to transition through the spectrum of threads, processes, and services as the operational needs of the system change over time.</p><blockquote><p>虽然看起来有点奇怪，但上述问题的决策的确也应该属于一个优秀的架构师为我们保留的可选项之一。毕竟一个按照单体模式编写的系统，它依赖的必然是单体结构，之后再想把它改造成多进程、多线程或微服务模式可就没有那么容易了。相比之下，如果该系统的架构能够在其组件之间做一些适当的隔离，同时不强制规定组件之间的交互方式，该系统就可以随时根据不断变化的运行需求来转换成各种运行时的线程、进程或服务模型。</p></blockquote><h2 id="DEVELOPMENT-开发"><a href="#DEVELOPMENT-开发" class="headerlink" title="DEVELOPMENT 开发"></a>DEVELOPMENT 开发</h2><p>Architecture plays a significant role in supporting the development environment. This is where Conway’s law comes into play. Conway’s law says:</p><blockquote><p>系统的架构在支持开发环境方面当然扮演着重要的角色，我们在这里可以引述一下康威定律：</p></blockquote><p>Any organization that designs a system will produce a design whose structure is a copy of the organization’s communication structure.</p><blockquote><p>任何一个组织在设计系统时，往往都会复制出一个与该组织内沟通结构相同的系统。</p></blockquote><p>A system that must be developed by an organization with many teams and many concerns must have an architecture that facilitates independent actions by those teams, so that the teams do not interfere with each other during development. This is accomplished by properly partitioning the system into well-isolated, independently developable components. Those components can then be allocated to teams that can work independently of each other.</p><blockquote><p>一个由多个不同目标的团队协作开发的系统必须具有相应的软件架构。这样，这些团队才可以各自独立地完成工作，不会彼此干扰。这就需要恰当地将系统切分为一系列隔离良好、可独立开发的组件。然后才能将这些组件分配给不同的团队各自独立开发。</p></blockquote><h2 id="DEPLOYMENT-部署"><a href="#DEPLOYMENT-部署" class="headerlink" title="DEPLOYMENT 部署"></a>DEPLOYMENT 部署</h2><p>The architecture also plays a huge role in determining the ease with which the system is deployed. The goal is “immediate deployment.” A good architecture does not rely on dozens of little configuration scripts and property file tweaks. It does not require manual creation of directories or files that must be arranged just so. A good architecture helps the system to be immediately deployable after build.</p><blockquote><p>一个系统的架构在其部署的便捷性方面起到的作用也是非常大的。设计目标一定是实现“立刻部署”。一个设计良好的架构通常不会依赖于成堆的脚本与配置文件，也不需要用户手动创建一堆“有严格要求”的目录与文件。总而言之，一个设计良好的软件架构可以让系统在构建完成之后立刻就能部署。</p></blockquote><p>Again, this is achieved through the proper partitioning and isolation of the components of the system, including those master components that tie the whole system together and ensure that each component is properly started, integrated, and supervised.</p><blockquote><p>同样的，这些也需要通过正确地划分、隔离系统组件来实现，这其中包括开发一些主组件，让它们将整个系统黏合在一起，正确地启动、连接并监控每个组件。</p></blockquote><h2 id="LEAVING-OPTIONS-OPEN-保留可选项"><a href="#LEAVING-OPTIONS-OPEN-保留可选项" class="headerlink" title="LEAVING OPTIONS OPEN 保留可选项"></a>LEAVING OPTIONS OPEN 保留可选项</h2><p>A good architecture balances all of these concerns with a component structure that mutually satisfies them all. Sounds easy, right? Well, it’s easy for me to write that.</p><blockquote><p>一个设计良好的架构应该充分地权衡以上所述的所有关注点，然后尽可能塔成一个可以同时满足所有需求的组件结构。这说起来还挺容易的，不是吗？</p></blockquote><p>The reality is that achieving this balance is pretty hard. The problem is that most of the time we don’t know what all the use cases are, nor do we know the operational constraints, the team structure, or the deployment requirements. Worse, even if we did know them, they will inevitably change as the system moves through its life cycle. In short, the goals we must meet are indistinct and inconstant. Welcome to the real world.</p><blockquote><p>事实上，要实现这种平衡是很困难的。主要问题是，我们在大部分时间里无法预知系统的所有用例的，而且我们也无法提前预知系统的运行条件、开发团队的结构，或者系统的部署需求。更糟糕的是，就算我们能提前了解这些需求，随着系统生命周期的演进，这些需求也会不可避免地发生变化。总而言之，事实上我们想要达到的目标本身就是模糊多变的。真实的世界就这样。</p></blockquote><p>But all is not lost: Some principles of architecture are relatively inexpensive to implement and can help balance those concerns, even when you don’t have a clear picture of the targets you have to hit. Those principles help us partition our systems into well-isolated components that allow us to leave as many options open as possible, for as long as possible.</p><blockquote><p>然而，我们还是可以通过采用一些实现成本较低的架构原则来做一些事情的。虽然我们没有清晰的目标，但采用一些原则总是有助于提前解决一些平衡问题。通过遵守这些原则可以帮助我们正确地划分为一些隔离良好的组件，以便尽可能长时间地为我们的未来保留尽可能多的可选项。</p></blockquote><p>A good architecture makes the system easy to change, in all the ways that it must change, by leaving options open.</p><blockquote><p>一个设计良好的架构应该通过保留可选项的方式，让系统在任何情况下都能方便地做出必要的变更。</p></blockquote><h2 id="DECOUPLING-LAYERS-按层解耦"><a href="#DECOUPLING-LAYERS-按层解耦" class="headerlink" title="DECOUPLING LAYERS 按层解耦"></a>DECOUPLING LAYERS 按层解耦</h2><p>Consider the use cases. The architect wants the structure of the system to support all the necessary use cases, but does not know what all those use cases are. However, the architect does know the basic intent of the system. It’s a shopping cart system, or it’s a bill of materials system, or it’s an order processing system. So the architect can employ the Single Responsibility Principle and the Common Closure Principle to separate those things that change for different reasons, and to collect those things that change for the same reasons—given the context of the intent of the system.</p><blockquote><p>从用例的角度来看，架构师的目标是让系统结构支持其所需要的所有用例。但是问题恰恰是我们无法预知全部的用例。好在架构师应该还是知道整个系统的基本设计意图的。也就是说，架构师应该知道自己要设计的是一个购物车系统，或是运输清单系统，还是订单处理系统。所以架构师可以通过采用单一职责原则（SRP）和共同闭包原则（CCP），以及既定的系统设计意图来隔离那些变更原因不同的部分，集成变更原因相同的部分。</p></blockquote><p>What changes for different reasons? There are some obvious things. User interfaces change for reasons that have nothing to do with business rules. Use cases have elements of both. Clearly, then, a good architect will want to separate the UI portions of a use case from the business rule portions in such a way that they can be changed independently of each other, while keeping those use cases visible and clear.</p><blockquote><p>哪些部分的变更原因是不同的呢？这在有些情况下是很显而易见的。譬如，用户界面的变更原因肯定和业务逻辑是不相关的，而业务用例则通常在两边都存在着相关的元素。所以很显然，优秀的架构师应该会将用例的 UI 部分与其业务逻辑部分隔离，这样这两部分就既可以各自进行变更，也能保证用例的完整清晰。</p></blockquote><p>Business rules themselves may be closely tied to the application, or they may be more general. For example, the validation of input fields is a business rule that is closely tied to the application itself. In contrast, the calculation of interest on an account and the counting of inventory are business rules that are more closely associated with the domain. These two different kinds of rules will change at different rates, and for different reasons—so they should be separated so that they can be independently changed.</p><blockquote><p>而业务逻辑则既可以是与应用程序紧密相关的，也可以是更具有普适性的。例如，对输入字段的校验是一个与应用程序本身紧密相关的业务逻辑。相反，计算账户利息以及清点库存则是一个与具体领域更为相关的业务逻辑。这两种不同的业务逻辑通常有着不同的变更速率和变更原因——它们应该被相互隔离，以方便各自的变更。</p></blockquote><p>The database, the query language, and even the schema are technical details that have nothing to do with the business rules or the UI. They will change at rates, and for reasons, that are independent of other aspects of the system. Consequently, the architecture should separate them from the rest of the system so that they can be independently changed.</p><blockquote><p>至于数据库，以及其所采用的查询语言，甚至表结构，这些都是系统的技术细节信息，它们与业务规则或 UI 毫无关系。这就意味着它们的变更原因、变更速率必然与系统的其他方面各不相同。因此，架构师也应该将它们与系统其他部分隔离，以方便各自的变更。</p></blockquote><p>Thus we find the system divided into decoupled horizontal layers—the UI, application-specific business rules, application-independent business rules, and the database, just to mention a few.</p><blockquote><p>这样一来，我们就发现了一个系统可以被解耦成若干个水平分层应用独有的业务逻辑、领域普适的业务逻辑、数据库等。</p></blockquote><h2 id="DECOUPLING-USE-CASES-用例的解耦"><a href="#DECOUPLING-USE-CASES-用例的解耦" class="headerlink" title="DECOUPLING USE CASES 用例的解耦"></a>DECOUPLING USE CASES 用例的解耦</h2><p>What else changes for different reasons? The use cases themselves! The use case for adding an order to an order entry system almost certainly will change at a different rate, and for different reasons, than the use case that deletes an order from the system. Use cases are a very natural way to divide the system.</p><blockquote><p>接下来，还有什么不同的原因的变更呢？答案正是这些用例本身！譬如说，添加新订单的用例与删除订单的用例在发生变更的原因上几乎肯定是不同的，而且发生变更的速率也不同。因此，我们按照用例来切分系统是非常自然的选择。</p></blockquote><p>At the same time, use cases are narrow vertical slices that cut through the horizontal layers of the system. Each use case uses some UI, some application-specific business rules, some application-independent business rules, and some database functionality. Thus, as we are dividing the system in to horizontal layers, we are also dividing the system into thin vertical use cases that cut through those layers.</p><blockquote><p>与此同时，这些用例也是上述系统水平分层的一个个垂直切面。每个用例都会用到一些 UI、特定应用的业务逻辑、应用无关的业务逻辑以及数据库功能。因此，我们时系统水平切分成多个分层的同时，也在按用例将其切分成多个垂直切分。</p></blockquote><p>To achieve this decoupling, we separate the UI of the add-order use case from the UI of the delete-order use case. We do the same with the business rules, and with the database. We keep the use cases separate down the vertical height of the system.</p><blockquote><p>为了实现这样的解耦，我们应该将增加订单这个用例的 UI 与删除订单用例的 UI 分开。而且，对业务逻辑的部分、数据库的部分，也要做同样的事情，将其按照用例进行垂直切分。</p></blockquote><p>You can see the pattern here. If you decouple the elements of the system that change for different reasons, then you can continue to add new use cases without interfering with old ones. If you also group the UI and database in support of those use cases, so that each use case uses a different aspect of the UI and database, then adding new use cases will be unlikely to affect older ones.</p><blockquote><p>由此，我们可以总结出一个模式：如果我们按照变更原因的不同对系统进行解耦，就可以持续地向系统内添加新的用例，而不会影响旧有的用例。如果我们同时对支持这些用例的 UI 和数据库也进行了分组，那么每个用例使用的就是不同面向的 UI 与数据库，因此增加新用例就更不太可能会影响旧有的用例了。</p></blockquote><h2 id="DECOUPLING-MODE-解耦的模式"><a href="#DECOUPLING-MODE-解耦的模式" class="headerlink" title="DECOUPLING MODE 解耦的模式"></a>DECOUPLING MODE 解耦的模式</h2><p>Now think of what all that decoupling means for the second bullet: operations. If the different aspects of the use cases are separated, then those that must run at a high throughput are likely already separated from those that must run at a low throughput. If the UI and the database have been separated from the business rules, then they can run in different servers. Those that require higher bandwidth can be replicated in many servers.</p><blockquote><p>现在我们来想想所有的这些解耦动作对架构设计的第二个目标——系统运行——究竟有什么意义。如果不同面向之间的用例得到了良好的隔离，那么需要高吞吐量的用例就和需要低吞吐量的用例互相自然分开了。如果 UI 和数据库的部分能从业务逻辑分离出来，那么它们就可以运行在不同的服务器上。而且需要较大带宽的应用也可以在多个服务器上运行多个实例。</p></blockquote><p>In short, the decoupling that we did for the sake of the use cases also helps with operations. However, to take advantage of the operational benefit, the decoupling must have the appropriate mode. To run in separate servers, the separated components cannot depend on being together in the same address space of a processor. They must be independent services, which communicate over a network of some kind.</p><blockquote><p>总而言之，这种按用例解耦的动作是有利于系统运行的。然而出于系统运行效率的考虑，我们旳解耦动作还应该注意选择恰当的模式。譬如，为了在不同的服务器上运行，被隔离的组件不能依赖于某个处理器上的同一个地址空间，它们必须是独立的服务，然后通过某种网络来进行通信。</p></blockquote><p>Many architects call such components “services” or “micro-services,” depending upon some vague notion of line count. Indeed, an architecture based on services is often called a service-oriented architecture.</p><blockquote><p>许多架构帅将上面这种组件称为“服务”，或“微服务”，至于是前者还是后者，往往取决于某些非常模糊的代码行数阈值。对于这种基于服务来构建的架构，架构师们通常称之为面向服务的架构（service-oriented architecture）。</p></blockquote><p>If that nomenclature set off some alarm bells in your mind, don’t worry. I’m not going to tell you that SoA is the best possible architecture, or that micro-services are the wave of the future. The point being made here is that sometimes we have to separate our components all the way to the service level.</p><blockquote><p>如果因为这里提到了 SOA 这个概念而引起了某些读者的警觉，请不用担心，在这里并没有鼓吹 SOA 是一种最佳的软件架构，或者微服务就是未来的潮流。我只是认为有时候我们必须把组件切割到服务这个应用层次。</p></blockquote><p>Remember, a good architecture leaves options open. The decoupling mode is one of those options.</p><blockquote><p>请记住，一个设计良好的架构总是要为将来多留一些可选项，这里所讨论的解耦模式也是这样的可选项之一。</p></blockquote><p>Before we explore that topic further, let’s look to the other two bullets.</p><blockquote><p>接下来，在我们继续深入探讨这个话题之前，先回过头来看看其他两个设计目标。</p></blockquote><h2 id="INDEPENDENT-DEVELOP-ABILITY-开发的独立性"><a href="#INDEPENDENT-DEVELOP-ABILITY-开发的独立性" class="headerlink" title="INDEPENDENT DEVELOP-ABILITY 开发的独立性"></a>INDEPENDENT DEVELOP-ABILITY 开发的独立性</h2><p>The third bullet was development. Clearly when components are strongly decoupled, the interference between teams is mitigated. If the business rules don’t know about the UI, then a team that focuses on the UI cannot much affect a team that focuses on the business rules. If the use cases themselves are decoupled from one another, then a team that focuses on the addOrder use case is not likely to interfere with a team that focuses on the deleteOrder use case.</p><blockquote><p>我们进行架构设计的第三个目标是支持系统的开发。很显然，当系统组件之间被高度解耦之后，开发团队之间的干扰就大大减少了。譬如说，如果系统的业务逻辑与其 UI 无关，那么专注于 UI 开发的团队就不会对专注于业务逻辑开发的团队造成多大的影响。同样的，如果系统的各个用例之间相互隔离，那么专注于 addOrder 用例的团队就不太可能干扰到负责 deleteOrder 用例的团队。</p></blockquote><p>So long as the layers and use cases are decoupled, the architecture of the system will support the organization of the teams, irrespective of whether they are organized as feature teams, component teams, layer teams, or some other variation.</p><blockquote><p>只要系统按照其水平分层和用例进行了恰当的解耦，整个系统的架构就可以支持多团队开发，不管团队组织形式是分功能开发、分组件开发、分层开发，还是按照别的什么变量分工都可以。</p></blockquote><h2 id="INDEPENDENT-DEPLOYABILITY-部署的独立性"><a href="#INDEPENDENT-DEPLOYABILITY-部署的独立性" class="headerlink" title="INDEPENDENT DEPLOYABILITY 部署的独立性"></a>INDEPENDENT DEPLOYABILITY 部署的独立性</h2><p>The decoupling of the use cases and layers also affords a high degree of flexibility in deployment. Indeed, if the decoupling is done well, then it should be possible to hot-swap layers and use cases in running systems. Adding a new use case could be as simple as adding a few new jar files or services to the system while leaving the rest alone.</p><blockquote><p>这种按用例和水平分层的解耦也会给系统的部署带来极大的灵活性。实际上，如果解耦工作做得好，我们甚至可以在系统运行过程中热切换（hot-swap）其各个分层实现和具体的用例。在这种情况下，我们增加新测试用例就只需要在系统中添加一些新的 jar 文件，或启动一些服务即可，其他部分将完全不受影响。</p></blockquote><h2 id="DUPLICATION-重复"><a href="#DUPLICATION-重复" class="headerlink" title="DUPLICATION 重复"></a>DUPLICATION 重复</h2><p>Architects often fall into a trap—a trap that hinges on their fear of duplication.</p><blockquote><p>架构师们经常会钻进一个牛角尖——害怕重复。</p></blockquote><p>Duplication is generally a bad thing in software. We don’t like duplicated code. When code is truly duplicated, we are honor-bound as professionals to reduce and eliminate it.</p><blockquote><p>当然，重复在软件行业里一般来说都是坏事。我们不喜欢重复的代码，当代码真的出现重复时，我们经常会感到作为一个专业人士’自己是有责任减少或消除这种重复的。</p></blockquote><p>But there are different kinds of duplication. There is true duplication, in which every change to one instance necessitates the same change to every duplicate of that instance. Then there is false or accidental duplication. If two apparently duplicated sections of code evolve along different paths—if they change at different rates, and for different reasons—then they are not true duplicates. Return to them in a few years, and you’ll find that they are very different from each other.</p><blockquote><p>但是重复也存在着很多种情况。其中有些是真正的重复，在这种情况下，每个实例上发生的每项变更都必须同时应用到其所有的副本上。重复的情况中也有一些是假的，或者说这种重复只是表面性的。如果有两段看起来重复的代码，它们走的是不同的演进路径，也就是说它们有着不同的变更速率和变更缘由，那么这两段代码就不是真正的重复。等我们几年后再回过头来看，可能就会发现这两段代码是非常不一样的了。</p></blockquote><p>Now imagine two use cases that have very similar screen structures. The architects will likely be strongly tempted to share the code for that structure. But should they? Is that true duplication? Or it is accidental?</p><blockquote><p>现在，我们假设某系统中有两个用例在屏幕展现形式上非常类似。每当这种时候，架构师们就很可能非常想复用同一段代码来处理它们的屏幕展示。那么，我们到底是否应该这样做呢？这里是真正的重复，还只是一种表面性的重复？</p></blockquote><p>Most likely it is accidental. As time goes by, the odds are that those two screens will diverge and eventually look very different. For this reason, care must be taken to avoid unifying them. Otherwise, separating them later will be a challenge.</p><blockquote><p>恐怕这里很可能只是表面性的重复。随着时间推移，这两个用例的屏幕展示功能可能会各自演变，最终很可能完全不同。正是由于这样的原因，我们必须加倍小心地避免让这两个用例复用同一段代码，否则，未来再想将它们分开会面临很大的挑战。</p></blockquote><p>When you are vertically separating use cases from one another, you will run into this issue, and your temptation will be to couple the use cases because they have similar screen structures, or similar algorithms, or similar database queries and&#x2F;or schemas. Be careful. Resist the temptation to commit the sin of knee-jerk elimination of duplication. Make sure the duplication is real.</p><blockquote><p>当我们按用例垂直切分系统时，这样的问题会经常出现。我们经常遇到一些不同的用例为了上述原因被耦合在了一起。不管是因为它们展现形式类似，还是使用了相似的语法、相似的数据库查询&#x2F;表结构等，总之，我们一定要小心避免对任何重复都要立即消除的应激反应模式中。一定要确保这些消除动作只针对那些真正意义上的重复。</p></blockquote><p>By the same token, when you are separating layers horizontally, you might notice that the data structure of a particular database record is very similar to the data structure of a particular screen view. You may be tempted to simply pass the database record up to the UI, rather than to create a view model that looks the same and copy the elements across. Be careful: This duplication is almost certainly accidental. Creating the separate view model is not a lot of effort, and it will help you keep the layers properly decoupled.</p><blockquote><p>同样的道理，当我们对系统进行水平分层时，也可能会发现某个数据库记录的结构和某个屏幕展示的数据接口非常相似。我们可能也会为了避免再创建一个看起来相同的视图模型并在两者之间复制元素，而选择直接将数据库记录传递给 UI 层。我们也一定要小心，这里几乎肯定只是一种表面性的重复。而且，另外创建一个视图模型并不会花费太多力气，这可以帮助我们保持系统水平分层之间的隔离。</p></blockquote><h2 id="DECOUPLING-MODES-AGAIN-再谈解耦模式"><a href="#DECOUPLING-MODES-AGAIN-再谈解耦模式" class="headerlink" title="DECOUPLING MODES (AGAIN) 再谈解耦模式"></a>DECOUPLING MODES (AGAIN) 再谈解耦模式</h2><p>Back to modes. There are many ways to decouple layers and use cases. They can be decoupled at the source code level, at the binary code (deployment) level, and at the execution unit (service) level.</p><blockquote><p>让我们再回到解耦模式的问题上来。按水平分层和用例解耦一个系统有很多种方式。例如，我们可以在源码层次上解耦、二进制层次上解耦（部署），也可以在执行单元层次上解耦（服务）。</p></blockquote><ul><li>Source level. We can control the dependencies between source code modules so that changes to one module do not force changes or recompilation of others (e.g., Ruby Gems).</li></ul><blockquote><ul><li>源码层次：我们可以控制源代码模块之间的依赖关系，以此来实现一个模块的变更不会导致其他模块也需要变更或重新编译（例如 Ruby Gem）。</li></ul></blockquote><p>In this decoupling mode the components all execute in the same address space, and communicate with each other using simple function calls. There is a single executable loaded into computer memory. People often call this a monolithic structure.</p><blockquote><p>在这种解耦模式下，系统所有的组件都会在同一个地址空间内执行，它们会通过简单的函数调用来进行彼此的交互。这类系统在运行时是作为一个执行文件被统一加载到计算机内存中的。人们经常把这种模式叫作单体结构。</p></blockquote><ul><li>Deployment level. We can control the dependencies between deployable units such as jar files, DLLs, or shared libraries, so that changes to the source code in one module do not force others to be rebuilt and redeployed.</li></ul><blockquote><ul><li>部署层次：我们可以控制部署单元（譬如 jar 文件、DLL、共享库等）之间 的依赖关系，以此来实现一个模块的变更不会导致其他模块的重新构建和部署。</li></ul></blockquote><p>Many of the components may still live in the same address space, and communicate through function calls. Other components may live in other processes in the same processor, and communicate through interprocess communications, sockets, or shared memory. The important thing here is that the decoupled components are partitioned into independently deployable units such as jar files, Gem files, or DLLs.</p><blockquote><p>在这种模式下，大部分组件可能还是依然运行在同一个地址空间内，通过彼此的函数调用通信。但有一些别的组件可能会运行在同一个处理器下的其他进程内，使用跨进程通信，或者通过 socket 或共享内存进行通信。这里最重要的是，这些组件的解耦产生出许多可独立部署的单元，例如 jar 文件、Gem 文件和 DLL 等。</p></blockquote><ul><li>Service level. We can reduce the dependencies down to the level of data structures, and communicate solely through network packets such that every execution unit is entirely independent of source and binary changes to others (e.g., services or micro-services).</li></ul><blockquote><ul><li>服务层次：我们可以将组件间的依赖关系降低到数据结构级别’然后仅通过网络数据包来进行通信。这样系统的每个执行单元在源码层和二进制层都会是一个独立的个体，它们的变更不会影响其他地方（例如常见的服务或微服务就都是如此的）。</li></ul></blockquote><p>What is the best mode to use?</p><blockquote><p>现在，我们要问的是究竟哪个模式是最好的呢？</p></blockquote><p>The answer is that it’s hard to know which mode is best during the early phases of a project. Indeed, as the project matures, the optimal mode may change.</p><blockquote><p>答案是，在项目早期很难知道哪种模式是最好的。事实上，随着项目的逐渐成熟，最好的模式可能会发生变化。</p></blockquote><p>For example, it’s not difficult to imagine that a system that runs comfortably on one server right now might grow to the point where some of its components ought to run on separate servers. While the system runs on a single server, the source-level decoupling might be sufficient. Later, however, it might require decoupling into deployable units, or even services.</p><blockquote><p>例如，我们不难想象，一个在某台服务器上运行良好的程序发展到一定程度，可能就会需要将其某些组件迁移到其他服务器上才能满足运行要求。当该系统只运行在一台服务器上时，我们进行源码层次的解耦就已经足够了。但在这之后，我们可能需要进行部署单元层次的解耦，甚至服务层次的解耦。</p></blockquote><p>One solution (which seems to be popular at the moment) is to simply decouple at the service level by default. A problem with this approach is that it is expensive and encourages coarse-grained decoupling. No matter how “micro” the micro-services get, the decoupling is not likely to be fine-grained enough.</p><blockquote><p>另一个解决方案（似乎也是目前最流行的方案）是，默认就采用服务层次的解耦。这种做法的问题主要在于它的成本很高，并且是在鼓励粗粒度的解耦。毕竟，无论微服务有多么“微”，其解耦的精细度都可能是不够的。</p></blockquote><p>Another problem with service-level decoupling is that it is expensive, both in development time and in system resources. Dealing with service boundaries where none are needed is a waste of effort, memory, and cycles. And, yes, I know that the last two are cheap—but the first is not.</p><blockquote><p>服务层次解耦的另一个问题是不仅系统资源成本高昂，而且研发成本更高。处理服务边界不仅非常耗费内存、处理器资源，而且更耗费人力。虽然内存和处理器越来越便宜，但是人力成本可一直都很高。</p></blockquote><p>My preference is to push the decoupling to the point where a service could be formed. should it become necessary; but then to leave the components in the same address space as long as possible. This leaves the option for a service open.</p><blockquote><p>通常，我会倾向于将系统的解耦推行到某种一旦有需要就可以随时转变为服务的程度即可，让整个程序尽量长时间地保持单体结构，以便给未来留下可选项。</p></blockquote><p>With this approach, initially the components are separated at the source code level. That may be good enough for the duration of the project’s lifetime. If, however, deployment or development issues arise, driving some of the decoupling to a deployment level may be sufficient—at least for a while.</p><blockquote><p>在这种方式下，系统最初的组件隔离措施都是做在源码层次上的，这样的解耦可能在整个项目的生命周期里已经足够了。然而，如果部署和开发方面有更高的需求出现，那么将某些组件解耦到部署单元层次就可能够了，起码能撑上一阵。</p></blockquote><p>As the development, deployment, and operational issues increase, I carefully choose which deployable units to turn into services, and gradually shift the system in that direction.</p><blockquote><p>当然，随着系统在开发、部署、运行各方面所面临问题持续增加，我们应该挑选一下可以将哪些可部署单元转化为服务，并且逐渐将系统向这个方向转变。</p></blockquote><p>Over time, the operational needs of the system may decline. What once required decoupling at the service level may now require only deployment-level or even source-level decoupling.</p><blockquote><p>而随着时间的流逝，系统的运维需求可能又会降低。之前需要进行服务层次解耦的系统可能现在只需要进行部署层次或源码层次的解耦就够了。</p></blockquote><p>A good architecture will allow a system to be born as a monolith, deployed in a single file, but then to grow into a set of independently deployable units, and then all the way to independent services and&#x2F;or micro-services. Later, as things change, it should allow for reversing that progression and sliding all the way back down into a monolith.</p><blockquote><p>一个设计良好的架构应该允许一个系统从单体结构开始，以单一文件的形式部署，然后逐渐成长为一组相互独立的可部署单元，甚至是独立的服务或者微服务。最后还能随着情况的变化，允许系统逐渐回退到单体结构。</p></blockquote><p>A good architecture protects the majority of the source code from those changes. It leaves the decoupling mode open as an option so that large deployments can use one mode, whereas small deployments can use another.</p><blockquote><p>并且，一个设计良好的架构在上述过程中还应该能保护系统的大部分源码不受变更影响。对整个系统来说，解耦模式也应该是一个可选项。我们在进行大型部署时可以采用一种模式，而在进行小型部署时则可以釆用另一种模式。</p></blockquote><h2 id="CONCLUSION-本章小结-14"><a href="#CONCLUSION-本章小结-14" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>Yes, this is tricky. And I’m not saying that the change of decoupling modes should be a trivial configuration option (though sometimes that is appropriate). What I’m saying is that the decoupling mode of a system is one of those things that is likely to change with time, and a good architect foresees and appropriately facilitates those changes.</p><blockquote><p>是的，要达到上述要求难度不小。我并没有说系统的部署模式就一定要是某种简单的配置项（虽然在某些情况下的确应该这样做）。这里的主要观点认为，一个系统所适用的解耦模式可能会随着时间而变化，优秀的架构师应该能预见这一点，并且做岀相应的对策。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap17-BOUNDARIES-DRAWING-LINES-划分边界"><a href="#Chap17-BOUNDARIES-DRAWING-LINES-划分边界" class="headerlink" title="Chap17. BOUNDARIES: DRAWING LINES 划分边界"></a>Chap17. BOUNDARIES: DRAWING LINES 划分边界</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN18.jpg"></p><p>Software architecture is the art of drawing lines that I call boundaries. Those boundaries separate software elements from one another, and restrict those on one side from knowing about those on the other. Some of those lines are drawn very early in a project’s life—even before any code is written. Others are drawn much later. Those that are drawn early are drawn for the purposes of deferring decisions for as long as possible, and of keeping those decisions from polluting the core business logic.</p><blockquote><p>软件架构设计本身就是一门划分边界的艺术。也界的作用是将软件分割成各种元素，以便约束边界两侧之间的依赖关系。其中有一些边界是作项目初期——甚至在编写代码之前——就已经划分好，而其他的边界则是后来才划分的。在项目初期划分这些边界的目的是方便我们尽量将一些决策延后进行，并且确保未来这些决策不会对系统的核心业务逻辑产生干扰。</p></blockquote><p>Recall that the goal of an architect is to minimize the human resources required to build and maintain the required system. What it is that saps this kind of people-power? Coupling—and especially coupling to premature decisions.</p><blockquote><p>正如我们之前所说，架构师们所追求的目标是最大限度地降低构建和维护一个系统所需的人力资源。那么我们就需要了解一个系统最消耗人力资源的是什么？答案是系统中存在的耦合尤其是那些过早做出的、不成熟的决策所导致的耦合。</p></blockquote><p>Which kinds of decisions are premature? Decisions that have nothing to do with the business requirements—the use cases—of the system. These include decisions about frameworks, databases, web servers, utility libraries, dependency injection, and the like. A good system architecture is one in which decisions like these are rendered ancillary and deferrable. A good system architecture does not depend on those decisions. A good system architecture allows those decisions to be made at the latest possible moment, without significant impact.</p><blockquote><p>那么，怎样的决策会被认为是过早且不成熟的呢？答案是那些决策与系统的业务需求（也就是用例）无关。这部分决策包括我们要采用的框架、数据库、Web 服务器、工具库、依赖注入等。在一个设计良好的系统架构中，这些细节性的决策都应该是辅助性的，可以被推迟的。一个设计良好的系统架构不应该依赖于这些细节?而应该尽可能地推迟这些细节性的决策，并致力于将这种推迟所产生的影响降到最低。</p></blockquote><h2 id="A-COUPLE-OF-SAD-STORIES-几个悲伤的故事"><a href="#A-COUPLE-OF-SAD-STORIES-几个悲伤的故事" class="headerlink" title="A COUPLE OF SAD STORIES 几个悲伤的故事"></a>A COUPLE OF SAD STORIES 几个悲伤的故事</h2><p>Here’s the sad story of company P, which serves as a warning about making premature decisions. In the 1980s the founders of P wrote a simple monolithic desktop application. They enjoyed a great deal of success and grew the product through the 1990s into a popular and successful desktop GUI application.</p><blockquote><p>下面要讲的是一个来自 P 公司的悲伤的故事，我们在这里是将它作为一个草率决策的反面案例给大家展示的。在 20 世纪 80 年代，P 公司的创始团队开发了一个单体结构的简单桌面应用。然后，产品获得了极大的成功，并在 20 世纪 90 年代成功地成长为一个广为人知的桌面 GUI 应用。</p></blockquote><p>But then, in the late 1990s, the web emerged as a force. Suddenly everybody had to have a web solution, and P was no exception. P’s customers clamored for a version of the product on the web. To meet this demand, the company hired a bunch of hotshot twenty-something Java programmers and embarked upon a project to webify their product.</p><blockquote><p>然而到了 20 世纪 90 年代末期，Web 卷起了一股浪潮，突然间每个公司都在推出自己的 Web 解决方案，P 公司自然也不能置身事外。P 公司的客户吵闹着要求它提供一个 Web 版的产品。为了应对这种需求，该公司雇用了一群二十几岁的 Java 程序员，开始着手将他们的产品 Web 化。</p></blockquote><p>The Java guys had dreams of server farms dancing in their heads, so they adopted a rich three-tiered “architecture”1 that they could distribute through such farms. There would be servers for the GUI, servers for the middleware, and servers for the database. Of course.</p><blockquote><p>结果，这群 Java 小子满脑子朝思暮想的就是如何将大规模服务器集群应用起来，所以他们采用了一个三层的富“架构”，将系统的各层应用分布到一个大型服务集群中，这样一来，GUI、中间件和数据库自然就都要运行在不同的服务器上。</p></blockquote><p>The programmers decided, very early on, that all domain objects would have three instantiations: one in the GUI tier, one in the middleware tier, and one in the database tier. Since these instantiations lived on different machines, a rich system of interprocessor and inter-tier communications was set up. Method invocations between tiers were converted to objects, serialized, and marshaled across the wire.</p><blockquote><p>这帮程序员在开发初期就决定系统中所有领域对象都要有三份实例：GUI 层一份、中间件层一份、数据库层一份。而由于这些实例要运行在不同的机器上，于是一套完整的跨处理器，跨层通信的富系统被设计了出来。该系统各层之间的函数调用都会被转变为对象，这些对象在经过序列化和编码处理之后进行网络传输。</p></blockquote><p>Now imagine what it took to implement a simple feature like adding a new field to an existing record. That field had to be added to the classes in all three tiers, and to several of the inter-tier messages. Since data traveled in both directions, four message protocols needed to be designed. Each protocol had a sending and receiving side, so eight protocol handlers were required. Three executables had to be built, each with three updated business objects, four new messages, and eight new handlers.</p><blockquote><p>现在假设我们想要增加一个特别简单的功能，为现有的记录添加一个字段。在上述情况下，这个字段必须被同步添加到系统所有三个分层的类，以及几个用于跨层通信的消息结构中。由于数据是双向流动的，这意味着我们要为此设计四个传输协议。而又由于每个协议都有各自的发送方和接收方，所以我们总共需要实现八个传输协议处理函数。总结一下，我们需要做的是同时构建三个可执行文件，每个文件都要包含三个变更过的业务对象、四个新的消息结构以及八个新的处理函数。</p></blockquote><p>And think of what those executables had to do to implement the simplest of features. Think of all the object instantiations, all the serializations, all the marshaling and de-marshaling, all the building and parsing of messages, all the socket communications, timeout managers, retry scenarios, and all the other extra stuff that you have to do just to get one simple thing done.</p><blockquote><p>这就是我们添加一个最简单的功能所需要做的事情。读者可以想想所有这些新增对象要进行的初始化、序列化、编码和反编码、消息构建和解析、socket 通信、超时管理、重试情况处理等过程，我们做所有的这些事情就只是为了完成一点小小的功能吗？这代价未免太大了点。</p></blockquote><p>Of course, during development the programmers did not have a server farm. Indeed, they simply ran all three executables in three different processes on a single machine. They developed this way for several years. But they were convinced that their architecture was right. And so, even though they were executing in a single machine, they continued all the object instantiations, all the serializations, all the marshaling and de-marshaling, all the building and parsing of messages, all the socket communications, and all the extra stuff in a single machine.</p><blockquote><p>当然，这帮程序员在开发过程中实际上是没有大型服务器集群可以用的。他们其实仍然是在一台机器上运行那三个可执行文件，而且就这样开发了几年时间。然而，即使这个系统只在一台机器上执行，也还是要经历所有这些对象的初始化、序列化、编码与反编码、消息的构建和解析、socket 通信等过程的，但他们直到最后还是坚信自己的架构是正确的。</p></blockquote><p>The irony is that company P never sold a system that required a server farm. Every system they ever deployed was a single server. And in that single server all three executables continued all the object instantiations, all the serializations, all the marshaling and de-marshaling, all the building and parsing of messages, all the socket communications, and all the extra stuff, in anticipation of a server farm that never existed, and never would.</p><blockquote><p>这里最讽刺的是，P 公司从来就没有销售过一个需要服务器集群的系统，他们所有曾经部署过的系统都是在一台机器上完成的。然后在这台机器上，系统中所有的三个可执行文件仍然继续着这些对象初始化、序列化、编码与反编码、消息的构建与解析、socket 通信等不必要的工作，就是为了适应一个并不存在且也永远不会存在的集群环境。</p></blockquote><p>The tragedy is that the architects, by making a premature decision, multiplied the development effort enormously.</p><blockquote><p>这个故事的悲剧之处在于，软件架构师通过一个草率的决定无谓地将开发成本放大了数倍之多。</p></blockquote><p>The story of P is not isolated. I’ve seen it many times and in many places. Indeed, P is a superposition of all those places.</p><blockquote><p>而且，P 公司的故事绝不是个案，我在很多地方看到过这个故事的各种版本。</p></blockquote><p>But there are worse fates than P.</p><blockquote><p>接下来，还有比 P 公司更糟糕的故事。</p></blockquote><p>Consider W, a local business that manages fleets of company cars. They recently hired an “Architect” to get their rag-tag software effort under control. And, let me tell you, control was this guy’s middle name. He quickly realized that what this little operation needed was a full-blown, enterprise-scale, service-oriented “ARCHITECTURE.” He created a huge domain model of all the different “objects” in the business, designed a suite of services to manage these domain objects, and put all the developers on a path to Hell. As a simple example, suppose you wanted to add the name, address, and phone number of a contact person to a sales record. You had to go to the ServiceRegistry and ask for the service ID of the ContactService. Then you had to send a CreateContact message to the ContactService. Of course, this message had dozens of fields that all had to have valid data in them—data to which the programmer had no access, since all the programmer had was a name, address, and phone number. After faking the data, the programmer had to jam the ID of the newly created contact into the sales record and send the UpdateContact message to the SaleRecordService.</p><blockquote><p>我们再来看一下 W 公司的故事。该公司有一项管理其租赁车队的本地业务，他们最近招聘了一位“架构师”来控制他们目前的软件开发成本。而且据说“控制”这个词就是这家伙的中间名- 总之这位“架构师”来了之后很快做了判断，认为运作这个小小的业务需要的是一个全套的、企业级的、面向服务的“架构”。于是，他就创建了一个巨大的域模型，其中包含了该业务所涉及的所有“对象”，并设计了一整套服务来管理这些对象，差点将所有开发人员逼疯。在他这套“架构”中，如果我们想在销售记录中添加一个联系人，提供名字、地址和电话号码，就必须先访问 ServiceRegistry，查询 ContactService 的 ID。然后需要发送一条 CreateContact 消息给 ContactService。当然，这个消息结构有几十个字段，每一个字段都需要有效的数据来填充——这些数据是普通程序员无法访问的，他们手里只有名字、地址和电话号码。只有在伪造数据之后，程序员才能将新建的 Contact 记录 ID 填入 UpdateContact 消息中，最后还要发送给 SaleRecordService。</p></blockquote><p>Of course, to test anything you had to fire up all the necessary services, one by one, and fire up the message bus, and the BPel server, and … And then, there were the propagation delays as these messages bounced from service to service, and waited in queue after queue.</p><blockquote><p>当然，为了测试这一切，我们还必须将所有的服务全部运行起来，同时还要运行消息总线、BPel 服务器等。更糟糕的是，这些消息还会在每个服务之间传递时出现延迟，需要一个队列接一个队列地等待。</p></blockquote><p>And then if you wanted to add a new feature—well, you can imagine the coupling between all those services, and the sheer volume of WSDLs that needed changing, and all the redeployments those changes necessitated …</p><blockquote><p>如果还需要添加新功能的话，读者可以想象一下所有这些服务之间的耦合关系、那些需要修改的大量 WSDL 文件以及需要进行的重新部署。</p></blockquote><p>Hell starts to seem like a nice place by comparison.</p><blockquote><p>说真的，地狱看起来也不过如此吧!</p></blockquote><p>There’s nothing intrinsically wrong with a software system that is structured around services. The error at W was the premature adoption and enforcement of a suite of tools that promised SoA—that is, the premature adoption of a massive suite of domain object services. The cost of those errors was sheer person-hours—person-hours in droves—flushed down the SoA vortex.</p><blockquote><p>按照服务来组织一个软件系统的结构这件事本身并没有什么问题，W 公司的错误主要在于太过草率地采用和强制推广了一套号称是 SOA 体系的工具——也就是说，他们过于草率地采用了一整套域对象服务体系。这个错误让公司大量的人力都耗费在了实现这个所谓的 SOA 架构上。</p></blockquote><p>I could go on describing one architectural failure after another. But let’s talk about an architectural success instead.</p><blockquote><p>我们还可以一个接一个地描述很多这类架构设计失败的案例，但还是先来讲一些成功的案例吧。</p></blockquote><h2 id="FITNESSE"><a href="#FITNESSE" class="headerlink" title="FITNESSE"></a>FITNESSE</h2><p>My Son, Micah, and I started work on FitNesse in 2001. The idea was to create a simple wiki that wrapped Ward Cunningham’s FIT tool for writing acceptance tests.</p><blockquote><p>我和我儿子 Micah 在 2001 年创立了一家叫 FitNesse 的公司。想法很简单，就是用一个简单的 wiki 来包装一下 Ward Cunningham 的 FIT 工具，以编写验收测试（acceptance test）。</p></blockquote><p>This was back in the days before Maven “solved” the jar file problem. I was adamant that anything we produced should not require people to download more than one jar file. I called this rule, “Download and Go.” This rule drove many of our decisions.</p><blockquote><p>这件事情发生在 Maven 工具面世并“解决了” jar 文件问题之前。我当时坚信我们的产品不应该让用户下载超过一个的 jar 文件，我称这条规则为“下载即可执行”。这条规则指导了我们之后的很多决策。</p></blockquote><p>One of the first decisions was to write our own web server, specific to the needs of FitNesse. This might sound absurd. Even in 2001 there were plenty of open source web servers that we could have used. Yet writing our own turned out to be a really good decision because a bare-bones web server is a very simple piece of software to write and it allowed us to postpone any web framework decision until much later.2</p><blockquote><p>第一个决策是根据 FitNesse 的需要专门编写了属于我们自己的 Web 服务器。这可能听起来很傻，即使在 2001 年，市面上也有足够多的开源的 Web 服务器可供选用。然而编写属于自己的 Web 服务器实际上是一个非常好的决策，因为一个只包含基本功能的 Web 服务器部署起来非常简单，它允许我们将任何与具体 Web 框架相关的决策延后。</p></blockquote><p>Another early decision was to avoid thinking about a database. We had MySQL in the back of our minds, but we purposely delayed that decision by employing a design that made the decision irrelevant. That design was simply to put an interface between all data accesses and the data repository itself.</p><blockquote><p>我们做的另一个早期决策是避免考虑数据库问题。我们当时确实考虑过使用 MySQL，但最后还是故意采用了一种与数据库无关的设计，而延后了这方面的决策。这部分的设计也很简单，就是在所有数据访问逻辑与数据仓库之间增加一个接口。</p></blockquote><p>We put the data access methods into an interface named WikiPage. Those methods provided all the functionality we needed to find, fetch, and save pages. Of course, we didn’t implement those methods at first; we simply stubbed them out while we worked on features that didn’t involve fetching and saving the data.</p><blockquote><p>我们将数据访问方法放在一个名为 WikiPage 的接口中。这部分方法负责提供所需的查找、获取和保存页面的功能。当然，我们最初并没有具体实现这些方法，在开发不需要获取和保存数据的那部分功能时，我们只写了一个占位方法。</p></blockquote><p>Indeed, for three months we simply worked on translating wiki text into HTML. This didn’t require any kind of data storage, so we created a class named MockWikiPage that simply left the data access methods stubbed.</p><blockquote><p>确实，我们花了三个月时间来解决 wiki 文本与 HTML 之间的转换问题，这部分的工作与任何类型的数据存储都无关。所以我们在创建名为 MockWikiPage 的模块时，只与了一些空的数据访问方法。</p></blockquote><p>Eventually, those stubs became insufficient for the features we wanted to write. We needed real data access, not stubs. So we created a new derivative of WikiPage named InMemoryPage. This derivative implemented the data access method to manage a hash table of wiki pages, which we kept in RAM.</p><blockquote><p>最终，当这些占位方法不再支持我们所要开发的功能时，我们才需要真正实现数据访问。为此我们创建了一个名为 InMemoryPage 的 WikiPage 的派生类。在这个派生类中，实现了一系列数据访问方法来管理与 wiki 页面相关的哈希表（该哈希表会一直存在于内存中）。</p></blockquote><p>This allowed us to write feature after feature for a full year. In fact, we got the whole first version of the FitNesse program working this way. We could create pages, link to other pages, do all the fancy wiki formatting, and even run tests with FIT. What we couldn’t do was save any of our work.</p><blockquote><p>就这样，我们一个接一个地开发这些业务功能，花了整整一年时间。事实上，FitNesse 程序能正常运行的第一个版本是这样的，它能让我们创建页面、链接其他页面、使用 wiki 格式完成所有的装饰，甚至用 FIT 工具运行测试。唯一不能做的就是真正地保存数据。</p></blockquote><p>When it came time to implement persistence, we thought again about MySQL, but decided that wasn’t necessary in the short term, because it would be really easy to write the hash tables out to flat files. So we implemented FileSystemWikiPage, which just moved the functionality out to flat files, and then we continued developing more features.</p><blockquote><p>当该系统需要实现持久化时，我们又仔细考虑了一下是否采用 MySQL，最终还是觉得短期内没有必要，因为将哈希表写入文件是非常简单的。所以我们实现了一个 FileSystemWikiPmge，用单一的大文件实现了这一功能，同时将我们的精力投入继续开发更多的新功能上。</p></blockquote><p>Three months later, we reached the conclusion that the flat file solution was good enough; we decided to abandon the idea of MySQL altogether. We deferred that decision into nonexistence and never looked back.</p><blockquote><p>三个月之后，我们得出一个结论，大文件的存储己经足够好了，完全没有必要使 MySQL。就这样，我们不断推迟这个决策，到最后发现这个决策不需要做了。</p></blockquote><p>That would be the end of the story if it weren’t for one of our customers who decided that he needed to put the wiki into MySQL for his own purposes. We showed him the architecture of WikiPages that had allowed us to defer the decision. He came back a day later with the whole system working in MySQL. He simply wrote a MySqlWikiPage derivative and got it working.</p><blockquote><p>如果不是我们的一个客户由于自己的需要而希望将数据存入 MySQL，我们的故事就到此为止了。事实上，在我们给他展示了 WikiPage 架构细节之后，他只用了一天时间就实现了一个能在 MySQL 上运行的系统，他所做的就是写了一个名为 MySQLWikiPage 的派生类，该系统就可以正常工作了。</p></blockquote><p>We used to bundle that option with FitNesse, but nobody else ever used it, so eventually we dropped it. Even the customer who wrote the derivative eventually dropped it.</p><blockquote><p>我们曾经将这个实现和 FitNesse 一起打包分发，但是后来没有人真正用到过它，甚至连实现这个功能的用户最终也不再使用它了。</p></blockquote><p>Early in the development of FitNesse, we drew a boundary line between business rules and databases. That line prevented the business rules from knowing anything at all about the database, other than the simple data access methods. That decision allowed us to defer the choice and implementation of the database for well over a year. It allowed us to try the file system option, and it allowed us to change direction when we saw a better solution. Yet it did not prevent, or even impede, moving in the original direction (MySQL) when someone wanted it.</p><blockquote><p>在开发 FitNesse 的早期，我们在业务逻辑和数据库之间画了一条边界线。这条线有效地防止了业务逻辑对数据库产生依赖，它只能访问简单的数据访问方法。这个决策使我们将与数据库选型和实现的决策推迟了超过一年。同时我们还能用文件系统进行实验。使我们最终换了一个更好的解决方案。更重要的是，该架构在需求真的出现时，没有阻止任何人采用 MySQL，甚至没有为其制造任何障碍。</p></blockquote><p>The fact that we did not have a database running for 18 months of development meant that, for 18 months, we did not have schema issues, query issues, database server issues, password issues, connection time issues, and all the other nasty issues that raise their ugly heads when you fire up a database. It also meant that all our tests ran fast, because there was no database to slow them down.</p><blockquote><p>在长达 18 个月的开发过程中，我们事实上没有用到过数据库，这意味着我们不需要面对表结构问题、查询问题、数据库服务器问题、密码问题、链接时间问题等一系列由于数据库带来的棘手问题。这样我们所有的测试都会进行得很快，因为它们都不依赖数据库。</p></blockquote><p>In short, drawing the boundary lines helped us delay and defer decisions, and it ultimately saved us an enormous amount of time and headaches. And that’s what a good architecture should do.</p><blockquote><p>简单来说，通过划清边界，我们可以推迟和延后一些细节性的决策，这最终会为我们节省大量的时间、避免大量的问题。这就是一个设计良好的架构所应该带来的助益。</p></blockquote><h2 id="WHICH-LINES-DO-YOU-DRAW-AND-WHEN-DO-YOU-DRAW-THEM-应在何时、何处画这些线"><a href="#WHICH-LINES-DO-YOU-DRAW-AND-WHEN-DO-YOU-DRAW-THEM-应在何时、何处画这些线" class="headerlink" title="WHICH LINES DO YOU DRAW, AND WHEN DO YOU DRAW THEM? 应在何时、何处画这些线"></a>WHICH LINES DO YOU DRAW, AND WHEN DO YOU DRAW THEM? 应在何时、何处画这些线</h2><p>You draw lines between things that matter and things that don’t. The GUI doesn’t matter to the business rules, so there should be a line between them. The database doesn’t matter to the GUI, so there should be a line between them. The database doesn’t matter to the business rules, so there should be a line between them.</p><blockquote><p>边界线应该画在那些不相关的事情中间。GUI 与业务逻辑无关，所以两者之间应该有一条边界线。数据库与 GUI 无关，这两者之间也应该有一条边界线。数据库只与业务逻辑无关，所以两者之间也应该有一条边界线。</p></blockquote><p>Some of you may have rejected one or more of those statements, especially the part about the business rules not caring about the database. Many of us have been taught to believe that the database is inextricably connected to the business rules. Some of us have even been convinced that the database is the embodiment of the business rules.</p><blockquote><p>上面这些话，尤其是关于业务逻辑与数据库无关的部分可能会遭到部分读者的反对。大部分人都已经习惯性地认为数据库是与业务逻辑不可分割的了，有些人甚至认为，数据库相关逻辑部分本身就是业务逻辑的具体体现。</p></blockquote><p>But, as we shall see in another chapter, this idea is misguided. The database is a tool that the business rules can use indirectly. The business rules don’t need to know about the schema, or the query language, or any of the other details about the database. All the business rules need to know is that there is a set of functions that can be used to fetch or save data. This allows us to put the database behind an interface.</p><blockquote><p>然而正如我们在第 18 章中将会讲到的，这个想法从根本上就是错误的。数据库应该是业务逻辑间接使用的一个工具。业务逻辑并不需要了解数据库的表结构、查询语言或其他任何数据库内部的实现细节。业务逻辑唯一需要知道的，就是有一组可以用来查询和保存数据的函数。这样一来，我们才可以将数据库隐藏在接口后面。</p></blockquote><p>You can see this clearly in Figure 17.1. The BusinessRules use the DatabaseInterface to load and save data. The DatabaseAccess implements the interface and directs the operation of the actual Database.</p><blockquote><p>我们可以从图 17.1 中清晰地看到，BusinessRules 是通过 DatabaseInterface 来加载和保存数据的。而 DatabaseAccess 则负责实现该接口，以及其与实际 Database 的交互。</p></blockquote><p><Figures figure="17-1">The database behind an interface</Figures></p><p>The classes and interfaces in this diagram are symbolic. In a real application, there would be many business rule classes, many database interface classes, and many database access implementations. All of them, though, would follow roughly the same pattern.</p><blockquote><p>这里的类与接口仅仅是一个例子。在一个真实的应用程序中，将会有很多业务逻辑类、很多数据库接口类以及很多数据库访问的实现。不过，所有一切所遵循的模式应该是相似的。</p></blockquote><p>Where is the boundary line? The boundary is drawn across the inheritance relationship, just below the DatabaseInterface (Figure 17.2).</p><blockquote><p>那么这里的边界线应该被画在哪里？边界应该穿过继承关系，在 DatabaseInterface 之下（见图 17.2）。</p></blockquote><p><Figures figure="17-2">The boundary line</Figures></p><p>Note the two arrows leaving the DatabaseAccess class. Those two arrows point away from the DatabaseAccess class. That means that none of these classes knows that the DatabaseAccess class exists.</p><blockquote><p>请注意，DatabaseAccess 类的那两个对外的箭头。这两个箭头都指向了远离 DatabaseAccess 类的方向，这意味着它们所指向的两个类都不知道 DatabaseAccess 类的存在。</p></blockquote><p>Now let’s pull back a bit. We’ll look at the component that contains many business rules, and the component that contains the database and all its access classes (Figure 17.3).</p><blockquote><p>下面让我们把抽象层次拉高一点，看一下包含多个业务逻辑类的组件与包含数据库及其访问类的组件之间是什么关系（见图 17.3）。</p></blockquote><p><Figures figure="17-3">The business rules and database components</Figures></p><p>Note the direction of the arrow. The Database knows about the BusinessRules. The BusinessRules do not know about the Database. This implies that the DatabaseInterface classes live in the BusinessRules component, while the DatabaseAccess classes live in the Database component.</p><blockquote><p>请注意，图 17.3 中的箭头指向，它说明了 Database 组件知道 BusinessRules 组件的存在，而 BusinessRules 组件则不知道 Database 组件的存在。这意味着 DatabaseInterface 类是包含在 BusinessRules 组件中的，而 DatabaseAccess 类则被包含在 Database 组件中。</p></blockquote><p>The direction of this line is important. It shows that the Database does not matter to the BusinessRules, but the Database cannot exist without the BusinessRules.</p><blockquote><p>这个箭头的方向很重要。因为它意味着 Database 组件不会对 BusinessRules 组件形成的干扰，但 Database 组件却不能脫离 BusinessRules 组件而存在。</p></blockquote><p>If that seems strange to you, just remember this point: The Database component contains the code that translates the calls made by the BusinessRules into the query language of the database. It is that translation code that knows about the BusinessRules.</p><blockquote><p>如果读者对上面这段话感到困惑，请记住一点，Database 组件中包含了将 BusinessRules 组件中的函数调用转化为具体数据库查询语言的代码。这些转换代码当然必须知道 BusinessRules 组件的存在。</p></blockquote><p>Having drawn this boundary line between the two components, and having set the direction of the arrow toward the BusinessRules, we can now see that the BusinessRules could use any kind of database. The Database component could be replaced with many different implementations—the BusinessRules don’t care.</p><blockquote><p>通过在这两个组件之间画边界线，并且让箭头指向 BusinessRules 组件，我们现在可以很容易地明白为什么 BusinessRules 组件可以使用任何一种数据库。在这里，Database 组件可以被替换为多种实现，BusinessRules 组件并不需要知道这件事。</p></blockquote><p>The database could be implemented with Oracle, or MySQL, or Couch, or Datomic, or even flat files. The business rules don’t care at all. And that means that the database decision can be deferred and you can focus on getting the business rules written and tested before you have to make the database decision.</p><blockquote><p>数据库可以用 Oracle、MySQL、Couch 或者 Datomic，甚至大文件来实现。业务逻辑并不需要关心这件事。这意味着我们叫以将与数据库相关的决策延后，先专注于编写业务逻辑的代码，进行测试，直到不得不选择数据库为止。</p></blockquote><h2 id="WHAT-ABOUT-INPUT-AND-OUTPUT-输入和输出怎么办"><a href="#WHAT-ABOUT-INPUT-AND-OUTPUT-输入和输出怎么办" class="headerlink" title="WHAT ABOUT INPUT AND OUTPUT? 输入和输出怎么办"></a>WHAT ABOUT INPUT AND OUTPUT? 输入和输出怎么办</h2><p>Developers and customers often get confused about what the system is. They see the GUI, and think that the GUI is the system. They define a system in terms of the GUI, so they believe that they should see the GUI start working immediately. They fail to realize a critically important principle: The IO is irrelevant.</p><blockquote><p>开发者和使用者经常会对系统边界究竟如何定义而感到困惑。由于 GUI 能够直观看到，就很自然地把 GUI 当成了系统本身。这些人以 GUI 的视角来定义整个系统，所以认为从系统开发一开始 GUI 部分就应该正常工作。这是错误的，这里他们没有意识到一个非常重要的原则，即 I&#x2F;O 是无关紧要的。</p></blockquote><p>This may be hard to grasp at first. We often think about the behavior of the system in terms of the behavior of the IO. Consider a video game, for example. Your experience is dominated by the interface: the screen, the mouse, the buttons, and the sounds. You forget that behind that interface there is a model—a sophisticated set of data structures and functions—driving it. More importantly, that model does not need the interface. It would happily execute its duties, modeling all the events in the game, without the game ever being displayed on the screen. The interface does not matter to the model—the business rules.</p><blockquote><p>这个原则可能一开始比较难以理解，毕竟我们经常从直觉上会以 I&#x2F;O 的行为来定义系统的行为。以视频游戏为例，我们的主观体验是以界面反应为主的，这些反应来自屏幕、鼠标、按钮和声音等。但请不要忘了，这些界面背后存在着一个模型——一套非常复杂的数据结构和函数，那才是游戏真正的核心驱动力。更重要的是，该模型并不一定非要有一个界面。就算该游戏不显不在屏幕上，其模型也应该可以完成所有的任务逻辑，处理所有的游戏事件。因此，界面对模型——也就是业务逻辑来说——一点都不重要。</p></blockquote><p>And so, once again, we see the GUI and BusinessRules components separated by a boundary line (Figure 17.4). Once again, we see that the less relevant component depends on the more relevant component. The arrows show which component knows about the other and, therefore, which component cares about the other. The GUI cares about the BusinessRules.</p><blockquote><p>所以，GUI 和 BusinessRules 这两个组件之间也应该有一条边界线（见图 17.4）。再强调一次，在这里不重要的组件依赖于较为重要的组件，箭头指向的方向代表着组件之间的关系，GUI 关心 BusinessRules。</p></blockquote><p><Figures figure="17-4">The boundary between GUI and BusinessRules components</Figures></p><p>Having drawn this boundary and this arrow, we can now see that the GUI could be replaced with any other kind of interface—and the BusinessRules would not care.</p><blockquote><p>通过这条边界线以及这个箭头，我们可以看出 GUI 可以用任何一种其他形式的界面来代替。BusinessRules 组件不需要了解这些细节。</p></blockquote><h2 id="PLUGIN-ARCHITECTURE-插件式架构"><a href="#PLUGIN-ARCHITECTURE-插件式架构" class="headerlink" title="PLUGIN ARCHITECTURE 插件式架构"></a>PLUGIN ARCHITECTURE 插件式架构</h2><p>Taken together, these two decisions about the database and the GUI create a kind of pattern for the addition of other components. That pattern is the same pattern that is used by systems that allow third-party plugins.</p><blockquote><p>综上所述，我们似乎可以基于数据库和 GUI 这两个为例来建立一种向系统添加其他组件的模式。这种模式与支持第三方插件的系统模式是一样的。</p></blockquote><p>Indeed, the history of software development technology is the story of how to conveniently create plugins to establish a scalable and maintainable system architecture. The core business rules are kept separate from, and independent of, those components that are either optional or that can be implemented in many different forms (Figure 17.5).</p><blockquote><p>事实上，软件开发技术发展的历史就是一个如何想方设法方便地增加插件，从而构建一个可扩展、可维护的系统架构的故事。系统的核心业务逻辑必须和其他组件隔离，保持独立，而这些其他组件要么是可以去掉的，要么是有多种实现的（见图 17.5）。</p></blockquote><p><Figures figure="17-5">Plugging in to the business rules</Figures></p><p>Because the user interface in this design is considered to be a plugin, we have made it possible to plug in many different kinds of user interfaces. They could be web based, client&#x2F;server based, SOA based, Console based, or based on any other kind of user interface technology.</p><blockquote><p>由于用户界面在这个设计中是以插件形式存在的，所以我们可以用插拔的方式切换很多不同类型的用户界面。可以是基于 Web 模式的、基于客户端&#x2F;服务器端模式的、基于 SOA 模式的、基于命令行模式的或者基于其他任何类型的用户界面技术。</p></blockquote><p>The same is true of the database. Since we have chosen to treat it as a plugin, we can replace it with any of the various SQL databases, or a NOSQL database, or a file system-based database, or any other kind of database technology we might deem necessary in the future.</p><blockquote><p>数据库也类似。因为我们现在是将数据库作为插件来对待的，所以它就可以被替换成不同类型的 SQL 数据库、NoSQL 数据库，其至基于文件系统的数据库，以及未来任何一种我们认为有必要发展的数据库技术。</p></blockquote><p>These replacements might not be trivial. If the initial deployment of our system was web-based, then writing the plugin for a client-server UI could be challenging. It is likely that some of the communications between the business rules and the new UI would have to be reworked. Even so, by starting with the presumption of a plugin structure, we have at very least made such a change practical.</p><blockquote><p>当然，这些替换工作可能并不轻松，如果我们的系统一开始是按照 Web 方式部署的，那么为它写一个客户端&#x2F;服务器端模型的 UI 插件就可能会比较困难一些。很可能业务逻辑与新 UI 之间的交互方式也要重新修改。但即使这样，插件式架构也至少为我们提供了这种实现的可能性。</p></blockquote><h2 id="THE-PLUGIN-ARGUMENT-插件式架构的好处"><a href="#THE-PLUGIN-ARGUMENT-插件式架构的好处" class="headerlink" title="THE PLUGIN ARGUMENT 插件式架构的好处"></a>THE PLUGIN ARGUMENT 插件式架构的好处</h2><p>Consider the relationship between ReSharper and Visual Studio. These components are produced by completely different development teams in completely different companies. Indeed, JetBrains, the maker of ReSharper, lives in Russia. Microsoft, of course, resides in Redmond, Washington. It’s hard to imagine two development teams that are more separate.</p><blockquote><p>我们可以来看一下 ReSharper 和 Visual Studio 之间的关系。这两部分组件是由两个完全不同公司的人各自独立开发的，ReSharper 的开发者是 JetBrains 公司，它位于俄罗斯，而 Microsoft 公司则位于华盛顿州的雷德蒙市。很难想象有哪两个开发团队会比它们隔离得更彻底的了。</p></blockquote><p>Which team can damage the other? Which team is immune to the other? The dependency structure tells the story (Figure 17.6). The source code of ReSharper depends on the source code of Visual Studio. Thus there is nothing that the ReSharper team can do to disturb the Visual Studio team. But the Visual Studio team could completely disable the ReSharper team if they so desired.</p><blockquote><p>那么他们之间，是哪个团队可以影响另一个团队的工作呢？又是哪个团队可以对另一个团队的工作免疫呢？我们可以通过图 17.6 中的依赖关系来回答。很显然，是 ReSharper 的源代码依赖于 Visual Studio 的源代码。因此，是 ReSharper 团队无法干扰 Visual Studio 团队的工作，而 Visual Studio 团队却可以单方面中止 ReSharper 团队的任何工作。</p></blockquote><p><Figures figure="17-6">ReSharper depends on Visual Studio</Figures></p><p>That’s a deeply asymmetric relationship, and it is one that we desire to have in our own systems. We want certain modules to be immune to others. For example, we don’t want the business rules to break when someone changes the format of a web page, or changes the schema of the database. We don’t want changes in one part of the system to cause other unrelated parts of the system to break. We don’t want our systems to exhibit that kind of fragility.</p><blockquote><p>这是一种非常不对称的关系，但我们确实希望在自己的系统中构建这样的关系因为这可以让部分组件对其他组件的变更免疫。例如，当有人修改 Web 页面格式或修改数据库表结构时，系统的业务逻辑部分就不应该受到影响。另外，我们也不希望系统中某一个部分发生的变更会导致其他不相关的部分出现问题，系统不应该这么脆弱。</p></blockquote><p>Arranging our systems into a plugin architecture creates firewalls across which changes cannot propagate. If the GUI plugs in to the business rules, then changes in the GUI cannot affect those business rules.</p><blockquote><p>将系统设计为插件式架构，就等于构建起了一面变更无法逾越的防火墙，换句话说，只要 GUI 是以插件形式插入系统的业务逻辑中的，那么 GUI 这边所发生的变更就不会影响系统的业务逻辑。</p></blockquote><p>Boundaries are drawn where there is an axis of change. The components on one side of the boundary change at different rates, and for different reasons, than the components on the other side of the boundary.</p><blockquote><p>所以，边界线也应该沿着系统的变更轴来画。也就是说，位于边界线两侧的组件应该以不同原因、不同速率变化着。</p></blockquote><p>GUIs change at different times and at different rates than business rules, so there should be a boundary between them. Business rules change at different times and for different reasons than dependency injection frameworks, so there should be a boundary between them.</p><blockquote><p>一个系统的 GUI 与业务逻辑的变更原因、变更速率显然是不同的，所以二者中间应该有一条边界线。同样的，一个系统的业务逻辑与依赖注入框架之间的变更原因和变更速度也会不同，它们之间也应该画边界线。</p></blockquote><p>This is simply the Single Responsibility Principle again. The SRP tells us where to draw our boundaries.</p><blockquote><p>这其实就是单一职责原则（SRP）的具体实现，SRP 的作用就是告诉我们应该在哪里画边界线。</p></blockquote><h2 id="CONCLUSION-本章小结-15"><a href="#CONCLUSION-本章小结-15" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>To draw boundary lines in a software architecture, you first partition the system into components. Some of those components are core business rules; others are plugins that contain necessary functions that are not directly related to the core business. Then you arrange the code in those components such that the arrows between them point in one direction—toward the core business.</p><blockquote><p>为了在软件架构中画边界线，我们需要先将系统分割成组件，其中一部分是系统的核心业务逻辑组件，而另一部分则是与核心业务逻辑无关但负责提供必要功能的插件。然后通过对源代码的修改，让这些非核心组件依赖于系统的核心业务逻辑组件。</p></blockquote><p>You should recognize this as an application of the Dependency Inversion Principle and the Stable Abstractions Principle. Dependency arrows are arranged to point from lower-level details to higher-level abstractions.</p><blockquote><p>其实，这也是一种对依赖反转原则（DIP）和稳定抽象原则（SAP）的具体应用，依赖箭头应该由底层具体实现细节指向高层抽象的方向。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap18-BOUNDARY-ANATOMY-边界剖析"><a href="#Chap18-BOUNDARY-ANATOMY-边界剖析" class="headerlink" title="Chap18. BOUNDARY ANATOMY 边界剖析"></a>Chap18. BOUNDARY ANATOMY 边界剖析</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN18.jpg"></p><p>The architecture of a system is defined by a set of software components and the boundaries that separate them. Those boundaries come in many different forms. In this chapter we’ll look at some of the most common.</p><blockquote><p>一个系统的架构是由一系列软件组件以及它们之间的边界共同定义的。而这些边界有着多种不同的存在形式。在本章中和我们看看其中最常见的一些形式。</p></blockquote><h2 id="BOUNDARY-CROSSING-跨边界调用"><a href="#BOUNDARY-CROSSING-跨边界调用" class="headerlink" title="BOUNDARY CROSSING 跨边界调用"></a>BOUNDARY CROSSING 跨边界调用</h2><p>At runtime, a boundary crossing is nothing more than a function on one side of the boundary calling a function on the other side and passing along some data. The trick to creating an appropriate boundary crossing is to manage the source code dependencies.</p><blockquote><p>在运行时，跨边界调用指的是边界线一侧的函数调用另一侧的函数，并同时传递数据的行为。构造合理的跨边界调用需要我们对源码中的依赖关系进行合理管控。</p></blockquote><p>Why source code? Because when one source code module changes, other source code modules may have to be changed or recompiled, and then redeployed. Managing and building firewalls against this change is what boundaries are all about.</p><blockquote><p>为什么需要管控源码中的依赖关系呢？因为当一个模块的源码发生变更时，其他模块的源码也可能会随之发生变更或重新编译，并需要重新部署。所谓划分边界，就是指在这些模块之间建立这种针对变更的防火墙。</p></blockquote><h2 id="THE-DREADED-MONOLITH-令人生畏的单体结构"><a href="#THE-DREADED-MONOLITH-令人生畏的单体结构" class="headerlink" title="THE DREADED MONOLITH 令人生畏的单体结构"></a>THE DREADED MONOLITH 令人生畏的单体结构</h2><p>The simplest and most common of the architectural boundaries has no strict physical representation. It is simply a disciplined segregation of functions and data within a single processor and a single address space. In a previous chapter, I called this the source-level decoupling mode.</p><blockquote><p>最简单、最常见的架构边界通常并没有一个固定的物理形式，它们只是对同一个进程、同一个地址空间内的函数和数据进行了某种划分。在第 16 章中，我们称之为源码层次上的解耦模式。</p></blockquote><p>From a deployment point of view, this amounts to nothing more than a single executable file—the so-called monolith. This file might be a statically linked C or C++ project, a set of Java class files bound together into an executable jar file, a set of .NET binaries bound into a single .EXE file, and so on.</p><blockquote><p>但是从部署的角度来看，这一切到最后都产生了一个单独的可执行文件——这就是所谓的单体结构。这个文件可能是一个静态链接形成的 C&#x2F;C++ 项目，或是一个将一堆 Java 类绑定在一起的 jar 可执行文件，或是由一系列 .NET 二进制文件组成的 .EXE 文件等。</p></blockquote><p>The fact that the boundaries are not visible during the deployment of a monolith does not mean that they are not present and meaningful. Even when statically linked into a single executable, the ability to independently develop and marshal the various components for final assembly is immensely valuable.</p><blockquote><p>虽然这类系统的架构边界在部署过程中并不可见，但这并不意味着它们就不存在或者没有意义。因为即使最终所有的组件都被静态链接成了一个可执行文件，这些边界的划分对该系统各组件的独立开发也是非常有意义的。</p></blockquote><p>Such architectures almost always depend on some kind of dynamic polymorphism1 to manage their internal dependencies. This is one of the reasons that object-oriented development has become such an important paradigm in recent decades. Without OO, or an equivalent form of polymorphism, architects must fall back on the dangerous practice of using pointers to functions to achieve the appropriate decoupling. Most architects find prolific use of pointers to functions to be too risky, so they are forced to abandon any kind of component partitioning.</p><blockquote><p>因为这类架构一般都需要利用某种动态形式的多态来管理其内部的依赖关系。这也是为什么面向对象编程近几十年来逐渐成为一种重要编程范式的原因之一。如果不采用面向对象编程模式或是类似的多态实现，架构师们就只能退回到用函数指针这种危险的模式来进行组件解耦的时代。由于大部分架构师认为大量采用函数指针过于危险，所以在那样的情况卜，他们通常都在权衡利弊之后就干脆放弃划分组件了。</p></blockquote><p>The simplest possible boundary crossing is a function call from a low-level client to a higher-level service. Both the runtime dependency and the compile-time dependency point in the same direction, toward the higher-level component.</p><blockquote><p>最简单的跨边界调用形式，是由低层客户端来调用高层服务函数，这种依赖关系在运行时和编译时会保持指向一致，都是从低层组件指向高层组件。</p></blockquote><p>In Figure 18.1, the flow of control crosses the boundary from left to right. The Client calls function f() on the Service. It passes along an instance of Data. The <code>&lt;DS&gt;</code> marker simply indicates a data structure. The Data may be passed as a function argument or by some other more elaborate means. Note that the definition of the Data is on the called side of the boundary.</p><blockquote><p>在图 18.1 中，我们可以看到控制流跨越边界的方向是从左向右的，Client 调用了 Service 上的函数 <code>f()</code>，并向它传递了一个 Data 实例。这里的 <code>&lt;DS&gt;</code> 标记是指 Data 是一个数据结构。Data 实例的具体传递方法可以是函数的调用参数，也可以是其他更复杂的传递方式。读者在这里需要注意的是，Data 的定义位于边界的被调用方一侧。</p></blockquote><p><Figures figure="18-1">Flow of control crosses the boundary from a lower level to a higher level</Figures></p><p>When a high-level client needs to invoke a lower-level service, dynamic polymorphism is used to invert the dependency against the flow of control. The runtime dependency opposes the compile-time dependency.</p><blockquote><p>但当高层组件中的客户端需要调用低层组件中的服务时，我们就需要运用动态形式的多态来反转依赖关系了。在这种情况下，系统在运行时的依赖关系与编译时的依赖关系就是相反的。</p></blockquote><p>In Figure 18.2, the flow of control crosses the boundary from left to right as before. The high-level Client calls the f() function of the lower-level ServiceImpl through the Service interface. Note, however, that all dependencies cross the boundary from right to left toward the higher-level component. Note, also, that the definition of the data structure is on the calling side of the boundary.</p><blockquote><p>在图 18.2 中，控制流跨越边界的方向与之前是一样的，都是从左至右的。这里是高层组件 Client 通过 Service 接口调用了低层组件 Servicelmpl 上的函数 <code>f()</code>。但请读者注意，图 18.2 中所有的依赖关系却都是从右向左跨越边界的，方向是由低层组件指向高层组件的。同时，我们也应该注意到，这一次数据结构的定义是位于调用方这一侧的。</p></blockquote><p><Figures figure="18-2">Crossing the boundary against the flow of control</Figures></p><p>Even in a monolithic, statically linked executable, this kind of disciplined partitioning can greatly aid the job of developing, testing, and deploying the project. Teams can work independently of each other on their own components without treading on each other’s toes. High-level components remain independent of lower-level details.</p><blockquote><p>即使是在一个单体部署、静态链接的可执行文件中，这种自律式的组件划分仍然可以极大地帮助整个项目的开发、测试与部署，使不同的团队可以独立开发不同的组件，不会互相干扰。高层组件与低层细节之间也可以得到良好的隔离，独立演进。</p></blockquote><p>Communications between components in a monolith are very fast and inexpensive. They are typically just function calls. Consequently, communications across source-level decoupled boundaries can be very chatty.</p><blockquote><p>在单体结构中，组件之间的交互一般情况下都只是普通的函数调用，迅速而廉价，这就意味着这种跨源码层次解耦边界的通信会很频繁。</p></blockquote><p>Since the deployment of monoliths usually requires compilation and static linking, components in these systems are typically delivered as source code.</p><blockquote><p>由于单体结构的部署需要编译所有源码，并且进行静态链接，这就意味着这些系统中的组件一般都会以源码形式交付。</p></blockquote><h2 id="DEPLOYMENT-COMPONENTS-部署层次的组件"><a href="#DEPLOYMENT-COMPONENTS-部署层次的组件" class="headerlink" title="DEPLOYMENT COMPONENTS 部署层次的组件"></a>DEPLOYMENT COMPONENTS 部署层次的组件</h2><p>The simplest physical representation of an architectural boundary is a dynamically linked library like a .Net DLL, a Java jar file, a Ruby Gem, or a UNIX shared library. Deployment does not involve compilation. Instead, the components are delivered in binary, or some equivalent deployable form. This is the deployment-level decoupling mode. The act of deployment is simply the gathering of these deployable units together in some convenient form, such as a WAR file, or even just a directory.</p><blockquote><p>下面我们来看看系统架构最常见的物理边界形式：动态链接库。这种形式包括 .Net 的 DLL、Java 的 jar 文件、Ruby Gem 以及 UNIX 的共享库等。这种类型的组件在部署时不需要重新编译，因为它们都是以二进制形式或其他等价的可部署形式交付的。这里采用的就是部署层次上的解耦模式。部署这种类型的项目，就是将其所有可部署的单元打包成一个便于操作的文件格式，例如 WAR 文件，甚至可以只是一个目录（或者文件夹）。</p></blockquote><p>With that one exception, deployment-level components are the same as monoliths. The functions generally all exist in the same processor and address space. The strategies for segregating the components and managing their dependencies are the same.2</p><blockquote><p>除这一点以外，这种按部署层次解耦的组件与单体结构几乎是一样的，其所有的函数仍然处于同一个进程、同一个地址空间中。管理组件划分依赖关系的策略也基本上是和上文一致的。</p></blockquote><p>As with monoliths, communications across deployment component boundaries are just function calls and, therefore, are very inexpensive. There may be a one-time hit for dynamic linking or runtime loading, but communications across these boundaries can still be very chatty.</p><blockquote><p>与单体结构类似，按部署层次解耦的组件之间的跨也界调用也只是普通的函数调用，成本很低。虽然动态链接或运行时加载的过程本身可能会有一个一次性的调用成本，但它们之间的跨边界通信调用依然会很频繁。</p></blockquote><h2 id="THREADS-线程"><a href="#THREADS-线程" class="headerlink" title="THREADS 线程"></a>THREADS 线程</h2><p>Both monoliths and deployment components can make use of threads. Threads are not architectural boundaries or units of deployment, but rather a way to organize the schedule and order of execution. They may be wholly contained within a component, or spread across many components.</p><blockquote><p>单体结构和按部署层次划分的组件都可以采用线程模型。当然，线程既不属于架构边界，也不属于部署单元，它们仅仅是一种管理并调度程序执行的方式。一个线程既可以被包含在单一组件中，也可以横跨多个组件。</p></blockquote><h2 id="LOCAL-PROCESSES-本地进程"><a href="#LOCAL-PROCESSES-本地进程" class="headerlink" title="LOCAL PROCESSES 本地进程"></a>LOCAL PROCESSES 本地进程</h2><p>A much stronger physical architectural boundary is the local process. A local process is typically created from the command line or an equivalent system call. Local processes run in the same processor, or in the same set of processors within a multicore, but run in separate address spaces. Memory protection generally prevents such processes from sharing memory, although shared memory partitions are often used.</p><blockquote><p>系统架构还有一个更明显的物理边界形式，那就是本地进程。本地进程一般是由命令行启动或其他等价的系统调用产生的。本地进程往往运行于单个处理器或多核系统的同一组处理器上，但它们拥有各自不同的地址空间。一般来说，现有的内存保护机制会使这些进程无法共享其内存，但它们通常可以用某种独立的内存区域来实现共享。</p></blockquote><p>Most often, local processes communicate with each other using sockets, or some other kind of operating system communications facility such as mailboxes or message queues.</p><blockquote><p>最常见的情况是，这些本地进程会用 socket 来实现彼此的通信。当然，它们也可以通过一些操作系统提供的方式来通信，例如共享邮件或消息队列。</p></blockquote><p>Each local process may be a statically linked monolith, or it may be composed of dynamically linked deployment components. In the former case, several monolithic processes may have the same components compiled and linked into them. In the latter, they may share the same dynamically linked deployment components.</p><blockquote><p>每个本地进程都既可以是一个静态链接的单体结构，也可以是一个由动态链接组件组成的程序。在前一种情况下，若干个单体过程会被链接到同一个组件中。而在后一种情况下，这些单体过程可以共享同一个动态链接的可部署组件。</p></blockquote><p>Think of a local process as a kind of uber-component: The process consists of lower-level components that manage their dependencies through dynamic polymorphism.</p><blockquote><p>我们在这里可以将本地进程看成某种超级组件，该进程由一系列较低层次的组件组成，我们将通过动态形式的多态来管理它们之间的依赖关系。</p></blockquote><p>The segregation strategy between local processes is the same as for monoliths and binary components. Source code dependencies point in the same direction across the boundary, and always toward the higher-level component.</p><blockquote><p>另外.本地进程之间的隔离策略也与单体结构、二进制组件基本相同，其源码中的依赖关系跨越架构边界的方向是一致的，始终指向更高层次的组件。</p></blockquote><p>For local processes, this means that the source code of the higher-level processes must not contain the names, or physical addresses, or registry lookup keys of lower-level processes. Remember that the architectural goal is for lower-level processes to be plugins to higher-level processes.</p><blockquote><p>对本地进程来说，这就意味着高层进程的源码中不应该包含底层进程的名字、物理内存地址或是注册表键名。请渎职务必要记住，该系统架构的设计目标是让低层进程成为高层进程的一个插件。</p></blockquote><p>Communication across local process boundaries involve operating system calls, data marshaling and decoding, and interprocess context switches, which are moderately expensive. Chattiness should be carefully limited.</p><blockquote><p>本地进程之间的跨边界通信需要用到系统调用、数据的编码和解码，以及进程间的上下文切换，成本相对来说会更高一些，所以这里而要谨慎地控制通信的次数。</p></blockquote><h2 id="SERVICES-服务"><a href="#SERVICES-服务" class="headerlink" title="SERVICES 服务"></a>SERVICES 服务</h2><p>The strongest boundary is a service. A service is a process, generally started from the command line or through an equivalent system call. Services do not depend on their physical location. Two communicating services may, or may not, operate in the same physical processor or multicore. The services assume that all communications take place over the network.</p><blockquote><p>系统架构中最强的边界形式就是服务。一个服务就是一个进程，它们通常由命令行环境或其他等价的系统调用来产生。服务并不依赖于具体的运行位置，两个互相通信的服务既可以处于单一物理处理器或多核系统的同一组处理器上，也可以彼此位于不同的处理器上。服务会始终假设它们之间的通信将全部通过网络进行。</p></blockquote><p>Communications across service boundaries are very slow compared to function calls. Turnaround times can range from tens of milliseconds to seconds. Care must be taken to avoid chatting where possible. Communications at this level must deal with high levels of latency.</p><blockquote><p>服务之间的跨边界通信相对于函数调用来说，速度是非常缓慢的，其往返时间可以从几十毫秒到几秒不等。因此我们在划分架构边界时，一定要尽可能地控制通信次数。在这个层次上通信必须能够适应高延时情况。</p></blockquote><p>Otherwise, the same rules apply to services as apply to local processes. Lower-level services should “plug in” to higher-level services. The source code of higher-level services must not contain any specific physical knowledge (e.g., a URI) of any lower-level service.</p><blockquote><p>除此之外，我们可以在服务层次上使用与本地进程相同的规则。也就是让较低层次服务成为较高层次服务的“插件”。为此，我们要确保高层服务的源码中没有包含任何与低层服务相关的物理信息（例如 URI）。</p></blockquote><h2 id="CONCLUSION-本章小结-16"><a href="#CONCLUSION-本章小结-16" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>Most systems, other than monoliths, use more than one boundary strategy. A system that makes use of service boundaries may also have some local process boundaries. Indeed, a service is often just a facade for a set of interacting local processes. A service, or a local process, will almost certainly be either a monolith composed of source code components or a set of dynamically linked deployment components.</p><blockquote><p>除单体结构以外，大部分系统都会同时采用多种边界划分策略。一个按照服务层次划分边界的系统也可能会在某一部分采用本地进程的边界划分模式。事实上，服务经常不过就是一系列互相作用的本地进程的某种外在形式。无论是服务还是本地进程，它们几乎肯定都是由一个或多个源码组件组成的单体结构，或者一组动态链接的可部署组件。</p></blockquote><p>This means that the boundaries in a system will often be a mixture of local chatty boundaries and boundaries that are more concerned with latency.</p><blockquote><p>这也意味着一个系统中通常会同时包含高通信量、低延迟的本地架构边界和低通信量、高延迟的服务边界。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap19-POLICY-AND-LEVEL-策略与层次"><a href="#Chap19-POLICY-AND-LEVEL-策略与层次" class="headerlink" title="Chap19. POLICY AND LEVEL 策略与层次"></a>Chap19. POLICY AND LEVEL 策略与层次</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN19.jpg"></p><p>Software systems are statements of policy. Indeed, at its core, that’s all a computer program actually is. A computer program is a detailed description of the policy by which inputs are transformed into outputs.</p><blockquote><p>本质上，所有的软件都是一组策略语句的集合。是的，可以说计算机程序不过就是一组仔细描述如何将输入转化为输出的策略语句的集合。</p></blockquote><p>In most nontrivial systems, that policy can be broken down into many different smaller statements of policy. Some of those statements will describe how particular business rules are to be calculated. Others will describe how certain reports are to be formatted. Still others will describe how input data are to be validated.</p><blockquote><p>在大多数非小型系统（nontrivial system）中，整体业务策略通常都可以被拆解为多组更小的策略语句。一部分策略语句专门用于描述计算部分的业务逻辑，另一部分策略语句则负责描述计算报告的格式。除此之外，可能还会有一些用于描述如何校验输入数据的策略。</p></blockquote><p>Part of the art of developing a software architecture is carefully separating those policies from one another, and regrouping them based on the ways that they change. Policies that change for the same reasons, and at the same times, are at the same level and belong together in the same component. Policies that change for different reasons, or at different times, are at different levels and should be separated into different components.</p><blockquote><p>软件架构设计的工作重点之一就是，将这些策略彼此分离，然后将它们按照变更的方式进行重新分组。其中变更原因、时间和层次相同的策略应该被分到同一个组件中。反之，变更原因、时间和层次不同的策略则应该分属于不同的组件。</p></blockquote><p>The art of architecture often involves forming the regrouped components into a directed acyclic graph. The nodes of the graph are the components that contain policies at the same level. The directed edges are the dependencies between those components. They connect components that are at different levels.</p><blockquote><p>架构设计的工作常常需要将组件重排组合成为一个有向无环图。图中的每一个节点代表的是一个拥有相同层次策略的组件，每一条单向链接都代表了一种组件之间的依赖关系，它们将不同级别的组件链接起来。</p></blockquote><p>Those dependencies are source code, compile-time dependencies. In Java, they are import statements. In C#, they are using statements. In Ruby, they are require statements. They are the dependencies that are necessary for the compiler to function.</p><blockquote><p>这里提到的依赖关系是源码层次上的、编译期的依赖关系。这在 Java 语言中就是指 import 语句，在 C# 语言中就是指 using 语句，在 Ruby 语言中就是指 require 语句。这里的依赖关系都是在编译过程中所必需的。</p></blockquote><p>In a good architecture, the direction of those dependencies is based on the level of the components that they connect. In every case, low-level components are designed so that they depend on high-level components.</p><blockquote><p>在一个设计良好的架构中，依赖关系的方向通常取决于它们所关联的组件层次。一般来说，低层组件被设计为依赖于高层组件。</p></blockquote><h2 id="LEVEL-层次（Level）"><a href="#LEVEL-层次（Level）" class="headerlink" title="LEVEL 层次（Level）"></a>LEVEL 层次（Level）</h2><p>A strict definition of “level” is “the distance from the inputs and outputs.” The farther a policy is from both the inputs and the outputs of the system, the higher its level. The policies that manage input and output are the lowest-level policies in the system.</p><blockquote><p>我们对“层次”是严格按照“输入与输出之间的距离”来定义的。也就是说，一条策略距离系统的输入&#x2F;输出越远，它所属的层次就越高。而直接管理输入&#x2F;输出的策略在系统中的层次是最低的。</p></blockquote><p>The data flow diagram in Figure 19.1 depicts a simple encryption program that reads characters from an input device, translates the characters using a table, and then writes the translated characters to an output device. The data flows are shown as curved solid arrows. The properly designed source code dependencies are shown as straight dashed lines.</p><blockquote><p>在图 19.1 中，我们看到的是一个简单加密程序的数据流向图，该程序从输入设备读取字符，然后用查表法转换这些字符’并将转换后的字符输出到输出设备。我们将图中数据的流向用弯曲实心箭头标识了出来，而对于经精妙设计过的源码中的依赖关系则使用直虚线来标识。</p></blockquote><p><Figures figure="19-1">A simple encryption program</Figures></p><p>The Translate component is the highest-level component in this system because it is the component that is farthest from the inputs and outputs.1</p><blockquote><p>在图 19.1 中，Translate 组件是这个系统中层次最高的组件，因为该组件距离系统输入&#x2F;输出距离最远。</p></blockquote><p>Note that the data flows and the source code dependencies do not always point in the same direction. This, again, is part of the art of software architecture. We want source code dependencies to be decoupled from data flow and coupled to level.</p><blockquote><p>另外需要注意的是，图 19.1 中的数据流向和源码中的依赖关系并不总处于同一方向上。这也是软件架构设计工作的一部分。我们希望源码中的依赖关系与其数据流向脫钩，而与组件所在的层次挂钩。</p></blockquote><p>It would be easy to create an incorrect architecture by writing the encryption program like this:</p><blockquote><p>但我们很容易将这个加密程序写成下面这样，这就构成了一个不正确的架构：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) <span class="title function_">writeChar</span>(<span class="title function_">translate</span>(<span class="title function_">readChar</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is incorrect architecture because the high-level encrypt function depends on the lower-level readChar and writeChar functions.</p><blockquote><p>上面这个程序架构设计的错误在于，它让高层组件中的函数 encrypt() 依赖于低层组件中的函数 readChar() 与 writeChar()。</p></blockquote><p>A better architecture for this system is shown in the class diagram in Figure 19.2. Note the dashed border surrounding the Encrypt class, and the CharWriter and CharReader interfaces. All dependencies crossing that border point inward. This unit is the highest-level element in the system.</p><blockquote><p>更好的系统架构设计应如图 19.2 所示。请注意图 19.2 中被虚线框起来的 Encrypt 类及其两个接口 CharReader 和 CharWriter。所有的依赖关系都指向了边界内部。这一切都说明它是系统中最高层次的组件。</p></blockquote><p><Figures figure="19-2">Class diagram showing a better architecture for the system</Figures></p><p>ConsoleReader and ConsoleWriter are shown here as classes. They are low level because they are close to the inputs and outputs.</p><blockquote><p>在图 19.2 中，ConsoleReader 和 Consolewriter 都属于具体类。由于它们与输入&#x2F;输出最近，因此属于低层组件。</p></blockquote><p>Note how this structure decouples the high-level encryption policy from the lower-level input&#x2F;output policies. This makes the encryption policy usable in a wide range of contexts. When changes are made to the input and output policies, they are not likely to affect the encryption policy.</p><blockquote><p>另外应该注意的是，这个架构将高层的加密策略与低层的输入&#x2F;输出策略解耦了。也就是说，当输入&#x2F;输出部分的策略发生变更时，它们不太可能会影响加密部分的策略。</p></blockquote><p>Recall that policies are grouped into components based on the way that they change. Policies that change for the same reasons and at the same times are grouped together by the SRP and CCP. Higher-level policies—those that are farthest from the inputs and outputs—tend to change less frequently, and for more important reasons, than lower-level policies. Lower-level policies—those that are closest to the inputs and outputs—tend to change frequently, and with more urgency, but for less important reasons.</p><blockquote><p>正如之前提到的，我们应该根据策略发生变更的方式来将它们分成不同的组件。变更原因和变更时间相同的策略应在 SRP 和 CCP 这两个原则的指导下合并为同一组件。离输入&#x2F;输出最远的策略——高层策略——一般变更没有那么频繁。即使发生变更，其原因也比低层策略所在的组件更重大。反之，低层策略则很有可能会频繁地进行一些小变更。</p></blockquote><p>For example, even in the trivial example of the encryption program, it is far more likely that the IO devices will change than that the encryption algorithm will change. If the encryption algorithm does change, it will likely be for a more substantive reason than a change to one of the IO devices.</p><blockquote><p>例如，即使在这个简单的加密程序中，加密算法发生变更的可能性也要远小于 IO 设备发生变更的可能性。如果加密算法真的要变更，也很有可能比 I&#x2F;O 设备的变更更重大。</p></blockquote><p>Keeping these policies separate, with all source code dependencies pointing in the direction of the higher-level policies, reduces the impact of change. Trivial but urgent changes at the lowest levels of the system have little or no impact on the higher, more important, levels.</p><blockquote><p>通过将策略隔离，并让源码中的依赖方向都统一调整为指向高层策略，我们可以大幅度降低系统变更所带来的影响。因为一些针对系统低层组件的紧急小修改几乎不会影响系统中更高级、更重要的组件。</p></blockquote><p>Another way to look at this issue is to note that lower-level components should be plugins to the higher-level components. The component diagram in Figure 19.3 shows this arrangement. The Encryption component knows nothing of the IODevices component; the IODevices component depends on the Encryption component.</p><blockquote><p>从另一个角度来说，低层组件应该成为高层组件的插件。图 19.3 中的组件图展示了这种关系，我们可以看到 Encryption 组件对 IODevices 组件的情况一无所知，而 IODevices 组件则依赖于 Encryption 组件。</p></blockquote><p><Figures figure="19-3">Lower-level components should plug in to higher-level components</Figures></p><h2 id="CONCLUSION-本章小结-17"><a href="#CONCLUSION-本章小结-17" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>At this point, this discussion of policies has involved a mixture of the Single Responsibility Principle, the Open-Closed Principle, the Common Closure Principle, the Dependency Inversion Principle, the Stable Dependencies Principle, and the Stable Abstractions Principle. Look back and see if you can identify where each principle was used, and why.</p><blockquote><p>综上所述，本章针对策略的讨论涉及单一职责原则（SRP）、开闭原则（OCP）、共同闭包原则（CCP）、依赖反转原则（DIP）、稳定依赖原则（SDP）以及稳定抽象原则（SAP）。读者可以自行结合之前的内容来匹配每个原则所适用的场景以及背后的原因。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap20-BUSINESS-RULES-业务逻辑"><a href="#Chap20-BUSINESS-RULES-业务逻辑" class="headerlink" title="Chap20. BUSINESS RULES 业务逻辑"></a>Chap20. BUSINESS RULES 业务逻辑</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN20.jpg"></p><p>If we are going to divide our application into business rules and plugins, we’d better get a good grasp on just what business rules actually are. It turns out there are several different kinds.</p><blockquote><p>如果我们要将自己的应用程序划分为业务逻辑和插件两部分，就必须更仔细地了解业务逻辑究竟是什么它到底有几种类型。</p></blockquote><p>Strictly speaking, business rules are rules or procedures that make or save the business money. Very strictly speaking, these rules would make or save the business money, irrespective of whether they were implemented on a computer. They would make or save money even if they were executed manually.</p><blockquote><p>严格地讲，业务逻辑就是程序中那些真正用于赚钱或省钱的业务逻辑与国产。更严格地讲，无论这些业务逻辑是在计算机上实现的，还是人工执行的，它们在省钱&#x2F;赚钱上的作用都是一样的。</p></blockquote><p>The fact that a bank charges N% interest for a loan is a business rule that makes the bank money. It doesn’t matter if a computer program calculates the interest, or if a clerk with an abacus calculates the interest.</p><blockquote><p>例如，银张行要对借贷收取 N% 利息这个逻辑就是银行获取收入方面的一条业务逻辑，对它来说，我们通过计算机来计算利息，还是让一个银行职员用计算器来计算利息并不重要。</p></blockquote><p>We shall call these rules Critical Business Rules, because they are critical to the business itself, and would exist even if there were no system to automate them.</p><blockquote><p>我们通常称这些逻辑为“关键业务逻辑”，因为它们是一项业务的关键部分，不管有没有自动化系统来执行这项业务，这—点是不会改变的。</p></blockquote><p>Critical Business Rules usually require some data to work with. For example, our loan requires a loan balance, an interest rate, and a payment schedule.</p><blockquote><p>“关键业务逻辑”通常会需要处理一些数据，例如，在借贷的业务逻辑中，我们需要知道借贷的数量、利率以及还款日程。</p></blockquote><p>We shall call this data Critical Business Data. This is the data that would exist even if the system were not automated.</p><blockquote><p>我们将这些数据称为“关键业务数据”，这是因为这些数据无论自动化程序存在与否，都必须要存在。</p></blockquote><p>The critical rules and critical data are inextricably bound, so they are a good candidate for an object. We’ll call this kind of object an Entity.1</p><blockquote><p>关键业务逻辑和关键业务数据是紧密相关的，所以它们很适合被放在同一个对象中处理。我们将这种对象称为“业务实体（Entity）”。</p></blockquote><h2 id="ENTITIES-业务实体"><a href="#ENTITIES-业务实体" class="headerlink" title="ENTITIES 业务实体"></a>ENTITIES 业务实体</h2><p>An Entity is an object within our computer system that embodies a small set of critical business rules operating on Critical Business Data. The Entity object either contains the Critical Business Data or has very easy access to that data. The interface of the Entity consists of the functions that implement the Critical Business Rules that operate on that data.</p><blockquote><p>业务实体实际上就是计算机系统中的一种对象，这种对象中包含了一系列用于操作关键数据的业务逻辑。这些实体对象要么直接包含关键业务数据，要么可以很容易地访问这些数据。业务实体的接口层则是由那些实现关键业务逻辑、操作关键业务数据的函数组成的。</p></blockquote><p>For example, Figure 20.1 shows what our Loan entity might look like as a class in UML. It has three pieces of Critical Business Data, and presents three related Critical Business Rules at its interface.</p><blockquote><p>例如，在图 20.1 中，我们看到的是一个对应于借贷业务的实体类 Loan 的 UML 图。如你所见，该类中包含了三个关键业务数据，以及三个代表了其关键业务逻辑的接口。</p></blockquote><p><Figures figure="20-1">Loan entity as a class in UML</Figures></p><p>When we create this kind of class, we are gathering together the software that implements a concept that is critical to the business, and separating it from every other concern in the automated system we are building. This class stands alone as a representative of the business. It is unsullied with concerns about databases, user interfaces, or third-party frameworks. It could serve the business in any system, irrespective of how that system was presented, or how the data was stored, or how the computers in that system were arranged. The Entity is pure business and nothing else.</p><blockquote><p>当我们创建这样一个类时，其实就是在将软件中具体实现了该关键业务的部分聚合在一起，将其与自动化系统中我们所构建的其他部分隔离区分。这个类独自代表了整个业务逻辑，它与数据库、用户界面、第三方框架等内容无关。该类可以在任何一个系统中提供与其业务逻辑相关的服务，它不会去管这个系统是如何呈现给用户的，数据是如何存储的，或者是以何种方式运行的。总而言之，业务实体这个概念中应该只有业务逻辑，没有别的。</p></blockquote><p>Some of you may be concerned that I called it a class. Don’t be. You don’t need to use an object-oriented language to create an Entity. All that is required is that you bind the Critical Business Data and the Critical Business Rules together in a single and separate software module.</p><blockquote><p>有些读者可能会担心我在这里把业务实体解释成一个类。不是这样的，业务实体不一定非要用面向对象编程语言的类来实现。业务实体这个概念只要求我们将关键业务数据和关键业务逻辑绑定在一个独立的软件模块内。</p></blockquote><h2 id="USE-CASES-用例-1"><a href="#USE-CASES-用例-1" class="headerlink" title="USE CASES 用例"></a>USE CASES 用例</h2><p>Not all business rules are as pure as Entities. Some business rules make or save money for the business by defining and constraining the way that an automated system operates. These rules would not be used in a manual environment, because they make sense only as part of an automated system.</p><blockquote><p>并不是所有的业务逻辑都是一个纯粹的业务实体。例如，有些业务逻辑是通过定义或限制自动化系统的运行方式来实现赚钱或省钱的业务的。这些业务逻辑就不能靠人工来执行，它们只有作为自动化系统的一部分时才有意义。</p></blockquote><p>For example, imagine an application that is used by bank officers to create a new loan. The bank may decide that it does not want the loan officers to offer loan payment estimates until they have first gathered, and validated, contact information and ensured that the candidate’s credit score is 500 or higher. For this reason, the bank may specify that the system will not proceed to the payment estimation screen until the contact information screen has been filled out and verified, and the credit score has been confirmed to be greater than the cutoff.</p><blockquote><p>例如，假设我们现在有一个银行职员们用来新建借贷的应用程序，银行可能设计的业务逻辑是，银行职员必须首先收集、验证客户的联系信息，确保客户的信用值在 500 以上，然后才允许向用户提供借贷还款的预估值。因此，银行就必须要求在设计其计算机系统时确保两件事：首先，客户必须能通过屏幕填写所有的联系信息并且让其通过相关验证；其次，客户只有在其信用值大于既定阈值时才能进入还款预估页。</p></blockquote><p>This is a use case.2 A use case is a description of the way that an automated system is used. It specifies the input to be provided by the user, the output to be returned to the user, and the processing steps involved in producing that output. A use case describes application-specific business rules as opposed to the Critical Business Rules within the Entities.</p><blockquote><p>我们在上面所描述的就是一个用例（user case）。用例本质上就是关于如何操作一个自动化系统的描述，它定义了用户需要提供的输入数据、用户应该得到的输出信息以及产生输出所应该采取的处理步骤。当然，用例所描述的是某种特定应用情景下的业务逻辑，它并非业务实体中所包含的关键业务逻辑。</p></blockquote><p>Figure 20.2 shows an example of a use case. Notice that in the last line it mentions the Customer. This is a reference to the Customer entity, which contains the Critical Business Rules that govern the relationship between the bank and its customers.</p><blockquote><p>下面，让我们来看看图 20.2 中的这个用例。请注意，图 20.2 的最后一行中提到的“客户”，这里的客户是指代表客户的业务实体，其中包含了处理银行与客户之间关系的关键业务逻辑。</p></blockquote><p><Figures figure="20-2">Example use case</Figures></p><p>Use cases contain the rules that specify how and when the Critical Business Rules within the Entities are invoked. Use cases control the dance of the Entities.</p><blockquote><p>如上所示，用例中包含了对如何调用业务实体中的关键业务逻辑的定义。简而言之，用例控制着业务实体之间的交互方式。</p></blockquote><p>Notice also that the use case does not describe the user interface other than to informally specify the data coming in from that interface, and the data going back out through that interface. From the use case, it is impossible to tell whether the application is delivered on the web, or on a thick client, or on a console, or is a pure service.</p><blockquote><p>除此之外，这里还应该注意，用例除非正式地描述了数据流入&#x2F;流出接口以外，并不详细描述用户界面。也就是说，如果我们只看用例，是没有办法分辨出系统是在 Web 平台上交付的，还是交付了某种常客门端；或后是以命令行模式交付的，还是以一个内部服务模式交付的。</p></blockquote><p>This is very important. Use cases do not describe how the system appears to the user. Instead, they describe the application-specific rules that govern the interaction between the users and the Entities. How the data gets in and out of the system is irrelevant to the use cases.</p><blockquote><p>这是非常重要的。用例并不描述系统与用户之间的接口，它只描述该应用在某些特定情境下的业务逻辑，这些业务逻辑所规范的是用户与业务实体之间的交互方式，它与数据流入&#x2F;流出系统的方式无关。</p></blockquote><p>A use case is an object. It has one or more functions that implement the application-specific business rules. It also has data elements that include the input data, the output data, and the references to the appropriate Entities with which it interacts.</p><blockquote><p>在我们的系统中，用例本身也是一个对象，该对象中包含了一个或多个实现了特定应用情景的业务逻辑函数。当然除此之外，用例对象中也包含了输入数据、输出数据以及相关业务实体的引用，以方便调用。</p></blockquote><p>Entities have no knowledge of the use cases that control them. This is another example of the direction of the dependencies following the Dependency Inversion Principle. High-level concepts, such as Entities, know nothing of lower-level concepts, such as use cases. Instead, the lower-level use cases know about the higher-level Entities.</p><blockquote><p>当然，业务实体并不会知道是哪个业务用例在控制它们，这也是依赖反转原则（DIP）的另一个应用情景。也就是像业务实体这样的高层概念是无须了解像用例这样的低层概念的。反之，低层的业务用例却需要了解高层的业务实体。</p></blockquote><p>Why are Entities high level and use cases lower level? Because use cases are specific to a single application and, therefore, are closer to the inputs and outputs of that system. Entities are generalizations that can be used in many different applications, so they are farther from the inputs and outputs of the system. Use cases depend on Entities; Entities do not depend on use cases.</p><blockquote><p>那么，为什么业务实体属于高层概念，而用例属于低层概念呢？因为用例描述的是一个特定的应用情景，这样一来，用例必然会更靠近系统的输入和输出。而业务实体是一个可以适用于多个应用情景的一般化概念，相对地离系统的输入和输出更远。所以，用例依赖于业务实体，而业务实体并不依赖于用例。</p></blockquote><h2 id="REQUEST-AND-RESPONSE-MODELS-请求和响应模型"><a href="#REQUEST-AND-RESPONSE-MODELS-请求和响应模型" class="headerlink" title="REQUEST AND RESPONSE MODELS 请求和响应模型"></a>REQUEST AND RESPONSE MODELS 请求和响应模型</h2><p>Use cases expect input data, and they produce output data. However, a well-formed use case object should have no inkling about the way that data is communicated to the user, or to any other component. We certainly don’t want the code within the use case class to know about HTML or SQL!</p><blockquote><p>在通常情况下，用例会接收输入数据，并产生输出数据。但在一个设计良好的架构中，用例对象通常不应该知道数据展现给用户或者其他组件的方式。很显然我们当然不会希望这些用例类中的代码出现 HTML 和 SQL。</p></blockquote><p>The use case class accepts simple request data structures for its input, and returns simple response data structures as its output. These data structures are not dependent on anything. They do not derive from standard framework interfaces such as HttpRequest and HttpResponse. They know nothing of the web, nor do they share any of the trappings of whatever user interface might be in place.</p><blockquote><p>因此，用例类所接收的输入应该是一个简单的请求性数据结构，而返回输出的应该是一个简单的响应性数据结构。这些数据结构中不应该存在任何依赖关系，它们并不派生自 HttpRequest 和 HttpRespons 这样的标准框架接口。这些数据接口应该与 Web 无关，也不应该了解任何有关用户界面的细节。</p></blockquote><p>This lack of dependencies is critical. If the request and response models are not independent, then the use cases that depend on them will be indirectly bound to whatever dependencies the models carry with them.</p><blockquote><p>这种独立性非常关键，如果这里的请求和响应模型不是完全独立的，那么用到这些模型的用例就会依赖于这些模型所带来的各种依赖关系。</p></blockquote><p>You might be tempted to have these data structures contain references to Entity objects. You might think this makes sense because the Entities and the request&#x2F;response models share so much data. Avoid this temptation! The purpose of these two objects is very different. Over time they will change for very different reasons, so tying them together in any way violates the Common Closure and Single Responsibility Principles. The result would be lots of tramp data, and lots of conditionals in your code.</p><blockquote><p>可能有些读者会选择直接在数据结构中使用对业务实体对象的引用。毕竟，业务请求响应模型之间有很多相同的数据。但请一定不要这样做！这两个对象存在的意义是非常、非常不一样的。随着时间的推移，这两个对象会以不同的原因、不同的速率发生变更。所以将它们以任何方式整合在一起都是对共同闭包原则（CCP）和单一职责原则（SRP）的违反。这样做的后果，往往会导致代码中出现很多分支判断语句和中间数据。</p></blockquote><h2 id="CONCLUSION-本章小结-18"><a href="#CONCLUSION-本章小结-18" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>Business rules are the reason a software system exists. They are the core functionality. They carry the code that makes, or saves, money. They are the family jewels.</p><blockquote><p>业务逻辑是一个软件系统存在的意义，它们属于核心功能，是系统用来赚钱或省钱的那部分代码，是整个系统中的皇冠明珠。</p></blockquote><p>The business rules should remain pristine, unsullied by baser concerns such as the user interface or database used. Ideally, the code that represents the business rules should be the heart of the system, with lesser concerns being plugged in to them. The business rules should be the most independent and reusable code in the system.</p><blockquote><p>这些业务逻辑应该保持纯净，不要掺杂用户界面或者所使用的数据库相关的东西。在理想情况下，这部分代表业务逻辑的代码应该是整个系统的核心，其他低层概念的实现应该以插件形式接入系统中。业务逻辑应该是系统中最独立、复用性最高的代码。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap21-SCREAMING-ARCHITECTURE-尖叫的软件架构"><a href="#Chap21-SCREAMING-ARCHITECTURE-尖叫的软件架构" class="headerlink" title="Chap21. SCREAMING ARCHITECTURE 尖叫的软件架构"></a>Chap21. SCREAMING ARCHITECTURE 尖叫的软件架构</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN21.jpg"></p><p>Imagine that you are looking at the blueprints of a building. This document, prepared by an architect, provides the plans for the building. What do these plans tell you?</p><blockquote><p>假设我们现在正在查看某个建筑的设计架构图，那么在这个反映建筑设计师精心设计成果的文件中，究竟应该是怎样的架构图呢？</p></blockquote><p>If the plans you are viewing are for a single-family residence, then you’ll likely see a front entrance, a foyer leading to a living room, and perhaps a dining room. There will likely be a kitchen a short distance away, close to the dining room. Perhaps there is a dinette area next to the kitchen, and probably a family room close to that. When you looked at those plans, there would be no question that you were looking at a single family home. The architecture would scream: “HOME.”</p><blockquote><p>如果这是一幅单户住宅的建筑架构图，那么我们很可能会先看到一个大门，然后是一条连接到起居室的通道，同时可能还会看到一个餐厅。接着，距离餐厅不远处应该会有一个厨房，可能厨房附件还会有一个非正式用餐区，或一个亲子房。当我们阅读这个架构图时，应该不会怀疑这是一个单户住宅。几乎整个建筑设计都在尖叫着告诉你：这是一个“家”。</p></blockquote><p>Now suppose you were looking at the architecture of a library. You would likely see a grand entrance, an area for check-in&#x2F;out clerks, reading areas, small conference rooms, and gallery after gallery capable of holding bookshelves for all the books in the library. That architecture would scream: “LIBRARY.”</p><blockquote><p>假设我们阅读的是一幅图书馆的建筑设计图，情况也差不多。我们应该会先看到一个超大入口，然后是一个用于签到&#x2F;签出的办公区，接下来是阅读区、小型会议室，以及一排排的书架区。同样，几乎整个建筑设计都在尖叫着跟你说：这是一个“图书馆”。</p></blockquote><p>So what does the architecture of your application scream? When you look at the top-level directory structure, and the source files in the highest-level package, do they scream “Health Care System,” or “Accounting System,” or “Inventory Management System”? Or do they scream “Rails,” or “Spring&#x2F;Hibernate,” or “ASP”?</p><blockquote><p>那么，我们的应用程序的架构设计又会“喊”些什么呢？当我们查看它的顶层结构目录，以及顶层软件包中的源代码时，它们究竟是在喊“健康管理系统”“账务系统” “库存管理系统”，还是在喊：“Rails” “Spring&#x2F;Hibernate” “ASP” 这样的技术名词呢？</p></blockquote><h2 id="THE-THEME-OF-AN-ARCHITECTURE-架构设计的主题"><a href="#THE-THEME-OF-AN-ARCHITECTURE-架构设计的主题" class="headerlink" title="THE THEME OF AN ARCHITECTURE 架构设计的主题"></a>THE THEME OF AN ARCHITECTURE 架构设计的主题</h2><p>Go back and read Ivar Jacobson’s seminal work on software architecture: Object Oriented Software Engineering. Notice the subtitle of the book: A Use Case Driven Approach. In this book Jacobson makes the point that software architectures are structures that support the use cases of the system. Just as the plans for a house or a library scream about the use cases of those buildings, so should the architecture of a software application scream about the use cases of the application.</p><blockquote><p>在这里，再次推荐读者仔细阅读 Ivar Jacobson 关于软件架构设计的那本书：Object Oriented Software Engineering，请读者注意这本书的副标题 A Use Case Driven Approach（业务用例驱动的设计方式）。在这本书中，Jacobson 提出了一个观点：软件的系统架构应该为该系统的用例提供支持。这就像住宅和图书馆的建筑计划满篇都在非常明显地凸显这些建筑的用例一样，软件系统的架构设计图也应该非常明确地凸显该应用程序会有哪些用例。</p></blockquote><p>Architectures are not (or should not be) about frameworks. Architectures should not be supplied by frameworks. Frameworks are tools to be used, not architectures to be conformed to. If your architecture is based on frameworks, then it cannot be based on your use cases.</p><blockquote><p>架构设计不是（或者说不应该是）与框架相关的，这件事不应该是基于框架来完成的。对于我们来说，框架只是一个可用的工具和手段，而不是一个架构所规范的内容。如果我们的架构是基于框架来设计的，它就不能基于我们的用例来设计了。</p></blockquote><h2 id="THE-PURPOSE-OF-AN-ARCHITECTURE-架构设计的核心目标"><a href="#THE-PURPOSE-OF-AN-ARCHITECTURE-架构设计的核心目标" class="headerlink" title="THE PURPOSE OF AN ARCHITECTURE 架构设计的核心目标"></a>THE PURPOSE OF AN ARCHITECTURE 架构设计的核心目标</h2><p>Good architectures are centered on use cases so that architects can safely describe the structures that support those use cases without committing to frameworks, tools, and environments. Again, consider the plans for a house. The first concern of the architect is to make sure that the house is usable—not to ensure that the house is made of bricks. Indeed, the architect takes pains to ensure that the homeowner can make decisions about the exterior material (bricks, stone, or cedar) later, after the plans ensure that the use cases are met.</p><blockquote><p>一个良好的架构设计应该围绕着用例来展开，这样的架构设计可以在脱离框架、工具以及使用环境的情况下完整地描述用例。这就好像一个住宅建筑设计的首要目标应该是满足住宅的使用需求，而不是确保一定要用砖来构建这个房子。架构师应该花费更多的精力来确保该架构的设计在满足用例需求的情况下，尽可能地允许用户能自由地选择建筑材料（砖头、石料或者木材）。</p></blockquote><p>A good software architecture allows decisions about frameworks, databases, web servers, and other environmental issues and tools to be deferred and delayed. Frameworks are options to be left open. A good architecture makes it unnecessary to decide on Rails, or Spring, or Hibernate, or Tomcat, or MySQL, until much later in the project. A good architecture makes it easy to change your mind about those decisions, too. A good architecture emphasizes the use cases and decouples them from peripheral concerns.</p><blockquote><p>而且，良好的架构设计应该尽可能地允许用户推迟和延后决定釆用什么框架、数据库、Web 服务以及其他与环境相关的工具。框架应该是一个可选项，良好的架构设计应该允许用户在项目后期再决定是否采用 Rails、Spring、Hibernate、Tomcat、MySQL 这些工具。同时，良好的架构设计还应该让我们很容易改变这些决定。总之，良好的架构设计应该只关注用例，并能将它们与其他的周边因素隔离。</p></blockquote><h2 id="BUT-WHAT-ABOUT-THE-WEB-那-Web-呢"><a href="#BUT-WHAT-ABOUT-THE-WEB-那-Web-呢" class="headerlink" title="BUT WHAT ABOUT THE WEB? 那 Web 呢"></a>BUT WHAT ABOUT THE WEB? 那 Web 呢</h2><p>Is the web an architecture? Does the fact that your system is delivered on the web dictate the architecture of your system? Of course not! The web is a delivery mechanism—an IO device—and your application architecture should treat it as such. The fact that your application is delivered over the web is a detail and should not dominate your system structure. Indeed, the decision that your application will be delivered over the web is one that you should defer. Your system architecture should be as ignorant as possible about how it will be delivered. You should be able to deliver it as a console app, or a web app, or a thick client app, or even a web service app, without undue complication or change to the fundamental architecture.</p><blockquote><p>Web 究竟是不是一种架构？如果我们的系统需要以 Web 形式来交付，这是否意味着我们只能采用某种系统架构？当然不是！Web 只是一种交付手段——一种 IO 设备——这就是它在应用程序的架构设计中的角色。换句话说，应用程序采用 Web 方 式来交付只是一个实现细节，这不应该主导整个项目的结构设计。事实上，关于一个应用程序是否应该以 Web 形式来交付这件事，它本身就应该是一个被推迟和延后的决策。一个系统应该尽量保持它与交付方式之间的无关性。在不更改基础架构设计的情况下，我们应该可以将一个应用程序交付成命令行程序、Web 程序、富客户端程序、Web 服务程序等任何一种形式的程序。</p></blockquote><h2 id="FRAMEWORKS-ARE-TOOLS-NOT-WAYS-OF-LIFE-框架是工具而不是生活信条"><a href="#FRAMEWORKS-ARE-TOOLS-NOT-WAYS-OF-LIFE-框架是工具而不是生活信条" class="headerlink" title="FRAMEWORKS ARE TOOLS, NOT WAYS OF LIFE 框架是工具而不是生活信条"></a>FRAMEWORKS ARE TOOLS, NOT WAYS OF LIFE 框架是工具而不是生活信条</h2><p>Frameworks can be very powerful and very useful. Framework authors often believe very deeply in their frameworks. The examples they write for how to use their frameworks are told from the point of view of a true believer. Other authors who write about the framework also tend to be disciples of the true belief. They show you the way to use the framework. Often they assume an all-encompassing, all-pervading, let-the-framework-do-everything position.</p><blockquote><p>当然，框架通常可以是非常强大、非常有用的。但框架作者往往对自己写出的框架有着极深的信念，他们所写出来的使用手册一般都是从如何成为该框架的虔诚信徒的角度来描绘如何使用这个框架的。甚至这些框架的使用者所写的教程也会出现这种传教士模式。他们会告诉你某个框架是能包揽一切、超越一切、解决一切问题的存在。</p></blockquote><p>This is not the position you want to take.</p><blockquote><p>这不应该成为你的观点。</p></blockquote><p>Look at each framework with a jaded eye. View it skeptically. Yes, it might help, but at what cost? Ask yourself how you should use it, and how you should protect yourself from it. Think about how you can preserve the use-case emphasis of your architecture. Develop a strategy that prevents the framework from taking over that architecture.</p><blockquote><p>我们一定要带着怀疑的态度审视每一个框架。是的，采用框架可能会很有帮助，但采用它们的成本呢？我们一定要懂得权衡如何使用一个框架，如何保护自己。无论如何，我们需要仔细考虑如何能保持对系统用例的关注，避免让框架主导我们的架构设计。</p></blockquote><h2 id="TESTABLE-ARCHITECTURES-可测试的架构设计"><a href="#TESTABLE-ARCHITECTURES-可测试的架构设计" class="headerlink" title="TESTABLE ARCHITECTURES 可测试的架构设计"></a>TESTABLE ARCHITECTURES 可测试的架构设计</h2><p>If your system architecture is all about the use cases, and if you have kept your frameworks at arm’s length, then you should be able to unit-test all those use cases without any of the frameworks in place. You shouldn’t need the web server running to run your tests. You shouldn’t need the database connected to run your tests. Your Entity objects should be plain old objects that have no dependencies on frameworks or databases or other complications. Your use case objects should coordinate your Entity objects. Finally, all of them together should be testable in situ, without any of the complications of frameworks.</p><blockquote><p>如果系统架构的所有设计都是围绕着用例来展开的，并且在使用框架的问题上保持谨慎的态度，那么我们就应该可以在不依赖任何框架的情况下针对这些用例进行单元测试。另外，我们在运行测试的时候不应该运行 Web 服务，也不应该需要连接数据库。我们测试的应该只是一个简单的业务实体对象，没有任何与框架、数据库相关的依赖关系。总而言之，我们应该通过用例对象来调度业务实体对象，确保所有的测试都不需要依赖框架。</p></blockquote><h2 id="CONCLUSION-本章小结-19"><a href="#CONCLUSION-本章小结-19" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>Your architecture should tell readers about the system, not about the frameworks you used in your system. If you are building a health care system, then when new programmers look at the source repository, their first impression should be, “Oh, this is a heath care system.” Those new programmers should be able to learn all the use cases of the system, yet still not know how the system is delivered. They may come to you and say:</p><blockquote><p>一个系统的架构应该着重于展示系统本身的设计，而并非该系统所使用的框架。如果我们要构建的是一个医疗系统，新来的程序员第一次看到其源码时就应该知道这是一个医疗系统。新来的程序员应该先了解该系统的用例，而非系统的交付方式。他们可能会走过来问你：</p></blockquote><p>“We see some things that look like models—but where are the views and controllers?”</p><blockquote><p>“我看到了一些看起来像是模型的代码——但它们的视图和控制器在哪里？”</p></blockquote><p>And you should respond:</p><blockquote><p>这时你的回答应该是：</p></blockquote><p>“Oh, those are details that needn’t concern us at the moment. We’ll decide about them later.”</p><blockquote><p>“哦，我们现在先不考虑这些细节问题，回头再来决定应该怎么做。”</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap22-THE-CLEAN-ARCHITECTURE-整洁架构"><a href="#Chap22-THE-CLEAN-ARCHITECTURE-整洁架构" class="headerlink" title="Chap22. THE CLEAN ARCHITECTURE 整洁架构"></a>Chap22. THE CLEAN ARCHITECTURE 整洁架构</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN22.jpg"></p><p>Over the last several decades we’ve seen a whole range of ideas regarding the architecture of systems. These include:</p><blockquote><p>在过去的几十年中，我们曾见证过一系列关于系统架构的想法被提出，列举如下。</p></blockquote><ul><li>Hexagonal Architecture (also known as Ports and Adapters), developed by Alistair Cockburn, and adopted by Steve Freeman and Nat Pryce in their wonderful book Growing Object Oriented Software with Tests</li><li>DCI from James Coplien and Trygve Reenskaug</li><li>BCE, introduced by Ivar Jacobson from his book Object Oriented Software Engineering: A Use-Case Driven Approach</li></ul><hr><blockquote><ul><li>六边形架构 （Hexagonal Architecture）（也称为端口与适配器架构，Ports and Adpaters）： 该架构由 Alistair Cockburn 首先提出。Steve Freeman 和 Nat Pryce 在他们合写的著作 Growing Object oriented software with Tests 一书中对该架构做了隆重的推荐。</li><li>DCI 架构：由 James Coplien 和 Trygve Reenskaug 首先提出。</li><li>BCE 架构：由 Ivar Jacobson 在他的 Object Oriented Software Engineer： A Use-Case Driven Approach 一书中首先提出。</li></ul></blockquote><p>Although these architectures all vary somewhat in their details, they are very similar. They all have the same objective, which is the separation of concerns. They all achieve this separation by dividing the software into layers. Each has at least one layer for business rules, and another layer for user and system interfaces.</p><blockquote><p>虽然这些架构在细节上各有不同，但总体来说是非常相似的。它们都具有同一个设计目标：按照不同关注点对软件进行切割。也就是说，这些架构都会将软件切割成不同的层，至少有一层是只包含该软件的业务逻辑的，而用户接口、系统接口则属于其他层。</p></blockquote><p>Each of these architectures produces systems that have the following characteristics:</p><blockquote><p>按照这些架构设计出来的系统，通常都具有以下特点。</p></blockquote><ul><li>Independent of frameworks. The architecture does not depend on the existence of some library of feature-laden software. This allows you to use such frameworks as tools, rather than forcing you to cram your system into their limited constraints.</li><li>Testable. The business rules can be tested without the UI, database, web server, or any other external element.</li><li>Independent of the UI. The UI can change easily, without changing the rest of the system. A web UI could be replaced with a console UI, for example, without changing the business rules.</li><li>Independent of the database. You can swap out Oracle or SQL Server for Mongo, BigTable, CouchDB, or something else. Your business rules are not bound to the database.</li><li>Independent of any external agency. In fact, your business rules don’t know anything at all about the interfaces to the outside world.</li></ul><hr><blockquote><ul><li>独立于框架：这些系统的架构并不依赖某个功能丰富的框架之中的某个函数。框架可以被当成工具来使用，但不需要让系统来适应框架。</li><li>可被测试：这些系统的业务逻辑可以脱离 UI、数据库、Web 服务以及其他的外部元素来进行测试。</li><li>独立于 UI：这些系统的 UI 变更起来很容易，不需要修改其他的系统部分。例如，我们可以在不修改业务逻辑的前提下将一个系统的 UI 由 Web 界面替换成命令行界面。</li><li>独立于数据库：我们可以轻易将这些系统使用的 Oracle 、SQL Server 替换成 Mongo、BigTable、CouchDB 之类的数据库。因为业务逻辑与数据库之间已经完成了解耦。</li><li>独立于任何外部机构：这些系统的业务逻辑并不需要知道任何其他外部接口的存在。</li></ul></blockquote><p>The diagram in Figure 22.1 is an attempt at integrating all these architectures into a single actionable idea.</p><blockquote><p>下面我们要通过图 22.1 将上述所有架构的设计理念综合成为一个独立的理念。</p></blockquote><p><Figures figure="22-1">The clean architecture</Figures></p><h2 id="THE-DEPENDENCY-RULE-依赖关系规则"><a href="#THE-DEPENDENCY-RULE-依赖关系规则" class="headerlink" title="THE DEPENDENCY RULE 依赖关系规则"></a>THE DEPENDENCY RULE 依赖关系规则</h2><p>The concentric circles in Figure 22.1 represent different areas of software. In general, the further in you go, the higher level the software becomes. The outer circles are mechanisms. The inner circles are policies.</p><blockquote><p>图 22.1 中的同心圆分别代表了软件系统中的不同层次，通常越靠近中心，其所在的软件层次就越高。基本上，外层圆代表的是机制，内层圆代表的是策略。</p></blockquote><p>The overriding rule that makes this architecture work is the Dependency Rule:</p><blockquote><p>当然这其中有一条贯穿整个架构设计的规则，即它的依赖关系规则：</p></blockquote><p>Source code dependencies must point only inward, toward higher-level policies.</p><blockquote><p>源码中的依赖关系必须只指向同心圆的内层，即由低层机制指向高层策略。</p></blockquote><p>Nothing in an inner circle can know anything at all about something in an outer circle. In particular, the name of something declared in an outer circle must not be mentioned by the code in an inner circle. That includes functions, classes, variables, or any other named software entity.</p><blockquote><p>换句话说，就是任何属于内层圆中的代码都不应该牵涉外层圆中的代码，尤其是内层圆中的代码不应该引用外层圆中代码所声明的名字，包括函数、类、变量以及一切其他有命名的软件实体。</p></blockquote><p>By the same token, data formats declared in an outer circle should not be used by an inner circle, especially if those formats are generated by a framework in an outer circle. We don’t want anything in an outer circle to impact the inner circles.</p><blockquote><p>同样的道理，外层圆中使用的数据格式也不应该被内层圆中的代码所使用，尤其是当数据格式是由外层圆的框架所生成。总之，我们不应该让外层圆中发生的任何变更影响到内层圆的代码。</p></blockquote><h3 id="ENTITIES-业务实体-1"><a href="#ENTITIES-业务实体-1" class="headerlink" title="ENTITIES 业务实体"></a>ENTITIES 业务实体</h3><p>Entities encapsulate enterprise-wide Critical Business Rules. An entity can be an object with methods, or it can be a set of data structures and functions. It doesn’t matter so long as the entities can be used by many different applications in the enterprise.</p><blockquote><p>业务实体这一层中封装的是整个系统的关键业务逻辑，一个业务实体既可以是一个带有方法的对象，也可以是一组数据结构和函数的集合。无论如何，只要它能被系统中的其他不同应用复用就可以。</p></blockquote><p>If you don’t have an enterprise and are writing just a single application, then these entities are the business objects of the application. They encapsulate the most general and high-level rules. They are the least likely to change when something external changes. For example, you would not expect these objects to be affected by a change to page navigation or security. No operational change to any particular application should affect the entity layer.</p><blockquote><p>如果我们在写的不是一个大型系统，而是一个单一应用的话，那么我们的业务实体就是该应用的业务对象。这些对象封装了该应用中最通用、最高层的业务逻辑，它们应该属于系统中最不容易受外界影响而变动的部分。例如，一个针对页面导航方式或者安全问题的修改不应该触及这些对象，一个针对应用在运行时的行为所做的变更也不应该影响业务实体。</p></blockquote><h3 id="USE-CASES-用例-2"><a href="#USE-CASES-用例-2" class="headerlink" title="USE CASES 用例"></a>USE CASES 用例</h3><p>The software in the use cases layer contains application-specific business rules. It encapsulates and implements all of the use cases of the system. These use cases orchestrate the flow of data to and from the entities, and direct those entities to use their Critical Business Rules to achieve the goals of the use case.</p><blockquote><p>软件的用例层中通常包含的是特定应用场景下的业务逻辑，这里面封装并实现了整个系统的所有用例。这些用例引导了数据在业务实体之间的流入&#x2F;流出，并指挥着业务实体利用其中的关键业务逻辑来实现用例的设计目标。</p></blockquote><p>We do not expect changes in this layer to affect the entities. We also do not expect this layer to be affected by changes to externalities such as the database, the UI, or any of the common frameworks. The use cases layer is isolated from such concerns.</p><blockquote><p>我们既不希望在这一层所发生的变更影响业务实体，同时也不希望这一层受外部因素（譬如数据库、UI、常见框架）的影响。用例层应该与它们都保持隔离。</p></blockquote><p>We do, however, expect that changes to the operation of the application will affect the use cases and, therefore, the software in this layer. If the details of a use case change, then some code in this layer will certainly be affected.</p><blockquote><p>然而，我们知道应用行为的变化会影响用例本身，因此一定会影响用例层的代码。因为如果一个用例的细节发生了变化，这一层中的某些代码自然要受到影响。</p></blockquote><h3 id="INTERFACE-ADAPTERS-接口适配器"><a href="#INTERFACE-ADAPTERS-接口适配器" class="headerlink" title="INTERFACE ADAPTERS 接口适配器"></a>INTERFACE ADAPTERS 接口适配器</h3><p>The software in the interface adapters layer is a set of adapters that convert data from the format most convenient for the use cases and entities, to the format most convenient for some external agency such as the database or the web. It is this layer, for example, that will wholly contain the MVC architecture of a GUI. The presenters, views, and controllers all belong in the interface adapters layer. The models are likely just data structures that are passed from the controllers to the use cases, and then back from the use cases to the presenters and views.</p><blockquote><p>软件的接口适配器层中通常是一组数据转换器，它们负责将数据从对用例和业务实体而言最方便操作的格式，转化成外部系统（譬如数据库以及 Web）最方便操作的格式。例如，这一层中应该包含整个 GUI MVC 框架。展示器、视图、控制器都应该属于接口适配器层。而模型部分则应该由控制器传递给用例，再由用例传回展示器和视图。</p></blockquote><p>Similarly, data is converted, in this layer, from the form most convenient for entities and use cases, to the form most convenient for whatever persistence framework is being used (i.e., the database). No code inward of this circle should know anything at all about the database. If the database is a SQL database, then all SQL should be restricted to this layer—and in particular to the parts of this layer that have to do with the database.</p><blockquote><p>同样的，这一层的代码也会负责将数据从对业务实体与用例而言最方便操作的格式，转化为对所采用的持久性框架（譬如数据库）最方便的格式。总之，在从该层再向内的同心圆中，其代码就不应该依赖任何数据库了。譬如说，如果我们采用的是 SQL 数据库，那么所有的 SQL 语句都应该被限制在这一层的代码中——而且是仅限于那些需要操作数据库的代码。</p></blockquote><p>Also in this layer is any other adapter necessary to convert data from some external form, such as an external service, to the internal form used by the use cases and entities.</p><blockquote><p>当然，这一层的代码也会负责将来自外部服务的数据转换成系统内用例与业务实体所需的格式。</p></blockquote><h3 id="FRAMEWORKS-AND-DRIVERS-框架与驱动程序"><a href="#FRAMEWORKS-AND-DRIVERS-框架与驱动程序" class="headerlink" title="FRAMEWORKS AND DRIVERS 框架与驱动程序"></a>FRAMEWORKS AND DRIVERS 框架与驱动程序</h3><p>The outermost layer of the model in Figure 22.1 is generally composed of frameworks and tools such as the database and the web framework. Generally you don’t write much code in this layer, other than glue code that communicates to the next circle inward.</p><blockquote><p>图 22.1 中最外层的模型层一般是由工具、数据库、Web 框架等组成的。在这一层中，我们通常只需要编写一些与内层沟通的黏合性代码。</p></blockquote><p>The frameworks and drivers layer is where all the details go. The web is a detail. The database is a detail. We keep these things on the outside where they can do little harm.</p><blockquote><p>框架与驱动程序层中包含了所有的实现细节。Web 是一个实现细节，数据库也是一个实现细节。我们将这些细节放在最外层，这样它们就很难影响到其他层了。</p></blockquote><h3 id="ONLY-FOUR-CIRCLES-只有四层吗"><a href="#ONLY-FOUR-CIRCLES-只有四层吗" class="headerlink" title="ONLY FOUR CIRCLES? 只有四层吗"></a>ONLY FOUR CIRCLES? 只有四层吗</h3><p>The circles in Figure 22.1 are intended to be schematic: You may find that you need more than just these four. There’s no rule that says you must always have just these four. However, the Dependency Rule always applies. Source code dependencies always point inward. As you move inward, the level of abstraction and policy increases. The outermost circle consists of low-level concrete details. As you move inward, the software grows more abstract and encapsulates higher-level policies. The innermost circle is the most general and highest level.</p><blockquote><p>图 22.1 中所显示的同心圆只是为了说明架构的结构，真正的架构很可能会超过四层。并没有某个规则约定一个系统的架构有且只能有四层。然而，这其中的依赖关系原则是不变的。也就是说，源码层面的依赖关系一定要指向同心圆的内侧。层次越往内，其抽象和策略的层次越高，同时软件的抽象程度就越高，其包含的高层策略就越多。最内层的圆中包含的是最通用、最高层的策略，最外层的圆包含的是最具体的实现细节。</p></blockquote><h3 id="CROSSING-BOUNDARIES-跨越边界"><a href="#CROSSING-BOUNDARIES-跨越边界" class="headerlink" title="CROSSING BOUNDARIES 跨越边界"></a>CROSSING BOUNDARIES 跨越边界</h3><p>At the lower right of the diagram in Figure 22.1 is an example of how we cross the circle boundaries. It shows the controllers and presenters communicating with the use cases in the next layer. Note the flow of control: It begins in the controller, moves through the use case, and then winds up executing in the presenter. Note also the source code dependencies: Each points inward toward the use cases.</p><blockquote><p>在图 22.1 的右下侧，我们示范的是在架构中跨边界的情况。具体来说就是控制器、展示器与下一层的用例之间的通信过程。请注意这里控制流的方向：它从控制器开始，穿过用例，最后执行展示器的代码。但同时我们也该注意到，源码中的依赖方向却都是向内指向用例的。</p></blockquote><p>We usually resolve this apparent contradiction by using the Dependency Inversion Principle. In a language like Java, for example, we would arrange interfaces and inheritance relationships such that the source code dependencies oppose the flow of control at just the right points across the boundary.</p><blockquote><p>这里，我们通常釆用依赖反转原则（DIP）来解决这种相反性。例如，在 Java 这一类的语言中，可以通过调整代码中的接口和继承关系，利用源码中的依赖关系来限制控制流只能在正确的地方跨越架构边界。</p></blockquote><p>For example, suppose the use case needs to call the presenter. This call must not be direct because that would violate the Dependency Rule: No name in an outer circle can be mentioned by an inner circle. So we have the use case call an interface (shown in Figure 22.1 as “use case output port”) in the inner circle, and have the presenter in the outer circle implement it.</p><blockquote><p>假设某些用例代码需要调用展示器，这里一定不能直接调用，因为这样做会违反依赖关系原则：内层圆中的代码不能引用其外层的声明。我们需要让业务逻辑代码调用一个内层接口（图 22.1 中的“用例输出端”），并让展示器来负责实现这个接口。</p></blockquote><p>The same technique is used to cross all the boundaries in the architectures. We take advantage of dynamic polymorphism to create source code dependencies that oppose the flow of control so that we can conform to the Dependency Rule, no matter which direction the flow of control travels.</p><blockquote><p>我们可以采用这种方式跨越系统中所有的架构边界。利用动态多态技术，我们将源码中的依赖关系与控制流的方向进行反转。不管控制流原本的方向如何，我们都可以让它遵守架构的依赖关系规则。</p></blockquote><h3 id="WHICH-DATA-CROSSES-THE-BOUNDARIES-哪些数据会跨越边界"><a href="#WHICH-DATA-CROSSES-THE-BOUNDARIES-哪些数据会跨越边界" class="headerlink" title="WHICH DATA CROSSES THE BOUNDARIES 哪些数据会跨越边界"></a>WHICH DATA CROSSES THE BOUNDARIES 哪些数据会跨越边界</h3><p>Typically the data that crosses the boundaries consists of simple data structures. You can use basic structs or simple data transfer objects if you like. Or the data can simply be arguments in function calls. Or you can pack it into a hashmap, or construct it into an object. The important thing is that isolated, simple data structures are passed across the boundaries. We don’t want to cheat and pass Entity objects or database rows. We don’t want the data structures to have any kind of dependency that violates the Dependency Rule.</p><blockquote><p>一般来说，会跨越边界的数据在数据结构上都是很简单的。如果可以的话，我们会尽量采用一些基本的结构体或简单的可传输数据对象。或者直接通过函数调用的参数来传递数据。另外，我们也可以将数据放入哈希表，或整合成某种对象。这里最重要的是这个跨边界传输的对象应该有一个独立、简单的数据结构。总之，不要投机取巧直接传递业务实体或数据库记录对象。同时，这些传递的数据结构中也不应该存在违反依赖规则的依赖关系。</p></blockquote><p>For example, many database frameworks return a convenient data format in response to a query. We might call this a “row structure.” We don’t want to pass that row structure inward across a boundary. Doing so would violate the Dependency Rule because it would force an inner circle to know something about an outer circle.</p><blockquote><p>例如，很多数据库框架会返回一个便于查询的结果对象，我们称之为“行结构体”。这个结构体不应该跨边界向架构的内层传递。因为这等于让内层的代码引用外层代码，违反依赖规则。</p></blockquote><p>Thus, when we pass data across a boundary, it is always in the form that is most convenient for the inner circle.</p><blockquote><p>因此，当我们进行跨边界传输时，一定要采用内层最方便使用的形式。</p></blockquote><h2 id="A-TYPICAL-SCENARIO-一个常见的应用场景"><a href="#A-TYPICAL-SCENARIO-一个常见的应用场景" class="headerlink" title="A TYPICAL SCENARIO 一个常见的应用场景"></a>A TYPICAL SCENARIO 一个常见的应用场景</h2><p>The diagram in Figure 22.2 shows a typical scenario for a web-based Java system using a database. The web server gathers input data from the user and hands it to the Controller on the upper left. The Controller packages that data into a plain old Java object and passes this object through the InputBoundary to the UseCaseInteractor. The UseCaseInteractor interprets that data and uses it to control the dance of the Entities. It also uses the DataAccessInterface to bring the data used by those Entities into memory from the Database. Upon completion, the UseCaseInteractor gathers data from the Entities and constructs the OutputData as another plain old Java object. The OutputData is then passed through the OutputBoundary interface to the Presenter.</p><blockquote><p>接下来，我们将会在图 22.2 中看到一个基于 Web 的使用数据库的 Java 系统。在该系统中，Web 服务器会从用户那里收集信息，并将它们交给左上角的 controller。然后，controller 将这些信息包装成一个简单的 Java 对象，并让该对象穿越 InputBoundary 被传递到 UseCaseInteractor。接下来，我们会让 UseCaseInteractor 解析数据，并通过它来控制与 Entities 的交互。同时，我们还会用 DataAccessInterface 将 Entities 需要用到的数据从 Database 加载到内存中。随后，UseCaselnteractor 会负责从 Entities 收集数据，并将 OutputData 组装成另一个简单的 Java 对象。最后，OutputData 会穿越 OutputBoundary 被传递给 Presenter。</p></blockquote><p><Figures figure="22-2">A typical scenario for a web-based Java system utilizing a database</Figures></p><p>The job of the Presenter is to repackage the OutputData into viewable form as the ViewModel, which is yet another plain old Java object. The ViewModel contains mostly Strings and flags that the View uses to display the data. Whereas the OutputData may contain Date objects, the Presenter will load the ViewModel with corresponding Strings already formatted properly for the user. The same is true of Currency objects or any other business-related data. Button and MenuItem names are placed in the ViewModel, as are flags that tell the View whether those Buttons and MenuItems should be gray.</p><blockquote><p>接下来，Presenter 的任务是将 OutPutData 重新打包成可展示的 ViewModel，这也是一个简单的 Java 对象。ViewModel 中基本上只包含字符串和一些 View 都会用到的开关数据。同时，OutputData 中可能会包含一些 D ate 对象，Presenter 会将其格式化成可对用户展示的字符串，并将其填充到 ViewModel 中。同理，Currency 对象和其他业务相关的数据也会经历类似的操作。如你所见，Button 和 Menuitems 的命名定义位于 ViewModel 中，并且其中还包括了用于告知 View 层 Button 和 Menuitems 是否可用的开关数据。</p></blockquote><p>This leaves the View with almost nothing to do other than to move the data from the ViewModel into the HTML page.</p><blockquote><p>我们可以看出，View 除了将 ViewModel 中的数据转换成 HTML 格式之外，并没有其他功能。</p></blockquote><p>Note the directions of the dependencies. All dependencies cross the boundary lines pointing inward, following the Dependency Rule.</p><blockquote><p>最后，读者必须注意一下这里的依赖关系方向。所有跨边界的依赖线都是指向内的，这很好地遵守了架构的依赖关系规则。</p></blockquote><h2 id="CONCLUSION-本章小结-20"><a href="#CONCLUSION-本章小结-20" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>Conforming to these simple rules is not difficult, and it will save you a lot of headaches going forward. By separating the software into layers and conforming to the Dependency Rule, you will create a system that is intrinsically testable, with all the benefits that implies. When any of the external parts of the system become obsolete, such as the database, or the web framework, you can replace those obsolete elements with a minimum of fuss.</p><blockquote><p>如你所见，遵守上面这些简单的规范并不困难，这样做能在未来避免各种令人头疼的问题。通过将系统划分层次，并确保这些层次遵守依赖关系规则，就可以构建出一个天生可测试的系统，这其中的好处是不言而喻的。而且，当系统外层的这些数据库或 Web 框架过时的时候，我们还可以很轻松地替换它们。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap23-PRESENTERS-AND-HUMBLE-OBJECTS-展示器和谦卑对象"><a href="#Chap23-PRESENTERS-AND-HUMBLE-OBJECTS-展示器和谦卑对象" class="headerlink" title="Chap23. PRESENTERS AND HUMBLE OBJECTS 展示器和谦卑对象"></a>Chap23. PRESENTERS AND HUMBLE OBJECTS 展示器和谦卑对象</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN23.jpg"></p><p>In Chapter 22, we introduced the notion of presenters. Presenters are a form of the Humble Object pattern, which helps us identify and protect architectural boundaries. Actually, the Clean Architecture in the last chapter was full of Humble Object implementations.</p><blockquote><p>在第 22 章中，我们引入了展示器（presenter）的概念，展示器实际上是采用谦卑对象（humble object）模式的一种形式，这种设计模式可以很好地帮助识别和系统架构的边界。事实上，第 22 章所介绍的整洁架构中就充满了大量谦卑对象的实现体。</p></blockquote><h2 id="THE-HUMBLE-OBJECT-PATTERN-谦卑对象模式"><a href="#THE-HUMBLE-OBJECT-PATTERN-谦卑对象模式" class="headerlink" title="THE HUMBLE OBJECT PATTERN 谦卑对象模式"></a>THE HUMBLE OBJECT PATTERN 谦卑对象模式</h2><p>The Humble Object pattern1 is a design pattern that was originally identified as a way to help unit testers to separate behaviors that are hard to test from behaviors that are easy to test. The idea is very simple: Split the behaviors into two modules or classes. One of those modules is humble; it contains all the hard-to-test behaviors stripped down to their barest essence. The other module contains all the testable behaviors that were stripped out of the humble object.</p><blockquote><p>谦卑对象模式最初的设计目的是帮助单元测试的编写者区分容易测试的行为与难以测试的行为，并将它们隔离。其设计思路非常简单，就是将这两类行为拆分成两组模块或类。其中一组模块被称为谦卑（Humble）组，包含了系统中所有难以 测试的行为，而这些行为已经被简化到不能再简化了。另一组模块则包含了所有不属于谦卑对象的行为。</p></blockquote><p>For example, GUIs are hard to unit test because it is very difficult to write tests that can see the screen and check that the appropriate elements are displayed there. However, most of the behavior of a GUI is, in fact, easy to test. Using the Humble Object pattern, we can separate these two kinds of behaviors into two different classes called the Presenter and the View.</p><blockquote><p>例如，GUI 通常是很难进行单元测试的，因为让计算机自行检视屏幕内容，并检查指定元素是否出现是非常难的事情。然而，GUI 中的大部分行为实际上是很容易被测试的。这时候，我们就可以利用谦卑对象模式将 GUI 的这两种行为拆分成展示器与视图两部分。</p></blockquote><h2 id="PRESENTERS-AND-VIEWS-展示器与视图"><a href="#PRESENTERS-AND-VIEWS-展示器与视图" class="headerlink" title="PRESENTERS AND VIEWS 展示器与视图"></a>PRESENTERS AND VIEWS 展示器与视图</h2><p>The View is the humble object that is hard to test. The code in this object is kept as simple as possible. It moves data into the GUI but does not process that data.</p><blockquote><p>视图部分属于难以测试的谦卑对象。这种对象的代码通常应该越简单越好，它只应负责将数据填充到 GUI 上，而不应该对数据进行任何处理。</p></blockquote><p>The Presenter is the testable object. Its job is to accept data from the application and format it for presentation so that the View can simply move it to the screen. For example, if the application wants a date displayed in a field, it will hand the Presenter a Date object. The Presenter will then format that data into an appropriate string and place it in a simple data structure called the View Model, where the View can find it.</p><blockquote><p>展示器则是可测试的对象。展示器的工作是负责从应用程序中接收数据，然后按视图的需要将这些数据格式化，以便视图将其呈现在屏幕上。例如，如果应用程序需要在屏幕上展示一个日期，那么它传递给展示器的应该是一个 Date 对象。然后展示器会将该对象格式化成所需的字符串形式，并将其填充到视图模型中。</p></blockquote><p>If the application wants to display money on the screen, it might pass a Currency object to the Presenter. The Presenter will format that object with the appropriate decimal places and currency markers, creating a string that it can place in the View Model. If that currency value should be turned red if it is negative, then a simple boolean flag in the View model will be set appropriately.</p><blockquote><p>如果应用程序需要在屏幕上展示金额，那么它应该将 Currency 对象传递给展示器。展示器随后会将这个对象按所需的小数位数进行格式化，并加上对应的货币标识符，形成一个字符串存放在视图模型中。如果需要将负数金额显示成红色，那么该视图模型中就应该有一个简单的布尔值被恰当地设置。</p></blockquote><p>Every button on the screen will have a name. That name will be a string in the View Model, placed there by the presenter. If those buttons should be grayed out, the Presenter will set an appropriate boolean flag in the View model. Every menu item name is a string in the View model, loaded by the Presenter. The names for every radio button, check box, and text field are loaded, by the Presenter, into appropriate strings and booleans in the View model. Tables of numbers that should be displayed on the screen are loaded, by the Presenter, into tables of properly formatted strings in the View model.</p><blockquote><p>另外，应用程序在屏幕上的每个按钮都应该有其对应的名称，这些名称也是由展示器在视图模型中设置的。如果某个按钮需要变灰，展示器就应该将相应的开关变量设置成对应的布尔值。同样，菜单中每个菜单项所显示的值，也应该是一个个由展示器加载到视图模型中的字符串。应用程序在屏幕上显示的每个单选项、多选项以及文本框的名字也都如此，在视图模型中都有相应的字符串和布尔值可供展示器做对应的设置。即使屏幕上要加载的是一个数值表，展示器也应该负责把这些数值格式化成具有表格属性的字符串，以供视图使用。</p></blockquote><p>Anything and everything that appears on the screen, and that the application has some kind of control over, is represented in the View Model as a string, or a boolean, or an enum. Nothing is left for the View to do other than to load the data from the View Model into the screen. Thus the View is humble.</p><blockquote><p>总而言之，应用程序所能控制的、要在屏幕上显示的一切东西，都应该在视图模型中以字符串、布尔值或枚举值的形式存在。然后，视图部分除了加载视图模型所需要的值，不应该再做任何其他事情。因此，我们才能说视图是谦卑对象。</p></blockquote><h2 id="TESTING-AND-ARCHITECTURE-测试与架构"><a href="#TESTING-AND-ARCHITECTURE-测试与架构" class="headerlink" title="TESTING AND ARCHITECTURE 测试与架构"></a>TESTING AND ARCHITECTURE 测试与架构</h2><p>It has long been known that testability is an attribute of good architectures. The Humble Object pattern is a good example, because the separation of the behaviors into testable and non-testable parts often defines an architectural boundary. The Presenter&#x2F;View boundary is one of these boundaries, but there are many others.</p><blockquote><p>众所周知，强大的可测试性是一个架构的设计是否优秀的显著衡量标准之一。谦卑对象模式就是这方面的一个非常好的例子。我们将系统行为分割成可测试和不可测试两部分的过程常常就也定义了系统的架构边界。展示器与视图之间的边界只是多种架构边界中的一种，另外还有许多其他边界。</p></blockquote><h2 id="DATABASE-GATEWAYS-数据库网关"><a href="#DATABASE-GATEWAYS-数据库网关" class="headerlink" title="DATABASE GATEWAYS 数据库网关"></a>DATABASE GATEWAYS 数据库网关</h2><p>Between the use case interactors and the database are the database gateways.2 These gateways are polymorphic interfaces that contain methods for every create, read, update, or delete operation that can be performed by the application on the database. For example, if the application needs to know the last names of all the users who logged in yesterday, then the UserGateway interface will have a method named getLastNamesOfUsersWhoLoggedInAfter that takes a Date as its argument and returns a list of last names.</p><blockquote><p>对于用例交互（interactor）与数据库中间的组件，我们通常称之为数据库网关。这些数据库网关本身是一个多态接口，包含了应用程序在数据库上所要执行的创建、读取、更新、删除等所有操作。例如，如果应用程序需要知道所有昨天登录系统的用户姓，那么 UserGateway 接口就应该包含一个 getLastNamesOfUsersWhoLoggedlnAfter 方法，接收一个 Date 参数，并返回一个包含姓的列表。</p></blockquote><p>Recall that we do not allow SQL in the use cases layer; instead, we use gateway interfaces that have appropriate methods. Those gateways are implemented by classes in the database layer. That implementation is the humble object. It simply uses SQL, or whatever the interface to the database is, to access the data required by each of the methods. The interactors, in contrast, are not humble because they encapsulate application-specific business rules. Although they are not humble, those interactors are testable, because the gateways can be replaced with appropriate stubs and test-doubles.</p><blockquote><p>另外，我们之前说过，SQL 不应该出现在用例层的代码中，所以这部分的功能就需要通过网关接口来提供，而这些接口的实现则要由数据库层的类来负责。显然，这些实现也应该都属于谦卑对象，它们应该只利用 SQL 或其他数据库提供的接口来昉问所需要的数据。与之相反，交互器则不属于谦卑对象，因为它们封装的是特定应用场景下的业务逻辑。不过，交互器尽管不属于谦卑对象，却是可测试的，因为数据库网关通常可以被替换成对应的测试桩和测试替身类。</p></blockquote><h2 id="DATA-MAPPERS-数据映射器"><a href="#DATA-MAPPERS-数据映射器" class="headerlink" title="DATA MAPPERS 数据映射器"></a>DATA MAPPERS 数据映射器</h2><p>Going back to the topic of databases, in which layer do you think ORMs like Hibernate belong?</p><blockquote><p>让我们继续数据库方面的话题，现在我们来思考一下 Hibernate 这类的 ORM 框架应该属于系统架构中的哪一层呢？</p></blockquote><p>First, let’s get something straight: There is no such thing as an object relational mapper (ORM). The reason is simple: Objects are not data structures. At least, they are not data structures from their users’ point of view. The users of an object cannot see the data, since it is all private. Those users see only the public methods of that object. So, from the user’s point of view, an object is simply a set of operations.</p><blockquote><p>首先我们要弄清楚一件事：对象关系映射器（ORM）事实上是压根就不存在的。带来很简单，对象不是数据结构。至少从用户的角度来说，对象内部的数据应该都是私有的，不可见的，用户在通常情况下只能看到对象的公有函数。因此从用户角度来说，对象是一些操作的集合，而不是简单的数据结构体。</p></blockquote><p>A data structure, in contrast, is a set of public data variables that have no implied behavior. ORMs would be better named “data mappers,” because they load data into data structures from relational database tables.</p><blockquote><p>与之相反，数据结构体则是一组公开的数据变量其中不包含任何行为信息。所以 ORM 更应该被称为“数据映射器”，因为它们只是将数据从关系型数据库加载到了对应的数据结构中。</p></blockquote><p>Where should such ORM systems reside? In the database layer of course. Indeed, ORMs form another kind of Humble Object boundary between the gateway interfaces and the database.</p><blockquote><p>那么，这样的 ORM 系统应该属于系统架构中的哪一层呢？当然是数据库层。ORM 其实就是在数据库和数据库网关之间构建了另一种谦卑对象的边界。</p></blockquote><h2 id="SERVICE-LISTENERS-服务监听器"><a href="#SERVICE-LISTENERS-服务监听器" class="headerlink" title="SERVICE LISTENERS 服务监听器"></a>SERVICE LISTENERS 服务监听器</h2><p>What about services? If your application must communicate with other services, or if your application provides a set of services, will we find the Humble Object pattern creating a service boundary?</p><blockquote><p>如果我们的应用程序需要与其他服务进行某种交互，或者该应用本身要提供某一套服务，我们在相关服务的边界处也会看到谦卑对象模式吗？</p></blockquote><p>Of course! The application will load data into simple data structures and then pass those structures across the boundary to modules that properly format the data and send it to external services. On the input side, the service listeners will receive data from the service interface and format it into a simple data structure that can be used by the application. That data structure is then passed across the service boundary.</p><blockquote><p>答案是肯定的。我们的应用程序会将数据加载到简单的数据结构中，并将这些数据结构跨边界传输给那些能够将其格式化并传递其他外部服务的模块。在输入端，服务监听器会负责从服务接口中接收数据，并将其格式化成该应用程序易用的格式。总而言之，上述数据结构可以进行跨服务边界的传输。</p></blockquote><h2 id="CONCLUSION-本章小结-21"><a href="#CONCLUSION-本章小结-21" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>At each architectural boundary, we are likely to find the Humble Object pattern lurking somewhere nearby. The communication across that boundary will almost always involve some kind of simple data structure, and the boundary will frequently divide something that is hard to test from something that is easy to test. The use of this pattern at architectural boundaries vastly increases the testability of the entire system.</p><blockquote><p>在每个系统架构的边界处，都有可能发现谦卑对象模式的存在。因为跨边界的通信肯定需要用到某种简单的数据结构，而边界会自然而然地将系统分割成难以测试的部分与容易测试的部分，所以通过在系统的边界处运用谦卑对象模式，我们可以大幅地提高整个系统的可测试性。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap24-PARTIAL-BOUNDARIES-不完全边界"><a href="#Chap24-PARTIAL-BOUNDARIES-不完全边界" class="headerlink" title="Chap24. PARTIAL BOUNDARIES 不完全边界"></a>Chap24. PARTIAL BOUNDARIES 不完全边界</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN24.jpg"></p><p>Full-fledged architectural boundaries are expensive. They require reciprocal polymorphic Boundary interfaces, Input and Output data structures, and all of the dependency management necessary to isolate the two sides into independently compilable and deployable components. That takes a lot of work. It’s also a lot of work to maintain.</p><blockquote><p>构建完整的架构边界是一件很耗费成本的事。在这个过程中，需要为系统设计双向的多态边界接口，用于输入和输出的数据结构，以及所有相关的依赖关系管理，以便将系统分割成可独立编译与部署的组件。这里会涉及大量的前期工作以及大量的后期维护工作。</p></blockquote><p>In many situations, a good architect might judge that the expense of such a boundary is too high—but might still want to hold a place for such a boundary in case it is needed later.</p><blockquote><p>在很多情况下，一位优秀的架构师都会认为设计架构边界的成本太高了——但为了应对将来可能的需要，通常还是希望预留一个边界。</p></blockquote><p>This kind of anticipatory design is often frowned upon by many in the Agile community as a violation of YAGNI: “You Aren’t Going to Need It.” Architects, however, sometimes look at the problem and think, “Yeah, but I might.” In that case, they may implement a partial boundary.</p><blockquote><p>但这种预防性设计在敏捷社区里是饱受诟病的，因为它显然违背了 YAGNI 原则（”You Are’t Going to Need It”，意即“不要预测未来的需要”）。然而，架构师的工作本身就是要做这样的预见性设计，这时候，我们就需要引入不完全边界（partial boundary）的概念了。</p></blockquote><h2 id="SKIP-THE-LAST-STEP-省掉最后一步"><a href="#SKIP-THE-LAST-STEP-省掉最后一步" class="headerlink" title="SKIP THE LAST STEP 省掉最后一步"></a>SKIP THE LAST STEP 省掉最后一步</h2><p>One way to construct a partial boundary is to do all the work necessary to create independently compilable and deployable components, and then simply keep them together in the same component. The reciprocal interfaces are there, the input&#x2F;output data structures are there, and everything is all set up—but we compile and deploy all of them as a single component.</p><blockquote><p>构建不完全边界的一种方式就是在将系统分割成一系列可以独立编译、独立部署的组件之后，再把它们构建成一个组件。换句话说，在将系统中所有的接口、用于输入&#x2F;输出的数据格式等每一件事都设置好之后，仍选择将它们统一编译和部署为一个组件。</p></blockquote><p>Obviously, this kind of partial boundary requires the same amount of code and preparatory design work as a full boundary. However, it does not require the administration of multiple components. There’s no version number tracking or release management burden. That difference should not be taken lightly.</p><blockquote><p>显然，这种不完全边界所需要的代码量以及设计的工作量，和设计完整边界时是完全一样的。但它省去了多组件管理这部分的工作，这就等于省去了版本号管理和发布管理方面的工作——这其中的工作量其实可不小。</p></blockquote><p>This was the early strategy behind FitNesse. The web server component of FitNesse was designed to be separable from the wiki and testing part of FitNesse. The idea was that we might want to create other web-based applications by using that web component. At the same, we did not want users to have to download two components. Recall that one of our design goals was “download and go.” It was our intent that users would download one jar file and execute it without having to hunt for other jar files, work out version compatibilities, and so on.</p><blockquote><p>这也是 FitNesse 项目早期所采取的策略。我们在设计 Web 服务器之初就将它设计为一个可以独立于 wiki 和测试部分的组件。该设计背后的想法是我们未来可能需要使用该 Web 组件来构建其他应用程序。但是同时，我们又不想让用户下载两个组件。正如我们之前所说，该项目其中的一个设计目标是实现让用户下载即可运行。我们希望用户只需下载一个 jar 文件就立即可以执行，不需要再去寻找其他的 jar 文件，更不需要操心版本兼容性等问题。</p></blockquote><p>The story of FitNesse also points out one of the dangers of this approach. Over time, as it became clear that there would never be a need for a separate web component, the separation between the web component and the wiki component began to weaken. Dependencies started to cross the line in the wrong direction. Nowadays, it would be something of a chore to re-separate them.</p><blockquote><p>在这里，FitNcssc 项目的故事也可以作为一个反例来说明这种设计的危害性。随着时间的推移，我们慢慢发现，将 Web 组件独立的需求越来越少，Wiki 组件与 Web 组件的隔离也弱化了。到如今，如果真想要再分离 Web 组件的话，会需要不少工作量。</p></blockquote><h2 id="ONE-DIMENSIONAL-BOUNDARIES-单向边界"><a href="#ONE-DIMENSIONAL-BOUNDARIES-单向边界" class="headerlink" title="ONE-DIMENSIONAL BOUNDARIES 单向边界"></a>ONE-DIMENSIONAL BOUNDARIES 单向边界</h2><p>The full-fledged architectural boundary uses reciprocal boundary interfaces to maintain isolation in both directions. Maintaining separation in both directions is expensive both in initial setup and in ongoing maintenance.</p><blockquote><p>在设计一套完整的系统架构边界时，往往需要用反向接口来维护边界两侧组件的隔离性。而且，维护这种双向的隔离性，通常不会是一次性的工作，它需要我们持续地长期投入资源维护下去。</p></blockquote><p>A simpler structure that serves to hold the place for later extension to a full-fledged boundary is shown in Figure 24.1. It exemplifies the traditional Strategy pattern. A ServiceBoundary interface is used by clients and implemented by ServiceImpl classes.</p><blockquote><p>在图 24.1 中，你会看到一个临时占位的，将来可被替换成完整架构边界的更简单的结构。这个结构采用了传统的策略模式（strategy pattern）。如你所见，其 Client 使用的是一个由 ServiceImpl 类实现的 ServiceBoundary 接口。</p></blockquote><p><Figures figure="24-1">The Strategy pattern</Figures></p><p>It should be clear that this sets the stage for a future architectural boundary. The necessary dependency inversion is in place in an attempt to isolate the Client from the ServiceImpl. It should also be clear that the separation can degrade pretty rapidly, as shown by the nasty dotted arrow in the diagram. Without reciprocal interfaces, nothing prevents this kind of backchannel other than the diligence and discipline of the developers and architects.</p><blockquote><p>很明显，上述设计为未来构建完整的系统架构边界打下了坚实基础。为了未来将 Client 与 ServiceImpl 隔离，必要的依赖反转已经做完了。同时，我们也能清楚地看到，图中的虚线箭头代表了未来有可能很快就会出问题的隔离问题。由于没有采用双向反向接口，这部分就只能依赖开发者和架构师的自律性来保证组件持久隔离了。</p></blockquote><h2 id="FACADES-门户模式"><a href="#FACADES-门户模式" class="headerlink" title="FACADES 门户模式"></a>FACADES 门户模式</h2><p>An even simpler boundary is the Facade pattern, illustrated in Figure 24.2. In this case, even the dependency inversion is sacrificed. The boundary is simply defined by the Facade class, which lists all the services as methods, and deploys the service calls to classes that the client is not supposed to access.</p><blockquote><p>下面，我们再来看一个更简单的架构边界设计：采用门户模式（facade pattern），其架构如图 24.2 所示。在这种模式下，我们连依赖反转的工作都可以省了。这里的边界将只能由 Facade 类来定义，这个类的背后是一份包含了所有服务函数的列表，它会负责将 Client 的调用传递给对 client 不可见的服务函数。</p></blockquote><p><Figures figure="24-2">The Facade pattern</Figures></p><p>Note, however, that the Client has a transitive dependency on all those service classes. In static languages, a change to the source code in one of the Service classes will force the Client to recompile. Also, you can imagine how easy backchannels are to create with this structure.</p><blockquote><p>但需要注意的是，在该设计中 Client 会传递性地依赖于所有的 Service 类。在静态类型语言中，这就意味着对 Service 类的源码所做的任何修改都会导致 Client 的重新编译。另外，我们应该也能想象得到为这种结构建立反向通道是多容易的事。</p></blockquote><h2 id="CONCLUSION-本章小结-22"><a href="#CONCLUSION-本章小结-22" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>We’ve seen three simple ways to partially implement an architectural boundary. There are, of course, many others. These three strategies are simply offered as examples.</p><blockquote><p>在本章，我们介绍了三种不完全地实现架构边界的简单方法。当然，这类边界还有许多种其他实现方式，本章所介绍的这三种策略只为示范之用。</p></blockquote><p>Each of these approaches has its own set of costs and benefits. Each is appropriate, in certain contexts, as a placeholder for an eventual full-fledged boundary. Each can also be degraded if that boundary never materializes.</p><blockquote><p>每种实现方式都有相应的成本和收益。每种方式都有自己所适用的场景，它们可以被用来充当最终完整架构边界的临时替代品。同时，瞅这些边界最终被证明是没有必要存在的，那么也可以被自然降解。</p></blockquote><p>It is one of the functions of an architect to decide where an architectural boundary might one day exist, and whether to fully or partially implement that boundary.</p><blockquote><p>架构师的职责之一就是预判未来哪里有可能会需要设置架构边界，并决定应该以完全形式还是不完全形式来实现它们。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap25-LAYERS-AND-BOUNDARIES-层次与边界"><a href="#Chap25-LAYERS-AND-BOUNDARIES-层次与边界" class="headerlink" title="Chap25. LAYERS AND BOUNDARIES 层次与边界"></a>Chap25. LAYERS AND BOUNDARIES 层次与边界</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN25.jpg"></p><p>It is easy to think of systems as being composed of three components: UI, business rules, and database. For some simple systems, this is sufficient. For most systems, though, the number of components is larger than that.</p><blockquote><p>人们通常习惯于将系统分成三个组件：UI、业务逻辑和数据库。对于一些简单系统来说，的确可以这样，但稍复杂一些系统的组件就远不止三个了。</p></blockquote><p>Consider, for example, a simple computer game. It is easy to imagine the three components. The UI handles all messages from the player to the game rules. The game rules store the state of the game in some kind of persistent data structure. But is that all there is?</p><blockquote><p>以一个简单的计算机游戏为例。粗略看来，它好像也很符合三个组件的架构设定。首先，让 UI 负责接收用户输入的数据，并将数据传递给游戏的业务逻辑。然后，游戏的业务逻辑会将游戏状态保存在某种持久化数据结构中。但是，仅仅是这样而已吗？</p></blockquote><h2 id="HUNT-THE-WUMPUS-基于文本的冒险游戏：Hunt-The-Wumpus"><a href="#HUNT-THE-WUMPUS-基于文本的冒险游戏：Hunt-The-Wumpus" class="headerlink" title="HUNT THE WUMPUS 基于文本的冒险游戏：Hunt The Wumpus"></a>HUNT THE WUMPUS 基于文本的冒险游戏：Hunt The Wumpus</h2><p>Let’s put some flesh on these bones. Let’s assume that the game is the venerable Hunt the Wumpus adventure game from 1972. This text-based game uses very simple commands like GO EAST and SHOOT WEST. The player enters a command, and the computer responds with what the player sees, smells, hears, and experiences. The player is hunting for a Wumpus in a system of caverns, and must avoid traps, pits, and other dangers lying in wait. If you are interested, the rules of the game are easy to find on the web.</p><blockquote><p>现在让我们往上面的设想中加入一些细节。假设这个游戏是 1972 年风靡一时的基于文本的冒险游戏：Hunt the Wumpus 这个游戏的操作是通过一些像 GO EAST 和 SHOOT WEST 这样的简单文字命令来完成的。玩家在输入命令之后，计算机就会返回玩家角色所看到的、闻到的、听到的或体会到的事情。在这个游戏中，玩家会在一系列洞穴中追捕 Wumpus。玩家必须避开陷阱、陷坑以及其他一系列危险。如果有兴趣，在网上很容易找到该游戏的规则说明。</p></blockquote><p>Let’s assume that we’ll keep the text-based UI, but decouple it from the game rules so that our version can use different languages in different markets. The game rules will communicate with the UI component using a language-independent API, and the UI will translate the API into the appropriate human language.</p><blockquote><p>现在，假设我们决定保留这种基于文本的 UI，但是需要将 UI 与游戏业务逻辑之间的耦合解开，以便我们的游戏版本可以在不同地区使用不同的语言。也就是说，游戏的业务逻辑与 UI 之间应该用一种与自然语言无关的 API 来进行通信，而由 UI 负责将 API 传递进来的信息转换成合适的自然语言。</p></blockquote><p>If the source code dependencies are properly managed, as shown in Figure 25.1, then any number of UI components can reuse the same game rules. The game rules do not know, nor do they care, which human language is being used.</p><blockquote><p>如果我们能管理好源码中的依赖关系，就应该像图 25.1 所展示的那样，多个 UI 组件复用同一套游戏业务逻辑。而游戏的业务逻辑组件不知道，也不必知道 UI 正在使用哪一种自然语言。</p></blockquote><p><Figures figure="25-1">Any number of UI components can reuse the game rules</Figures></p><p>Let’s also assume that the state of the game is maintained on some persistent store—perhaps in flash, or perhaps in the cloud, or maybe just in RAM. In any of those cases, we don’t want the game rules to know the details. So, again, we’ll create an API that the game rules can use to communicate with the data storage component.</p><blockquote><p>同时，假设玩家在游戏中的状态会被保存在某种持久化存储介质中——有可能闪存，也有可能是某种云端存储，或只是本机内存。无论怎样，我们都并不希望游戏引擎了解这些细节。所以，我们仍然需要创建一个 API 来负责游戏的业务逻辑组件与数据存储组件之间的通信。</p></blockquote><p>We don’t want the game rules to know anything about the different kinds of data storage, so the dependencies have to be properly directed following the Dependency Rule, as shown in Figure 25.2.</p><blockquote><p>由于我们不会希望让游戏的业务逻辑依赖于不同种类的数据存储，所以这里的设计也要合理地遵守依赖关系原则，这样的话，该游戏的结构应如图 25.2 所示。</p></blockquote><p><Figures figure="25-2">Following the Dependency Rule</Figures></p><h2 id="CLEAN-ARCHITECTURE-可否采用整洁架构"><a href="#CLEAN-ARCHITECTURE-可否采用整洁架构" class="headerlink" title="CLEAN ARCHITECTURE? 可否采用整洁架构"></a>CLEAN ARCHITECTURE? 可否采用整洁架构</h2><p>It should be clear that we could easily apply the clean architecture approach in this context,1 with all the use cases, boundaries, entities, and corresponding data structures. But have we really found all the significant architectural boundaries?</p><blockquote><p>很显然，这里具备了采用整洁架构方法所需要的—切，包括用例、业务实体以及对应的数据结构都有了，但我们是否已经找到了所有相应的架构边界呢？</p></blockquote><p>For example, language is not the only axis of change for the UI. We also might want to vary the mechanism by which we communicate the text. For example, we might want to use a normal shell window, or text messages, or a chat application. There are many different possibilities.</p><blockquote><p>例如，语言并不是 UI 变更的唯一方向。我们可能还会需要变更文字输入&#x2F;输出的方式。例如我们的输入&#x2F;输出可以采用命令行窗口，或者用短信息，或者采用某种聊天程序。这里的可能性有很多。</p></blockquote><p>That means that there is a potential architectural boundary defined by this axis of change. Perhaps we should construct an API that crosses that boundary and isolates the language from the communications mechanism; that idea is illustrated in Figure 25.3.</p><blockquote><p>这就意味着这类变更应该有一个对应的架构边界。也许我们需要构造一个 API，以便将语言部分与通信部分隔开，这样一来，该设计的结构应如图 25.3 所示。</p></blockquote><p><Figures figure="25-3">The revised diagram</Figures></p><p>The diagram in Figure 25.3 has gotten a little complicated, but should contain no surprises. The dashed outlines indicate abstract components that define an API that is implemented by the components above or below them. For example, the Language API is implemented by English and Spanish.</p><blockquote><p>在图 25.3 中可以看到，现在系统的结构已经变得有点复杂了。在该图中，虚线框代表的是抽象组件，它们所定义的 API 通常要交由其上下层的组件来实现。例如 Language 部分的 API 是由 English 和 Spanish 这两个组件来实现的。</p></blockquote><p>GameRules communicates with Language through an API that GameRules defines and Language implements. Language communicates with TextDelivery using an API that Language defines but TextDelivery implements. The API is defined and owned by the user, rather than by the implementer.</p><blockquote><p>我们也可以看到 GameRules 与 Language 这两个组件之间的交互是通过一个由 GameRules 定义，并由 Language 实现的 API 来完成的。同样的，Language 与 TextDelievery 之间的交互也是通过由 Language 定义，并由 TextDelievery 实现的 API 来完成。这些 API 的定义和维护都是由使用方来负责的，而非实现方。</p></blockquote><p>If we were to look inside GameRules, we would find polymorphic Boundary interfaces used by the code inside GameRules and implemented by the code inside the Language component. We would also find polymorphic Boundary interfaces used by Language and implemented by code inside GameRules.</p><blockquote><p>如果我们进一步查看 GameRules 内部，就会发现 GameRules 组件的代码中使用的 Boundary 多态接口是由 Language 组件来实现的；同时还会发现 Language 组件使用的 Boundary 多态接口由 GameRules 代码实现。</p></blockquote><p>If we were to look inside of Language, we would find the same thing: Polymorphic Boundary interfaces implemented by the code inside TextDelivery, and polymorphic Boundary interfaces used by TextDelivery and implemented by Language.</p><blockquote><p>如果再探究一下 Language 组件，我们也会看到类似的情况：它的 Boundary 多态接口是在 TextDelievery 组件的代码中实现的，而 TextDelievery 使用的 Boundary 多态接口则由 Language 来实现。</p></blockquote><p>In each case, the API defined by those Boundary interfaces is owned by the upstream component.</p><blockquote><p>在所有这些场景中，由 Boundary 接口所定义的 API 都是由其使用者的上一层组件负责维护的。</p></blockquote><p>The variations, such as English, SMS, and CloudData, are provided by polymorphic interfaces defined in the abstract API component, and implemented by the concrete components that serve them. For example, we would expect polymorphic interfaces defined in Language to be implemented by English and Spanish.</p><blockquote><p>不同的具体实现类，例如 English、SMS、CloudData 都实现了由抽象的 API 组件所定义的多态接口。例如，Language 组件中定义的多态接口是由 English 和 Spanish 这两个组件来定义的。</p></blockquote><p>We can simplify this diagram by eliminating all the variations and focusing on just the API components. Figure 25.4 shows this diagram.</p><blockquote><p>我们可以去掉所有的具体实现类，只保留 API 组件来进一步简化上面这张设计图，其简化的结果如图 25.4 所示。</p></blockquote><p><Figures figure="25-4">Simplified diagram</Figures></p><p>Notice that the diagram is oriented in Figure 25.4 so that all the arrows point up. This puts GameRules at the top. This orientation makes sense because GameRules is the component that contains the highest-level policies.</p><blockquote><p>请注意图 25.4 中的朝向设计，所有的箭头都是朝上的。这样 GameRules 组件就被放在顶层的位置。这种朝向设计很好地反映了 GameRules 作为最高层策略组件的事买。</p></blockquote><p>Consider the direction of information flow. All input comes from the user through the TextDelivery component at the bottom left. That information rises through the Language component, getting translated into commands to GameRules. GameRules processes the user input and sends appropriate data down to DataStorage at the lower right.</p><blockquote><p>下面，我们来考虑一些信息流的方向。首先，所有来自用户的信息都会通过左下角的 TextDelievery 组件传入。当这些信息被上传到 Language 组件时，就会转换为具体的命令输入给 GameRules 组件。然后，GameRules 组件会负责处理用户的输入，并将数据发送给右下角的 Datastorage 组件。</p></blockquote><p>GameRules then sends output back down to Language, which translates the API back to the appropriate language and then delivers that language to the user through TextDelivery.</p><blockquote><p>接下来，GameRules 会将输出向下传递到 Language 组件，将其转成合适的语言并通过 TextDJievery 将该语言传递给用户。</p></blockquote><p>This organization effectively divides the flow of data into two streams.2 The stream on the left is concerned with communicating with the user, and the stream on the right is concerned with data persistence. Both streams meet at the top3 at GameRules, which is the ultimate processor of the data that goes through both streams.</p><blockquote><p>这种设计方式将数据流分成两路。左侧的数据流关注如何与用户通信，而右侧的数据流关注的是数据持久化。两条数据流在顶部的 GameRules 汇聚。GameRules 组件是所有数据的最终处理者。</p></blockquote><h2 id="CROSSING-THE-STREAMS-交汇数据流"><a href="#CROSSING-THE-STREAMS-交汇数据流" class="headerlink" title="CROSSING THE STREAMS 交汇数据流"></a>CROSSING THE STREAMS 交汇数据流</h2><p>Are there always two data streams as in this example? No, not at all. Imagine that we would like to play Hunt the Wumpus on the net with multiple players. In this case, we would need a network component, like that shown in Figure 25.5. This organization divides the data flow into three streams, all controlled by the GameRules.</p><blockquote><p>那么，这个例子中是否永远只有这两条数据流呢？当然不是。假设我们现在要在网络上与多个其他玩家一起玩这个游戏，就会需要一个网络组件，如图 25.5 所示。这样一来，我们有了三条数据流，它们都由 GameRules 组件所控制。</p></blockquote><p><Figures figure="25-5">Adding a network component</Figures></p><p>So, as systems become more complex, the component structure may split into many such streams.</p><blockquote><p>由此可见，随着系统的复杂化，组件在架构中自然会分裂出多条数据流来。</p></blockquote><h2 id="SPLITTING-THE-STREAMS-数据流的分割"><a href="#SPLITTING-THE-STREAMS-数据流的分割" class="headerlink" title="SPLITTING THE STREAMS 数据流的分割"></a>SPLITTING THE STREAMS 数据流的分割</h2><p>At this point you may be thinking that all the streams eventually meet at the top in a single component. If only life were so simple! The reality, of course, is much more complex.</p><blockquote><p>此时你可能会认为所有的数据流最终都会汇聚到一个组件上。生活要是果真如此简单，那就真是太好了！现实情况往往不如人所愿啊。</p></blockquote><p>Consider the GameRules component for Hunt the Wumpus. Part of the game rules deal with the mechanics of the map. They know how the caverns are connected, and which objects are located in each cavern. They know how to move the player from cavern to cavern, and how to determine the events that the player must deal with.</p><blockquote><p>我们可以再来看一下 Hunt The Wumpu 这个游戏的 GameRules 组件。游戏的部分业务逻辑处理的是玩家在地图中的行走。这一部分需要知道游戏中的洞穴如何相连，每个洞穴中有什么物体存在，还要知道如何将玩家从一个洞穴移到另一个洞穴，以及如何触发各种需要玩家处理的事件。</p></blockquote><p>But there is another set of policies at an even higher level—policies that know the health of the player, and the cost or benefit of a particular event. These policies could cause the player to gradually lose health, or to gain health by discovering food. The lower-level mechanics policy would declare events to this higher-level policy, such as FoundFood or FellInPit. The higher-level policy would then manage the state of the player (as shown in Figure 25.6). Eventually that policy would decide whether the player wins or loses.</p><blockquote><p>但是，游戏中还有一组更高层次的策略——这些策略负责了解玩家的血量，以及每个事件的后果和影响。这些策略既可以让玩家逐渐损失血量，也可能由于发现事物而增加血量。总而言之，游戏的低层策略会负责向高层策略传递事件，例如 FoundFood 和 FelllnPito 而高层组件则要管理玩家状态（如图 25.6 所示），最终该策略将会决定玩家在游戏中的输赢。</p></blockquote><p><Figures figure="25-6">The higher-level policy manages the player</Figures></p><p>Is this an architectural boundary? Do we need an API that separates MoveManagement from PlayerManagement? Well, let’s make this a bit more interesting and add micro-services.</p><blockquote><p>这些究竟是否属于架构边界呢？是否需要设计一个 API 来分割 MoveManagement 和 PlayerManagement 呢？在回答这些问题之前，让我们把问题弄得更有意思一点，再往里面加上微服务吧！</p></blockquote><p>Let’s assume that we’ve got a massive multiplayer version of Hunt the Wumpus. MoveManagement is handled locally within the player’s computer, but PlayerManagement is handled by a server. PlayerManagement offers a micro-service API to all the connected MoveManagement components.</p><blockquote><p>假设我们现在面对的是一个可以面向海量玩家的新版 Hurit The Wumpus 游戏。它的 MoveManagmenet 组合是由玩家的本地计算机来处理的 。而 PlayerManagement 组件则由服务端来处理。但 PlayerManagement 组件会为所有连接上它的 MoveManagement 组件提供一个微服务的 API。</p></blockquote><p>The diagram in Figure 25.7 depicts this scenario in a somewhat abbreviated fashion. The Network elements are a bit more complex than depicted—but you can probably still get the idea. A full-fledged architectural boundary exists between MoveManagement and PlayerManagement in this case.</p><blockquote><p>在图 25.7 中，我们为该游戏绘制了一个简化版的设计图。现实中的 Network 组件通常会比图中的更复杂一些 但这里的已经足够说明情况了。在图中，可以看到 MoveMangament PlayerManagment 之间存在一个完整的系统架构边界。</p></blockquote><p><Figures figure="25-7">Adding a micro-service API</Figures></p><h2 id="CONCLUSION-本章小结-23"><a href="#CONCLUSION-本章小结-23" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>What does all this mean? Why have I taken this absurdly simply program, which could be implemented in 200 lines of Kornshell, and extrapolated it out with all these crazy architectural boundaries?</p><blockquote><p>本章究竟想讨论什么呢？为什么要将一个极为简单的、在 Komshell 中只需 200 行代码就能写完的小程序扩展成具有这些系统架构边界的复杂程序？</p></blockquote><p>This example is intended to show that architectural boundaries exist everywhere. We, as architects, must be careful to recognize when they are needed. We also have to be aware that such boundaries, when fully implemented, are expensive. At the same time, we have to recognize that when such boundaries are ignored, they are very expensive to add in later—even in the presence of comprehensive test-suites and refactoring discipline.</p><blockquote><p>我们设计这个例子的目的就是为了证明架构边界可以存在于任何地方。作为架构师，我们必须要小心审视究竟在什么地方才需要设计架构边界。另外，我们还必须弄清楚完全实现这些边界将会带来多大的成本。同时，我们也必须要了解如果事先忽略了这些边界，后续再添加会有多么困难——哪怕有覆盖广泛的测试，严加小心的重构也于事无补。</p></blockquote><p>So what do we do, we architects? The answer is dissatisfying. On the one hand, some very smart people have told us, over the years, that we should not anticipate the need for abstraction. This is the philosophy of YAGNI: “You aren’t going to need it.” There is wisdom in this message, since over-engineering is often much worse than under-engineering. On the other hand, when you discover that you truly do need an architectural boundary where none exists, the costs and risks can be very high to add such a boundary.</p><blockquote><p>所以作为架构师，我们应该怎么办？这个问题恐怕没有答案。一方面，就像一些很聪明的人多年来一直告诉我们的那样，不应该将未来的需求抽象化。这就是 YAGNI 原则：“You aren’t going to need it”，臆想中的需求事实上住往是不存在的。这是一句饱含智慧的建议，因为过度的工程设计往往比工程设计不足还要糟糕。但另一方面，如果我们发现自己在某个位置确实需要设置架构边界，却又没有事先准备的时候，再添加边界所需要的成本和风险往往是很高的。</p></blockquote><p>So there you have it. O Software Architect, you must see the future. You must guess—intelligently. You must weigh the costs and determine where the architectural boundaries lie, and which should be fully implemented, and which should be partially implemented, and which should be ignored.</p><blockquote><p>现实就是这样。作为软件架构师，我们必须有一点未卜先知的能力。有时候要依靠猜测——当然还要用点脑子。软件架构师必须仔细权衡成本，决定哪里需要设计架构边界，以及这些地方需要的是完整的边界，还是不完全的边界，还是可以忽略的边界。</p></blockquote><p>But this is not a one-time decision. You don’t simply decide at the start of a project which boundaries to implement and which to ignore. Rather, you watch. You pay attention as the system evolves. You note where boundaries may be required, and then carefully watch for the first inkling of friction because those boundaries don’t exist.</p><blockquote><p>而且，这不是一次性的决定。我们不能在项目开始时就决定好哪里需要边界，哪里不需要。相反，架构师必须持续观察系统的演进，时刻注意哪里可能需要设计边界，然后仔细观察这些地方会由于不存在边界而出现哪些问题。</p></blockquote><p>At that point, you weigh the costs of implementing those boundaries versus the cost of ignoring them—and you review that decision frequently. Your goal is to implement the boundaries right at the inflection point where the cost of implementing becomes less than the cost of ignoring.</p><blockquote><p>当出现问题时，我们还需要权衡一下实现这个边界的成本，并拿它与不实现这个边界的成本对比——这种对比经常需要反复地进行。我们的目标是找到设置边界的优势超过其成本的拐点，那就是实现该边界的最佳时机。</p></blockquote><p>It takes a watchful eye.</p><blockquote><p>持之以恒，一刻也不能放松。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap26-THE-MAIN-COMPONENT-Main-组件"><a href="#Chap26-THE-MAIN-COMPONENT-Main-组件" class="headerlink" title="Chap26. THE MAIN COMPONENT Main 组件"></a>Chap26. THE MAIN COMPONENT Main 组件</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN26.jpg"></p><p>In every system, there is at least one component that creates, coordinates, and oversees the others. I call this component Main.</p><blockquote><p>在所有的系统中，都至少要有一个组件来负责创建、协调、监督其他组件的运转。我们将其称为 Main 组件。</p></blockquote><h2 id="THE-ULTIMATE-DETAIL-最细节化的部分"><a href="#THE-ULTIMATE-DETAIL-最细节化的部分" class="headerlink" title="THE ULTIMATE DETAIL 最细节化的部分"></a>THE ULTIMATE DETAIL 最细节化的部分</h2><p>The Main component is the ultimate detail—the lowest-level policy. It is the initial entry point of the system. Nothing, other than the operating system, depends on it. Its job is to create all the Factories, Strategies, and other global facilities, and then hand control over to the high-level abstract portions of the system.</p><blockquote><p>Main 组件是系统中最细节化的部分——也就是底层的策略，它是整个系统的初始点。在整个系统中，除了操作系统不会再有其他组件依赖于它了。Main 组件的任务是创建所有的工厂类、策略类以及其他的全局设施，并最终将系统的控制权转交给最高抽象层的代码来处理。</p></blockquote><p>It is in this Main component that dependencies should be injected by a Dependency Injection framework. Once they are injected into Main, Main should distribute those dependencies normally, without using the framework.</p><blockquote><p>Main 组件中的依赖关系通常应该由依赖注入框架来注入。在该框架将依赖关系注入到 Main 组件之后，Main 组件就应该可以在不依赖于该框架的情况下自行分配这些依赖关系了。</p></blockquote><p>Think of Main as the dirtiest of all the dirty components.</p><blockquote><p>请记住，Main 组件是整个系统中细节信息最多的组件。</p></blockquote><p>Consider the following Main component from a recent version of Hunt the Wumpus. Notice how it loads up all the strings that we don’t want the main body of the code to know about.</p><blockquote><p>下面，我们来看一下最新版 Hunt the Wumpus 游戏的 Main 组件。请注意这里加载字符串的方法，这些字符串全都是我们不想让游戏主体代码了解的内容。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">implements</span> <span class="title class_">HtwMessageReceiver</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> HuntTheWumpus game;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">hitPoints</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; caverns = <span class="keyword">new</span>   <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] environments = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">    <span class="string">&quot;bright&quot;</span>,</span><br><span class="line">    <span class="string">&quot;humid&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dry&quot;</span>,</span><br><span class="line">    <span class="string">&quot;creepy&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ugly&quot;</span>,</span><br><span class="line">    <span class="string">&quot;foggy&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hot&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cold&quot;</span>,</span><br><span class="line">    <span class="string">&quot;drafty&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dreadful&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] shapes = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;</span><br><span class="line">    <span class="string">&quot;round&quot;</span>,</span><br><span class="line">    <span class="string">&quot;square&quot;</span>,</span><br><span class="line">    <span class="string">&quot;oval&quot;</span>,</span><br><span class="line">    <span class="string">&quot;irregular&quot;</span>,</span><br><span class="line">    <span class="string">&quot;long&quot;</span>,</span><br><span class="line">    <span class="string">&quot;craggy&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rough&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tall&quot;</span>,</span><br><span class="line">    <span class="string">&quot;narrow&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] cavernTypes = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;</span><br><span class="line">    <span class="string">&quot;cavern&quot;</span>,</span><br><span class="line">    <span class="string">&quot;room&quot;</span>,</span><br><span class="line">    <span class="string">&quot;chamber&quot;</span>,</span><br><span class="line">    <span class="string">&quot;catacomb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;crevasse&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cell&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tunnel&quot;</span>,</span><br><span class="line">    <span class="string">&quot;passageway&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hall&quot;</span>,</span><br><span class="line">    <span class="string">&quot;expanse&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] adornments = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;</span><br><span class="line">   <span class="string">&quot;smelling of sulfur&quot;</span>,</span><br><span class="line">    <span class="string">&quot;with engravings on the walls&quot;</span>,</span><br><span class="line">    <span class="string">&quot;with a bumpy floor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;littered with garbage&quot;</span>,</span><br><span class="line">    <span class="string">&quot;spattered with guano&quot;</span>,</span><br><span class="line">    <span class="string">&quot;with piles of Wumpus droppings&quot;</span>,</span><br><span class="line">    <span class="string">&quot;with bones scattered around&quot;</span>,</span><br><span class="line">    <span class="string">&quot;with a corpse on the floor&quot;</span>,</span><br><span class="line">    <span class="string">&quot;that seems to vibrate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;that feels stuffy&quot;</span>,</span><br><span class="line">    <span class="string">&quot;that fills you with dread&quot;</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>Now here’s the main function. Notice how it uses the HtwFactory to create the game. It passes in the name of the class, htw.game.HuntTheWumpusFacade, because that class is even dirtier than Main. This prevents changes in that class from causing Main to recompile&#x2F;redeploy.</p><blockquote><p>接下来是 main 函数。请注意这里是如何使用 HtwFactory 来构建这个游戏的。我们可以看到这里传入了 一个名为 <code>htw.game.HuntTheWumpusFacade</code> 的类。由于这个类中的细节信息比 Main 组件还多，变更也更频繁，因此这样做可以避免这个类的变更导致 Main 组件的重新编译和重新部署。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">   game = HtwFactory.makeGame(<span class="string">&quot;htw.game.HuntTheWumpusFacade&quot;</span>,</span><br><span class="line">                                 <span class="keyword">new</span> <span class="title class_">Main</span>());</span><br><span class="line">   createMap();</span><br><span class="line">   <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span></span><br><span class="line">     <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">   game.makeRestCommand().execute();</span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">     System.out.println(game.getPlayerCavern());</span><br><span class="line">     System.out.println(<span class="string">&quot;Health: &quot;</span> + hitPoints + <span class="string">&quot; arrows: &quot;</span> +</span><br><span class="line">                           game.getQuiver());</span><br><span class="line">     HuntTheWumpus.<span class="type">Command</span> <span class="variable">c</span> <span class="operator">=</span> game.makeRestCommand();</span><br><span class="line">      System.out.println(<span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">      <span class="keyword">if</span> (command.equalsIgnoreCase(<span class="string">&quot;e&quot;</span>))</span><br><span class="line">        c = game.makeMoveCommand(EAST);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (command.equalsIgnoreCase(<span class="string">&quot;w&quot;</span>))</span><br><span class="line">        c = game.makeMoveCommand(WEST);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (command.equalsIgnoreCase(<span class="string">&quot;n&quot;</span>))</span><br><span class="line">        c = game.makeMoveCommand(NORTH);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (command.equalsIgnoreCase(<span class="string">&quot;s&quot;</span>))</span><br><span class="line">        c = game.makeMoveCommand(SOUTH);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (command.equalsIgnoreCase(<span class="string">&quot;r&quot;</span>))</span><br><span class="line">        c = game.makeRestCommand();</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (command.equalsIgnoreCase(<span class="string">&quot;sw&quot;</span>))</span><br><span class="line">        c = game.makeShootCommand(WEST);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (command.equalsIgnoreCase(<span class="string">&quot;se&quot;</span>))</span><br><span class="line">        c = game.makeShootCommand(EAST);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (command.equalsIgnoreCase(<span class="string">&quot;sn&quot;</span>))</span><br><span class="line">        c = game.makeShootCommand(NORTH);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (command.equalsIgnoreCase(<span class="string">&quot;ss&quot;</span>))</span><br><span class="line">        c = game.makeShootCommand(SOUTH);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (command.equalsIgnoreCase(<span class="string">&quot;q&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      c.execute();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Notice also that main creates the input stream and contains the main loop of the game, interpreting the simple input commands, but then defers all processing to other, higher-level components.</p><blockquote><p>你还应该注意到 main 函数中创建了输入数据流，并纳入了游戏的主循环。主循环将负责处理简单的输入指令，但它会将具体的处理过程交给其他更高层次的组件来处理。</p></blockquote><p>Finally, notice that main creates the map.</p><blockquote><p>最后，Main 组件还要负责生成整个游戏的地图。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createMap</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">int</span> <span class="variable">nCaverns</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * <span class="number">30.0</span> + <span class="number">10.0</span>);</span><br><span class="line">   <span class="keyword">while</span> (nCaverns-- &gt; <span class="number">0</span>)</span><br><span class="line">     caverns.add(makeName());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String cavern : caverns) &#123;</span><br><span class="line">      maybeConnectCavern(cavern, NORTH);</span><br><span class="line">      maybeConnectCavern(cavern, SOUTH);</span><br><span class="line">      maybeConnectCavern(cavern, EAST);</span><br><span class="line">      maybeConnectCavern(cavern, WEST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">playerCavern</span> <span class="operator">=</span> anyCavern();</span><br><span class="line">    game.setPlayerCavern(playerCavern);</span><br><span class="line">    game.setWumpusCavern(anyOther(playerCavern));</span><br><span class="line">    game.addBatCavern(anyOther(playerCavern));</span><br><span class="line">    game.addBatCavern(anyOther(playerCavern));</span><br><span class="line">    game.addBatCavern(anyOther(playerCavern));</span><br><span class="line"></span><br><span class="line">    game.addPitCavern(anyOther(playerCavern));</span><br><span class="line">    game.addPitCavern(anyOther(playerCavern));</span><br><span class="line">    game.addPitCavern(anyOther(playerCavern));</span><br><span class="line"></span><br><span class="line">    game.setQuiver(<span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// much code removed…</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The point is that Main is a dirty low-level module in the outermost circle of the clean architecture. It loads everything up for the high level system, and then hands control over to it.</p><blockquote><p>我们在这里的重点是要说明 Main 组件是整个系统中的一个底层模块，它处于整洁架构的最外圈，主要负责为系统加载所有必要的信息，然后再将控制权转交回系统的高层组件。</p></blockquote><h2 id="CONCLUSION-本章小结-24"><a href="#CONCLUSION-本章小结-24" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>Think of Main as a plugin to the application—a plugin that sets up the initial conditions and configurations, gathers all the outside resources, and then hands control over to the high-level policy of the application. Since it is a plugin, it is possible to have many Main components, one for each configuration of your application.</p><blockquote><p>Main 组件也可以被视为应用程序的一个插件——这个插件负责设置起始状态、配置信息、加载外部资源，最后将控制权转交给应用程序的其他高层组件。另外，由于 Main 组件能以插件形式存在于系统中，因此我们可以为一个系统设计多个 Main 组件，让它们各自对应于不同的配置。</p></blockquote><p>For example, you could have a Main plugin for Dev, another for Test, and yet another for Production. You could also have a Main plugin for each country you deploy to, or each jurisdiction, or each customer.</p><blockquote><p>例如，我们既可以设计专门针对开发环境的 Main 组件，也可以设计专门针对测试的或者生产环境的 Main 组件。除此之外，我们还可以针对要部署的国家、地区甚至客户设计不同的 Main 组件。</p></blockquote><p>When you think about Main as a plugin component, sitting behind an architectural boundary, the problem of configuration becomes a lot easier to solve.</p><blockquote><p>当我们将 Main 组件视为一种插件时，用架构边界将它与系统其他部分隔离开这件事，在系统的配置上是不是就变得更容易了呢？</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap27-SERVICES-GREAT-AND-SMALL-服务：宏观与微观"><a href="#Chap27-SERVICES-GREAT-AND-SMALL-服务：宏观与微观" class="headerlink" title="Chap27. SERVICES: GREAT AND SMALL 服务：宏观与微观"></a>Chap27. SERVICES: GREAT AND SMALL 服务：宏观与微观</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN27.jpg"></p><p>Service-oriented “architectures” and micro-service “architectures” have become very popular of late. The reasons for their current popularity include the following:</p><blockquote><p>面向服务的“架构”以及微服务“架构”近年来非常流行，其中的原因如下：</p></blockquote><ul><li>Services seem to be strongly decoupled from each other. As we shall see, this is only partially true.</li><li>Services appear to support independence of development and deployment. Again, as we shall see, this is only partially true.</li></ul><hr><blockquote><ul><li>服务之间似乎是强隔离的，但是下文我们会讲到，并不完全是这样。</li><li>服务被认为是支持独立开发和部署的，同样，下文我们也会讲到，并不完全是这样。</li></ul></blockquote><h2 id="SERVICE-ARCHITECTURE-面向服务的架构"><a href="#SERVICE-ARCHITECTURE-面向服务的架构" class="headerlink" title="SERVICE ARCHITECTURE? 面向服务的架构"></a>SERVICE ARCHITECTURE? 面向服务的架构</h2><p>First, let’s consider the notion that using services, by their nature, is an architecture. This is patently untrue. The architecture of a system is defined by boundaries that separate high-level policy from low-level detail and follow the Dependency Rule. Services that simply separate application behaviors are little more than expensive function calls, and are not necessarily architecturally significant.</p><blockquote><p>首先，我们来批判“只要使用了服务，就等于有了一套架构”这种思想。这显然是完全错误的。如前文所述，架构设计的任务就是找到高层策略与低层细节之间的架构边界，同时保证这些边界遵守依赖关系规则。所谓的服务本身只是一种比函数调用方式成本稍高的，分割应用程序行为的一种形式，与系统架构无关。</p></blockquote><p>This is not to say that all services should be architecturally significant. There are often substantial benefits to creating services that separate functionality across processes and platforms—whether they obey the Dependency Rule or not. It’s just that services, in and of themselves, do not define an architecture.</p><blockquote><p>当然，这里并不是说所有的服务都应该具有系统架构上的意义。有时候，用服务这种形式来隔离不同平台或进程中的程序行为这件事本身就很重要——不管它们是否遵守依赖关系规则。我们只是认为，服务本身并不能完全代表系统架构。</p></blockquote><p>A helpful analogy is the organization of functions. The architecture of a monolithic or component-based system is defined by certain function calls that cross architectural boundaries and follow the Dependency Rule. Many other functions in those systems, however, simply separate one behavior from another and are not architecturally significant.</p><blockquote><p>为了帮助读者理解上面所说的区别，我们用函数的组织形式来做个类比。不管是单体程序，还是多组件程序，系统架构都是由那些跨越架构边界的关键函数调用来定义的，并且整个架构必须遵守依赖关系规则。系统中许多其他的函数虽然也起到了隔离行为的效果，但它们显然并不具有架构意义。</p></blockquote><p>So it is with services. Services are, after all, just function calls across process and&#x2F;or platform boundaries. Some of those services are architecturally significant, and some aren’t. Our interest, in this chapter, is with the former.</p><blockquote><p>服务的情况也一样，服务这种形式说到底不过是一种跨进程&#x2F;平台边界的函数调用而己。有些服务会具有架构上的意义，有些则没有。我们这里重点要讨论的，当然是前者。</p></blockquote><h2 id="SERVICE-BENEFITS-服务所带来的好处"><a href="#SERVICE-BENEFITS-服务所带来的好处" class="headerlink" title="SERVICE BENEFITS? 服务所带来的好处"></a>SERVICE BENEFITS? 服务所带来的好处</h2><p>The question mark in the preceding heading indicates that this section is going to challenge the current popular orthodoxy of service architecture. Let’s tackle the benefits one at a time.</p><blockquote><p>我在本节的标题后面打了个问号，意味着我打算在这一节好好挑战一下目前流行的针对服务架构的崇拜情节。下面就让我们针对那些所谓的好处，一个一个地来批驳。</p></blockquote><h3 id="THE-DECOUPLING-FALLACY-解耦合的谬论"><a href="#THE-DECOUPLING-FALLACY-解耦合的谬论" class="headerlink" title="THE DECOUPLING FALLACY 解耦合的谬论"></a>THE DECOUPLING FALLACY 解耦合的谬论</h3><p>One of the big supposed benefits of breaking a system up into services is that services are strongly decoupled from each other. After all, each service runs in a different process, or even a different processor; therefore those services do not have access to each other’s variables. What’s more, the interface of each service must be well defined.</p><blockquote><p>很多人认为将系统拆分成服务的一个最忙要的好处就是让每个服务之间实现强解耦。毕竟，每个服务都是以一个不同的进程来运行的，甚至运行在不同处理器上。因此，服务之间通常不能访问彼此的变量。其外，服务之间的接口一定是充分定义的。</p></blockquote><p>There is certainly some truth to this—but not very much truth. Yes, services are decoupled at the level of individual variables. However, they can still be coupled by shared resources within a processor, or on the network. What’s more, they are strongly coupled by the data they share.</p><blockquote><p>从一定程度上来说，这是对的。确实，服务之间的确在变量层面做到了彼此隔离。然而，它们之间还是可能会因为处理器内的共享资源，或者通过网络共享资源而彼此耦合的。另外，任何形式的共享数据行为都会导致强耦合。</p></blockquote><p>For example, if a new field is added to a data record that is passed between services, then every service that operates on the new field must be changed. The services must also strongly agree about the interpretation of the data in that field. Thus those services are strongly coupled to the data record and, therefore, indirectly coupled to each other.</p><blockquote><p>例如，如果给服务之间传递的数据记录中增加了一个新字段，那么每个需要操作这个字段的服务都必须要做出相应的变更，服务之间必须对这条数据的解读达成一致。因此其实这些服务全部是强耦合于这条数据结构的，因此它们是间接彼此耦合的。</p></blockquote><p>As for interfaces being well defined, that’s certainly true—but it is no less true for functions. Service interfaces are no more formal, no more rigorous, and no better defined than function interfaces. Clearly, then, this benefit is something of an illusion.</p><blockquote><p>再来说说服务能很好地定义接口——它确实能很好地定义接口——但函数也能做到这一点。事实上，服务的接口与普通的函数接口相比，并没有比后者更正式、更严谨，也没有更好，这一点根本算不上什么好处。</p></blockquote><h3 id="THE-FALLACY-OF-INDEPENDENT-DEVELOPMENT-AND-DEPLOYMENT-独立开发部署的谬论"><a href="#THE-FALLACY-OF-INDEPENDENT-DEVELOPMENT-AND-DEPLOYMENT-独立开发部署的谬论" class="headerlink" title="THE FALLACY OF INDEPENDENT DEVELOPMENT AND DEPLOYMENT 独立开发部署的谬论"></a>THE FALLACY OF INDEPENDENT DEVELOPMENT AND DEPLOYMENT 独立开发部署的谬论</h3><p>Another of the supposed benefits of services is that they can be owned and operated by a dedicated team. That team can be responsible for writing, maintaining, and operating the service as part of a dev-ops strategy. This independence of development and deployment is presumed to be scalable. It is believed that large enterprise systems can be created from dozens, hundreds, or even thousands of independently developable and deployable services. Development, maintenance, and operation of the system can be partitioned between a similar number of independent teams.</p><blockquote><p>人们认为的另一个使用服务的好处就是，不同的服务可以由不同的专门团队负责和运维。这让开发团队可以釆用 dev-ops 混合的形式来编写、维护以及运维各自的服务，这种开发和部署上的独立性被认为是可扩展的。这种观点认为大型系统可以由几十个、几百个、甚至几千个独立开发部署的服务组成。整个系统的研发、维护以及运维工作就可以由同等量级的团队来共同完成。</p></blockquote><p>There is some truth to this belief—but only some. First, history has shown that large enterprise systems can be built from monoliths and component-based systems as well as service-based systems. Thus services are not the only option for building scalable systems.</p><blockquote><p>这种理念有一些道理——但也仅仅是一些而已。首先，无数历史事实证明，大型系统一样可以釆用单体模式，或打组件模式来构建，不一定非得服务化。因此服务化并不是构建大型系统的唯一选择。</p></blockquote><p>Second, the decoupling fallacy means that services cannot always be independently developed, deployed, and operated. To the extent that they are coupled by data or behavior, the development, deployment, and operation must be coordinated.</p><blockquote><p>其次，上文说到的解耦合谬论已经说明拆分服务并不意味着这些服务可以彼此独立开发、部署和运维。如果这些服务之间以数据形式或者行为形式相耦合，那么它们的开发、部署和运维也必须彼此协调来进行。</p></blockquote><h2 id="THE-KITTY-PROBLEM-运送猫咪的难题"><a href="#THE-KITTY-PROBLEM-运送猫咪的难题" class="headerlink" title="THE KITTY PROBLEM 运送猫咪的难题"></a>THE KITTY PROBLEM 运送猫咪的难题</h2><p>As an example of these two fallacies, let’s look at our taxi aggregator system again. Remember, this system knows about many taxi providers in a given city, and allows customers to order rides. Let’s assume that the customers select taxis based on a number of criteria, such as pickup time, cost, luxury, and driver experience.</p><blockquote><p>下面，我们再以之前那个出租车调度系统为例来说明上面那两个谬论。各位还记得吗？该系统会负责统一调度给定城市中的多个出租车提供商，而用户可以集中在它那里下订单。在这里，我们假设用户在租车时往往会附带一组参考条件，例如接送时间、价格、豪华程度、司机的经验，等等。</p></blockquote><p>We wanted our system to be scalable, so we chose to build it out of lots of little micro-services. We subdivided our development staff into many small teams, each of which is responsible for developing, maintaining, and operating a correspondingly1 small number of services.</p><blockquote><p>我们希望整个系统是可扩展的，于是该系统大量采用了微服务架构。然后，我们进一步将整个研发团队划分为许多个小团队，每个团队都负责开发、维护和运维相应的小数量的微服务。</p></blockquote><p>The diagram in Figure 27.1 shows how our fictitious architects arranged services to implement this application. The TaxiUI service deals with the customers, who use mobile devices to order taxis. The TaxiFinder service examines the inventories of the various TaxiSuppliers and determines which taxies are possible candidates for the user. It deposits these into a short-term data record attached to that user. The TaxiSelector service takes the user’s criteria of cost, time, luxury, and so forth, and chooses an appropriate taxi from among the candidates. It hands that taxi off to the TaxiDispatcher service, which orders the appropriate taxi.</p><blockquote><p>这个虚构系统的架构如图 27.1 所示，整个系统都是依靠服务来构建的。TaxiUI 服务负责与用户打交道，用户会通过移动设备向它下订单。TaxiFinder 服务负责调用不同的 TaxiSupplier 服务来获取可用车辆的信息，并且找出可用的出租车以作为可推荐项。这些可推荐项会短期地被固化成一条数据记录，与用户信息挂钩。TaxiSelector 服务则负责根据用户所选择的价格、时间、豪华程度等条件从可选项中筛选结果，最后这些结果会被传递给 TaxiDispatcher 服务，由它负责分派订单。</p></blockquote><p><Figures figure="27-1">Services arranged to implement the taxi aggregator system</Figures></p><p>Now let us suppose that this system has been in operation for more than a year. Our staff of developers have been happily developing new features while maintaining and operating all these services.</p><blockquote><p>现在，假设我们的系统已经运行了一年有余，其研发团队在持续开发新功能的同时，维护着所有的服务。</p></blockquote><p>One bright and cheerful day, the marketing department holds a meeting with the development team. In this meeting, they announce their plans to offer a kitten delivery service to the city. Users can order kittens to be delivered to their homes or to their places of business.</p><blockquote><p>在一个阳光明媚的早上，市场部召集整个研发部开会。会议上，市场部宣布了他们在该城市升展猫咪送达服务的计划。该计划将允许用户向系统下订单，要求将他们的猫咪送到自己家里或者办公室。</p></blockquote><p>The company will set up several kitten collection points across the city. When a kitten order is placed, a nearby taxi will be selected to collect a kitten from one of those collection points, and then deliver it to the appropriate address.</p><blockquote><p>公司的计划是在城市中建立几个猫咪集散点。当用户下订单时，附近的一辆出租车将被选中去集散点取猫，并将猫送到指定地点。</p></blockquote><p>One of the taxi suppliers has agreed to participate in this program. Others are likely to follow. Still others may decline.</p><blockquote><p>现在已经有一家出租车公司参加了这项活动，未来可能还会有其他公司参与进来，但肯定也会有不参与的公司。</p></blockquote><p>Of course, some drivers may be allergic to cats, so those drivers should never be selected for this service. Also, some customers will undoubtedly have similar allergies, so a vehicle that has been used to deliver kittens within the last 3 days should not be selected for customers who declare such allergies.</p><blockquote><p>当然，由于有些司机会对猫过敏，所以系统还必须要避免选中这些人去运送猫咪。同样的，由于出租车的乘客中也会有对猫过敏的人，所以当他们叫车时，系统也必须避免指派过去三天内运送过猫咪的车。</p></blockquote><p>Look at that diagram of services. How many of those services will have to change to implement this feature? All of them. Clearly, the development and deployment of the kitty feature will have to be very carefully coordinated.</p><blockquote><p>现在根据上述需求再来看我们的系统架构图，数一数有多少个服务需要变更？答案是全部！显然，为了增加这个运送猫咪的功能，该系统所有的服务都需要做变更，而且这些服务之间还要彼此做好协调。</p></blockquote><p>In other words, the services are all coupled, and cannot be independently developed, deployed, and maintained.</p><blockquote><p>换句话说，这些服务事实上全都是强耦合的，并不能真正做到独立开发、部署和维护。</p></blockquote><p>This is the problem with cross-cutting concerns. Every software system must face this problem, whether service oriented or not. Functional decompositions, of the kind depicted in the service diagram in Figure 27.1, are very vulnerable to new features that cut across all those functional behaviors.</p><blockquote><p>这就是所谓的横跨型变更（cross-cutting concern）问题，它是所有软件系统都要面对的问题，无论服务化还是非服务化的。其中，图 27.1 所示的这种按功能划分服务的架构方式，在跨系统的功能变更时是最脆弱的。</p></blockquote><h2 id="OBJECTS-TO-THE-RESCUE-对象化是救星"><a href="#OBJECTS-TO-THE-RESCUE-对象化是救星" class="headerlink" title="OBJECTS TO THE RESCUE 对象化是救星"></a>OBJECTS TO THE RESCUE 对象化是救星</h2><p>How would we have solved this problem in a component-based architecture? Careful consideration of the SOLID design principles would have prompted us to create a set of classes that could be polymorphically extended to handle new features.</p><blockquote><p>如果采用组件化的系统架构，如何解决这个难题呢？通过对 SOLID 设计原则的仔细考虑，我们应该一开始就设计一系列多态化的类，以应对将来新功能的扩展需要。</p></blockquote><p>The diagram in Figure 27.2 shows the strategy. The classes in this diagram roughly correspond to the services shown in Figure 27.1. However, note the boundaries. Note also that the dependencies follow the Dependency Rule.</p><blockquote><p>这种策略下的系统架构如图 27.2 所示，我们可以看到该图中的类与图 27.1 中的服务大致是相互对应的。然而，请读者注意这里设置了架构边界，并且遵守了依赖关系原则。</p></blockquote><p>Much of the logic of the original services is preserved within the base classes of the object model. However, that portion of the logic that was specific to rides has been extracted into a Rides component. The new feature for kittens has been placed into a Kittens component. These two components override the abstract base classes in the original components using a pattern such as Template Method or Strategy.</p><blockquote><p>现在，原先服务化设计中的大部分逻辑都被包含在对象模型的基类中。然而，针对每次特定行程的逻辑被抽离到一个单独的 Rides 组件中。运送猫咪的新功能被放入到 Kittens 组件中。这两个组件覆盖了原始组件中的抽象基类，这种设计模式被称作模板方法模式或策略模式。</p></blockquote><p>Note again that the two new components, Rides and Kittens, follow the Dependency Rule. Note also that the classes that implement those features are created by factories under the control of the UI.</p><blockquote><p>同时，我们也会注意到 Rides 和 Kittens 这两个新组件都遵守了依赖关系原则。另外，实现功能的类也都是由 UI 控制下的工厂类创建出来的。</p></blockquote><p>Clearly, in this scheme, when the Kitty feature is implemented, the TaxiUI must change. But nothing else needs to be changed. Rather, a new jar file, or Gem, or DLL is added to the system and dynamically loaded at runtime.</p><blockquote><p>显然，如果我们在这种架构下引入运送猫咪的功能，TaxiUI 组件就必须随之变更，但其他的组件就无须变更了。这里只需要引入一个新的 jar 文件或者 Gem、DLL。系统在运行时就会自动动态地加载它们。</p></blockquote><p>Thus the Kitty feature is decoupled, and independently developable and deployable.</p><blockquote><p>这样一来，运送猫咪的功能就与系统的其他部分实现了解耦，可以实现独立开发和部署了。</p></blockquote><p><Figures figure="27-2">Using an object-oriented approach to deal with cross-cutting concerns</Figures></p><h2 id="COMPONENT-BASED-SERVICES-基于组件的服务"><a href="#COMPONENT-BASED-SERVICES-基于组件的服务" class="headerlink" title="COMPONENT-BASED SERVICES 基于组件的服务"></a>COMPONENT-BASED SERVICES 基于组件的服务</h2><p>The obvious question is: Can we do that for services? And the answer is, of course: Yes! Services do not need to be little monoliths. Services can, instead, be designed using the SOLID principles, and given a component structure so that new components can be added to them without changing the existing components within the service.</p><blockquote><p>那么，问题来了：服务化也可以做到这一点吗？答案是肯定的。服务并不一定必须是小型的单体程序。服务也可以按照 SOLID 原则来设计，按照组件结构来部署，这样就可以做到在添加&#x2F;删除组件时不影响服务中的其他组件。</p></blockquote><p>Think of a service in Java as a set of abstract classes in one or more jar files. Think of each new feature or feature extension as another jar file that contains classes that extend the abstract classes in the first jar files. Deploying a new feature then becomes not a matter of redeploying the services, but rather a matter of simply adding the new jar files to the load paths of those services. In other words, adding new features conforms to the Open-Closed Principle.</p><blockquote><p>我们可以将 Java 中的服务看作是一个或多个 jar 文件中的一组抽象类，而每个新功能或功能扩展都是另一个 jar 文件中的类，它们都扩展了之前 jar 文件中的抽象类。这样一来，部署新功能就不再是部署服务了，而只是简单地在服务的加载路径下增加一个 jar 文件。换句话说，这种增加新功能的过程符合开闭原则（OCP）。</p></blockquote><p>The service diagram in Figure 27.3 shows the structure. The services still exist as before, but each has its own internal component design, allowing new features to be added as new derivative classes. Those derivative classes live within their own components.</p><blockquote><p>这种服务的架构如图 27.3 所示。我们可以看到，在该架构中服务仍然和之前一样，但是每个服务中都增加了内部组件结构，以便使用衍生类来添加新功能，而这些衍生类都有各自所生存的组件。</p></blockquote><p><Figures figure="27-3">Each service has its own internal component design, enabling new features to be added as new derivative classes</Figures></p><h2 id="CROSS-CUTTING-CONCERNS-横跨型变更"><a href="#CROSS-CUTTING-CONCERNS-横跨型变更" class="headerlink" title="CROSS-CUTTING CONCERNS 横跨型变更"></a>CROSS-CUTTING CONCERNS 横跨型变更</h2><p>What we have learned is that architectural boundaries do not fall between services. Rather, those boundaries run through the services, dividing them into components.</p><blockquote><p>现在我们应该已经明白了，系统的架构边界事实上并不落在服务之间，而是穿透所有服务，在服务内部以组件的形式存在。</p></blockquote><p>To deal with the cross-cutting concerns that all significant systems face, services must be designed with internal component architectures that follow the Dependency Rule, as shown in the diagram in Figure 27.4. Those services do not define the architectural boundaries of the system; instead, the components within the services do.</p><blockquote><p>为了处理这个所有大型系统都会遇到的横跨型变更问题，我们必须在服务内部采用遵守依赖关系原则的组件设计方式，如图 27.4 所示。总而言之，服务边界并不能代表系统的架构边界，服务内部的组件边界才是。</p></blockquote><p><Figures figure="27-4">Services must be designed with internal component architectures that follow the Dependency Rule</Figures></p><h2 id="CONCLUSION-本章小结-25"><a href="#CONCLUSION-本章小结-25" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>As useful as services are to the scalability and develop-ability of a system, they are not, in and of themselves, architecturally significant elements. The architecture of a system is defined by the boundaries drawn within that system, and by the dependencies that cross those boundaries. That architecture is not defined by the physical mechanisms by which elements communicate and execute.</p><blockquote><p>虽然服务化可能有助于提升系统的可扩展性和可研发性，但服务本身却并不能代表整个系统的架构设计。系统的架构是由系统内部的架构边界，以及边界之间的依赖关系所定义的，与系统中各组件之间的调用和通信方式无关。</p></blockquote><p>A service might be a single component, completely surrounded by an architectural boundary. Alternatively, a service might be composed of several components separated by architectural boundaries. In rare2 cases, clients and services may be so coupled as to have no architectural significance whatever.</p><blockquote><p>一个服务可能是一个独立组件，以系统架构边界的形式隔开。一个服务也可能由几个组件组成，其中的组件以架构边界的形式互相隔离。在极端情况下，客户端和服务端甚至可能会由于耦合得过于紧密而不具备系统架构意义上的隔离性。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap28-THE-TEST-BOUNDARY-测试边界"><a href="#Chap28-THE-TEST-BOUNDARY-测试边界" class="headerlink" title="Chap28. THE TEST BOUNDARY 测试边界"></a>Chap28. THE TEST BOUNDARY 测试边界</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN28.jpg"></p><p>Yes, that’s right: The tests are part of the system, and they participate in the architecture just like every other part of the system does. In some ways, that participation is pretty normal. In other ways, it can be pretty unique.</p><blockquote><p>对，你没看错：和程序代码一样，测试代码也是系统的一部分。甚至，测试代码有时在系统架构中的地位还要比其他部分更独特一些。</p></blockquote><h2 id="TESTS-AS-SYSTEM-COMPONENTS-测试也是一种系统组件"><a href="#TESTS-AS-SYSTEM-COMPONENTS-测试也是一种系统组件" class="headerlink" title="TESTS AS SYSTEM COMPONENTS 测试也是一种系统组件"></a>TESTS AS SYSTEM COMPONENTS 测试也是一种系统组件</h2><p>There is a great deal of confusion about tests. Are they part of the system? Are they separate from the system? Which kinds of tests are there? Are unit tests and integration tests different things? What about acceptance tests, functional tests, Cucumber tests, TDD tests, BDD tests, component tests, and so on?</p><blockquote><p>讨论测试的时候，业界总会有许多自相矛盾的声音。测试应该是系统的一部分吗？还是应该独立于系统之外存在呢？测试分为哪几种？单元测试与集成测试是不同的东西吗？质量检查测试、功能性测试、Cucumber 测试、TDD 测试、BDD 测试、组件测试分别又都是什么？</p></blockquote><p>It is not the role of this book to get embroiled in that particular debate, and fortunately it isn’t necessary. From an architectural point of view, all tests are the same. Whether they are the tiny little tests created by TDD, or large FitNesse, Cucumber, SpecFlow, or JBehave tests, they are architecturally equivalent.</p><blockquote><p>在本书中我们并不想卷入对这些问题的辩论中，而且也很庆幸没有卷入的必要。因为从架构的角度来讲，所有的测试都是一样的。不论它们是小型的 TDD 测试，还是大型的 FitNesse、Cucumber、SpecFlow 或 JBehave 测试，对架构来说都是一样的。</p></blockquote><p>Tests, by their very nature, follow the Dependency Rule; they are very detailed and concrete; and they always depend inward toward the code being tested. In fact, you can think of the tests as the outermost circle in the architecture. Nothing within the system depends on the tests, and the tests always depend inward on the components of the system.</p><blockquote><p>究其本质而言，测试组件也是要遵守依赖关系原则的。因为其中总是充满了各种细节信息，非常具体，所以它始终都是向内依赖于被测试部分的代码的。事实上，我们可以将测试组件视为系统架构中最外圈的程序。它们始终是向内依赖的，而且系统中没有其他组件依赖于它们。</p></blockquote><p>Tests are also independently deployable. In fact, most of the time they are deployed in test systems, rather than in production systems. So, even in systems where independent deployment is not otherwise necessary, the tests will still be independently deployed.</p><blockquote><p>另外，测试组件是可以独立部署的。事实上，大部分测试组件都是被部署在测试环境中，而不是生产环境中。所以，即使是那些本身不需要独立部署的系统中，其测试代码也总是独立部署的。</p></blockquote><p>Tests are the most isolated system component. They are not necessary for system operation. No user depends on them. Their role is to support development, not operation. And yet, they are no less a system component than any other. In fact, in many ways they represent the model that all other system components should follow.</p><blockquote><p>测试组件通常是一个系统中最独立的组件。系统的正常运行并不需要用到测试组件，用户也不依赖于测试组件。测试组件的存在是为了支持开发过程，而不是运行过程。然而，测试组件仍然是系统中不可或缺的一个组件。事实上，测试组件在许多方面都反映了系统中其他组件所应遵循的设计模型。</p></blockquote><h2 id="DESIGN-FOR-TESTABILITY-可测试性设计"><a href="#DESIGN-FOR-TESTABILITY-可测试性设计" class="headerlink" title="DESIGN FOR TESTABILITY 可测试性设计"></a>DESIGN FOR TESTABILITY 可测试性设计</h2><p>The extreme isolation of the tests, combined with the fact that they are not usually deployed, often causes developers to think that tests fall outside of the design of the system. This is a catastrophic point of view. Tests that are not well integrated into the design of the system tend to be fragile, and they make the system rigid and difficult to change.</p><blockquote><p>由于测试代码的独立性，以及往往不会被部署到生产坏境的特点，开发者常常会在系统设计中忽视测试的重要性，这种做法是极为错误的。测试如果没有被集成到系统设计中，往往是非常脆弱的，这种脆弱性会使得系统变得死板，非常难以更改。</p></blockquote><p>The issue, of course, is coupling. Tests that are strongly coupled to the system must change along with the system. Even the most trivial change to a system component can cause many coupled tests to break or require changes.</p><blockquote><p>当然，这里的关键之处就是耦合。如果测试代码与系统是强耦合的，它就得随着系统变更而变更。哪怕只是系统中组件的一点小变化，都可能会导致许多与之相耦合的测试出现问题，需要做出相应的变更。</p></blockquote><p>This situation can become acute. Changes to common system components can cause hundreds, or even thousands, of tests to break. This is known as the Fragile Tests Problem.</p><blockquote><p>这个问题可能会很严重。修改一个通用的系统组件可能会导致成百上千个测试出现问题，我们通常将这类问题称为脆弱的测试问题（fragile tests problem）。</p></blockquote><p>It is not hard to see how this can happen. Imagine, for example, a suite of tests that use the GUI to verify business rules. Such tests may start on the login screen and then navigate through the page structure until they can check particular business rules. Any change to the login page, or the navigation structure, can cause an enormous number of tests to break.</p><blockquote><p>这类问题的发生过程并不难想象。例如，假设我们有一套利用 GUI 来校验系统业务逻辑的测试。这些测试可能从登录页面开始，按照导航顺序遍历整个页面结构，直到完成某个特定的业务逻辑为止。这时候，任何针对登录页面或导航顺序的变更，都可能导致大量的测试出错。</p></blockquote><p>Fragile tests often have the perverse effect of making the system rigid. When developers realize that simple changes to the system can cause massive test failures, they may resist making those changes. For example, imagine the conversation between the development team and a marketing team that requests a simple change to the page navigation structure that will cause 1000 tests to break.</p><blockquote><p>另外，脆弱的测试还往往会让系统变得非常死板。当开发者意识到一些简单的修改就会导致大量的测试出错时，他们自然就会抵制修改。请想象一下，如果市场部门所要求的一个针对页面导航结构的简单变更会导致一千个测试出错时，开发部门会怎么说吧。</p></blockquote><p>The solution is to design for testability. The first rule of software design—whether for testability or for any other reason—is always the same: Don’t depend on volatile things. GUIs are volatile. Test suites that operate the system through the GUI must be fragile. Therefore design the system, and the tests, so that business rules can be tested without using the GUI.</p><blockquote><p>要想解决这个问题，就必须在设计中考虑到系统的可测试性。软件设计的第一条原则——不管是为了可测试性还是其他什么东西——是不变的，就是不要依赖于多变的东西。譬如，GUI 往往是多变的，因此通过 GUI 来验证系统的测试一定是脆弱的。因此，我们在系统设汁与测试设计时，应该让业务逻辑不通过 GUI 也可以被测试。</p></blockquote><h2 id="THE-TESTING-API-测试专用-API"><a href="#THE-TESTING-API-测试专用-API" class="headerlink" title="THE TESTING API 测试专用 API"></a>THE TESTING API 测试专用 API</h2><p>The way to accomplish this goal is to create a specific API that the tests can use to verify all the business rules. This API should have superpowers that allow the tests to avoid security constraints, bypass expensive resources (such as databases), and force the system into particular testable states. This API will be a superset of the suite of interactors and interface adapters that are used by the user interface.</p><blockquote><p>设计这样一个系统的方法之一就是专门为验证业务逻辑的测试创建一个 API。这个 API 应该被授予超级用户权限，允许测试代码可以忽视安全限制，绕过那些成本高昂的资源（例如数据库），强制将系统设置到某种可测试的状态中。总而言之，该 API 应该成为用户界面所用到的交互器与接口适配器的一个超集。</p></blockquote><p>The purpose of the testing API is to decouple the tests from the application. This decoupling encompasses more than just detaching the tests from the UI: The goal is to decouple the structure of the tests from the structure of the application.</p><blockquote><p>设置测试 API 是为了将测试部分从应用程序中分离出来。换句话说，这种解耦动作不只是为了分隔测试部分与 UI 部分，而是要将测试代码的结构与应用程序其他部分的代码结构分开。</p></blockquote><h3 id="STRUCTURAL-COUPLING-结构性耦合"><a href="#STRUCTURAL-COUPLING-结构性耦合" class="headerlink" title="STRUCTURAL COUPLING 结构性耦合"></a>STRUCTURAL COUPLING 结构性耦合</h3><p>Structural coupling is one of the strongest, and most insidious, forms of test coupling. Imagine a test suite that has a test class for every production class, and a set of test methods for every production method. Such a test suite is deeply coupled to the structure of the application.</p><blockquote><p>结构性耦合是测试代码所具有的耦合关系中最强大、最阴险的一种形式。假设我们现在有一组测试套件，它针对每个产品类都有一个对应的测试类，每个产品函数都有一个对应的测试函数。显然，该测试套件与应用程序在结构上是紧耦合的。</p></blockquote><p>When one of those production methods or classes changes, a large number of tests must change as well. Consequently, the tests are fragile, and they make the production code rigid.</p><blockquote><p>每当应用程序中的一个函数或类发生变更时，该测试套件就必须进行大量相应的修改。因此，这些测试是非常脆弱的，它们也会让产品代码变得非常死板。</p></blockquote><p>The role of the testing API is to hide the structure of the application from the tests. This allows the production code to be refactored and evolved in ways that don’t affect the tests. It also allows the tests to be refactored and evolved in ways that don’t affect the production code.</p><blockquote><p>测试专用 API 的作用就是将应用程序与测试代码解耦。这样，我们的产品代码就可以在不影响测试的情况下进行重构和演进。同样的，这种设计也允许测试代码在不影响生产代码的情况下进行重构和演进。</p></blockquote><p>This separation of evolution is necessary because as time passes, the tests tend to become increasingly more concrete and specific. In contrast, the production code tends to become increasingly more abstract and general. Strong structural coupling prevents—or at least impedes—this necessary evolution, and prevents the production code from being as general, and flexible, as it could be.</p><blockquote><p>这种对演进过程的隔离是很重要的，因为随着时间的推移，测试代码趋向于越来越具体和详细。相比之下，我们的产品代码则会趋向于越来越抽象和通用。结构性的强耦合可能会让这种必需的演进无法进行——至少会形成强烈的干扰。</p></blockquote><h3 id="SECURITY-安全性"><a href="#SECURITY-安全性" class="headerlink" title="SECURITY 安全性"></a>SECURITY 安全性</h3><p>The superpowers of the testing API could be dangerous if they were deployed in production systems. If this is a concern, then the testing API, and the dangerous parts of its implementation, should be kept in a separate, independently deployable component.</p><blockquote><p>当然，这种具有超级权限的测试专用 API 如果被部署到我们的产品系统中，可能会是非常危险的。如果要避免这种情况发生，应该将测试专用 API 及其对应的具体实现放置在一个单独的、可独立部署的组件中。</p></blockquote><h2 id="CONCLUSION-本章小结-26"><a href="#CONCLUSION-本章小结-26" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>Tests are not outside the system; rather, they are parts of the system that must be well designed if they are to provide the desired benefits of stability and regression. Tests that are not designed as part of the system tend to be fragile and difficult to maintain. Such tests often wind up on the maintenance room floor—discarded because they are too difficult to maintain.</p><blockquote><p>测试并不是独立于整个系统之外的，恰恰相反，它们是系统的一个重要组成部分。我们需要精心设计这些测试，才能让它们发挥验证系统稳定性和预防问题复发的作用。没有按系统组成部分来设计的测试代码，往往是非常脆弱且难以维护的。这种测试最后常常会被抛弃，因为它们终究会出问题。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap29-CLEAN-EMBEDDED-ARCHITECTURE-整洁的嵌入式架构"><a href="#Chap29-CLEAN-EMBEDDED-ARCHITECTURE-整洁的嵌入式架构" class="headerlink" title="Chap29. CLEAN EMBEDDED ARCHITECTURE 整洁的嵌入式架构"></a>Chap29. CLEAN EMBEDDED ARCHITECTURE 整洁的嵌入式架构</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN29.jpg"></p><p>By James Grenning</p><p>A while ago I read an article entitled “The Growing Importance of Sustaining Software for the DoD”1 on Doug Schmidt’s blog. Doug made the following claim:</p><blockquote><p>前一段时间，我在 Doug Schmidt 的个人博客上看到了一篇文章，标题是“The Growing Importance of Sustaining Software for the DoD”，Doug 在这篇文章中提出了以下观点：</p></blockquote><p>“Although software does not wear out, firmware and hardware become obsolete, thereby requiring software modifications.”</p><blockquote><p>“虽然软件本身并不会随时间推移而磨损，但硬件及其固件却会随时间推移而过时，随即也需要对软件做相应改动。”</p></blockquote><p>It was a clarifying moment for me. Doug mentioned two terms that I would have thought to be obvious—but maybe not. Software is this thing that can have a long useful life, but firmware will become obsolete as hardware evolves. If you have spent any time in embedded systems development, you know the hardware is continually evolving and being improved. At the same time, features are added to the new “software,” and it continually grows in complexity.</p><blockquote><p>这句话对我有如醍醐灌顶。Doug 在这里用到了两个专业名词，我一直认为是显而易见的，但是其他人可能并没有这么觉得。其中，软件（software）应该是一种使用周期很长的东西，而固件（firmware）则会随着硬件演进而淘汰过时。曾经开发过嵌入式系统的人一定都知道，硬件系统是在持续不断地演进的。与此同时，随着新功能不断地增加，软件复杂度也在不断上升。</p></blockquote><p>I’d like to add to Doug’s statement:</p><blockquote><p>在这里，我想对 Dough 上面的那个观点做一点补充：</p></blockquote><p>Although software does not wear out, it can be destroyed from within by unmanaged dependencies on firmware and hardware.</p><blockquote><p>“虽然软件质量本身并不会随时间推移而损耗，但是未妥善管理的硬件依赖和固件依赖却是软件的头号杀手。”</p></blockquote><p>It is not uncommon for embedded software to be denied a potentially long life due to being infected with dependencies on hardware.</p><blockquote><p>也就是说，本可以长期使用的嵌入式软件可能会由于其中隐含的硬件依赖关系而无法继续使用，这种情况是很常见的。</p></blockquote><p>I like Doug’s definition of firmware, but let’s see which other definitions are out there. I found these alternatives:</p><blockquote><p>我个人很喜欢 Doug 对固件所做的定义，但我们也可以来看一下其他人对固件的定义，以下是我目前所找到的一些说法：</p></blockquote><ul><li>“Firmware is held in non-volatile memory devices such as ROM, EPROM, or flash memory.” (<a href="https://en.wikipedia.org/wiki/Firmware">https://en.wikipedia.org/wiki/Firmware</a>)</li><li>“Firmware is a software program or set of instructions programmed on a hardware device.” (<a href="https://techterms.com/definition/firmware">https://techterms.com/definition/firmware</a>)</li><li>“Firmware is software that is embedded in a piece of hardware.” (<a href="https://www.lifewire.com/what-is-firmware-2625881">https://www.lifewire.com/what-is-firmware-2625881</a>)</li><li>Firmware is “Software (programs or data) that has been written onto read-only memory (ROM).” (<a href="http://www.webopedia.com/TERM/F/firmware.html">http://www.webopedia.com/TERM/F/firmware.html</a>)</li></ul><hr><blockquote><ul><li>“固件通常被存储在非可变内存设备，例如 ROM、EPROM 或者闪存中。”（<a href="https://en.wikipedia.org/wiki/Firmware">https://en.wikipedia.org/wiki/Firmware</a>）</li><li>“固件是直接编程在一个硬件设备上的一组指令或者一段程序。”（<a href="https://techterms.com/definition/firmware">https://techterms.com/definition/firmware</a>）</li><li>“固件是嵌入在一个硬件中的软件程序。”（<a href="https://www.lifewire.com/what-is-firmware-2625881">https://www.lifewire.com/what-is-firmware-2625881</a>）</li><li>“固件是被写入到只读内存设备中的（ROM）程序或数据。”（<a href="http://www.webopedia.com/TERM/F/firmware.html">http://www.webopedia.com/TERM/F/firmware.html</a>）</li></ul></blockquote><p>Doug’s statement makes me realize that these accepted definitions of firmware are wrong, or at least obsolete. Firmware does not mean code lives in ROM. It’s not firmware because of where it is stored; rather, it is firmware because of what it depends on and how hard it is to change as hardware evolves. Hardware does evolve (pause and look at your for phone for evidence), so we should structure our embedded code with that reality in mind.</p><blockquote><p>Doug 的这段观点表述让我意识到，大家普遍所认知的固件定义是错误的，或者至少是过时的。固件并不一定是存储在 ROM 中的代码。固件也不是依据其存储的位置来定义的，而是由其代码的依赖关系，及其随着硬件的演进在变更难度上的变化来定义的。硬件的演进是显而易见的（如果对此有任何疑问，请想一想你手中的手机），我们在架构嵌入式代码时要时刻记住这一点。</p></blockquote><p>I have nothing against firmware, or firmware engineers (I’ve been known to write some firmware myself). But what we really need is less firmware and more software. Actually, I am disappointed that firmware engineers write so much firmware!</p><blockquote><p>我并不反对固件，也不反对固件工程师（我自己也曾经写过固件）。但是我们真的应该少写点固件，而多写点软件。事实上，我最失望的是固件工程师竟然要写那么多固件程序！</p></blockquote><p>Non-embedded engineers also write firmware! You non-embedded developers essentially write firmware whenever you bury SQL in your code or when you spread platform dependencies throughout your code. Android app developers write firmware when they don’t separate their business logic from the Android API.</p><blockquote><p>还有，非嵌入式工程师竟然也要写固件程序！虽然你可能并不是嵌入式系统的开发者，但如果你在代码中嵌入了 SQL 或者是代码中引入了对某个平台的依赖的话，其实就是在写固件代码。譬如，Android 工程师在没有将业务逻辑与 Android API 分离之前，实际上也是在写固件代码。</p></blockquote><p>I’ve been involved in a lot of efforts where the line between the product code (the software) and the code that interacts with the product’s hardware (the firmware) is fuzzy to the point of nonexistence. For example, in the late 1990s I had the fun of helping redesign a communications subsystem that was transitioning from time-division multiplexing (TDM) to voice over IP (VOIP). VOIP is how things are done now, but TDM was considered the state of the art from the 1950s and 1960s, and was widely deployed in the 1980s and 1990s.</p><blockquote><p>我参与过很多软件项目，其中一些产品的功能代码（软件）与硬件支持代码（固件）的边界模糊得几乎不存在。例如，在 20 世纪 90 年代末，我有幸参与了一套通信系统的重新设计，将其从时分复用（TDM）模式迁移到 VOIP 模式。虽然 VOIP 如今已经是行业标准，但是从 20 世纪 50 年代到 60 年代，TDM 一直都是非常先进的技术，直到 20 世纪 80 年代和 90 年代它也被广泛部署在各种系统中。</p></blockquote><p>Whenever we had a question for the systems engineer about how a call should react to a given situation, he would disappear and a little later emerge with a very detailed answer. “Where did he get that answer?” we asked. “From the current product’s code,” he’d answer. The tangled legacy code was the spec for the new product! The existing implementation had no separation between TDM and the business logic of making calls. The whole product was hardware&#x2F;technology dependent from top to bottom and could not be untangled. The whole product had essentially become firmware.</p><blockquote><p>每当我们向系统工程师提出一个产品问题——系统在某个情况下应该如何处理某通电话，这位系统工程师就会消失一段时间，然后给出一个非常具体的答案。我们问他是从哪里查到这个结果的？答案是“从当前的产品代码里！”这些复杂交错的老代码己经成为系统定义的一部分。该系统在实现过程中并没有区分 TDM 技术代码和拨打电话这样的业务逻辑代码。整个产品从头到尾都与具体技术、具体硬件息息相关，无法分割。可以说整个产品已经成为事实上的固件。</p></blockquote><p>Consider another example: Command messages arrive to this system via serial port. Unsurprisingly, there is a message processor&#x2F;dispatcher. The message processor knows the format of messages, is able to parse them, and can then dispatch the message to the code that can handle the request. None of this is surprising, except that the message processor&#x2F;dispatcher resides in the same file as code that interacts with a UART2 hardware. The message processor is polluted with UART details. The message processor could have been software with a potentially long useful life, but instead it is firmware. The message processor is denied the opportunity to become software—and that is just not right!</p><blockquote><p>再来看另外一个例子：我们都知道命令消息是通过串行端口传递给系统的。这自然就要有一个消息的处理器&#x2F;分发器系统。其中，消息处理器得了解消息格式，可以解析消息，然后将消息分发给具体的处理代码。这些都很正常，但消息处理器分发器的代码和操作 UART 硬件的代码往往会被放存同一个文件中消息处理器的代码中常常充斥着与 UART 相关的实现细节。这样一来，本可以长时间使用的消息处理器代码变成了一段固件代码，这太不应该了！</p></blockquote><p>I’ve known and understood the need for separating software from hardware for a long time, but Doug’s words clarified how to use the terms software and firmware in relationship to each other.</p><blockquote><p>虽然我意识到要从使用意义上将软件与硬件、固件区分开来也已经有一段时间了，但是借助 Doug 对软件和固件的定义，我现在可以吧这件事情说得更明白一些。</p></blockquote><p>For engineers and programmers, the message is clear: Stop writing so much firmware and give your code a chance at a long useful life. Of course, demanding it won’t make it so. Let’s look at how we can keep embedded software architecture clean to give the software a fighting chance of having a long and useful life.</p><blockquote><p>对于程序员和工程师，我的意思很明确：不要再写固件代码了，让我们的代码活得更久点！当然，我们也不能总是空谈理念，下面就来看一下应该如何通过好的架构设计让嵌入式代码拥有更长的有效生命周期。</p></blockquote><h2 id="APP-TITUDE-TEST-“程序适用测试”测试"><a href="#APP-TITUDE-TEST-“程序适用测试”测试" class="headerlink" title="APP-TITUDE TEST “程序适用测试”测试"></a>APP-TITUDE TEST “程序适用测试”测试</h2><p>Why does so much potential embedded software become firmware? It seems that most of the emphasis is on getting the embedded code to work, and not so much emphasis is placed on structuring it for a long useful life. Kent Beck describes three activities in building software (the quoted text is Kent’s words and the italics are my commentary):</p><blockquote><p>为什么这么多嵌入式软件最后都成了固件？看起来，很可能是因为我们在做嵌入式设计时只关注代码能否顺利运行，并不太关心其结构能否撑起一个较长的有效生命周期。Kent Beck 描述了软件构建过程中的三个阶段（引号部分是他的原话，楷体部分是我的注解）：</p></blockquote><ol><li>“First make it work.” You are out of business if it doesn’t work.</li><li>“Then make it right.” Refactor the code so that you and others can understand it and evolve it as needs change or are better understood.</li><li>“Then make it fast.” Refactor the code for “needed” performance.</li></ol><hr><blockquote><ol><li>“先让代码工作起来”——如果代码不能工作，就不能产生价值。</li><li>“然后再试图将它变好——通过对代码进行重构，让我们自己和其他人更好地理解代码，并能按照需求不断地修改代码。</li><li>“最后再试着让它运行得更快”——按照性能提升的“需求”来重构代码。</li></ol></blockquote><p>Much of the embedded systems software that I see in the wild seems to have been written with “Make it work” in mind—and perhaps also with an obsession for the “Make it fast” goal, achieved by adding micro-optimizations at every opportunity. In The Mythical Man-Month, Fred Brooks suggests we “plan to throw one away.” Kent and Fred are giving virtually the same advice: Learn what works, then make a better solution.</p><blockquote><p>我所见过的大部分“野生”的嵌入式代码，都只关注“先让它工作起来”这个目标——也许还有些团队会同时痴迷于“让它更快”这个目标，不放过任何一个机会加入各种微优化。在《人月神话》这本书中，Fred Brooks 建议我们应该随时准备“抛弃一个设计”。Kent 和 Fred 说的其实是同一件事：“在实践中学习正确的工作方法，然后再重写一个更好的版本”。</p></blockquote><p>Embedded software is not special when it comes to these problems. Most non-embedded apps are built just to work, with little regard to making the code right for a long useful life.</p><blockquote><p>这个建议对非嵌入式软件系统开发同样有用。毕竟目前大部分非嵌入式应用也仅仅停留在“可用”这个目标上，很少考虑为了长久使用而进行正确的设计。</p></blockquote><p>Getting an app to work is what I call the App-titude test for a programmer. Programmers, embedded or not, who just concern themselves with getting their app to work are doing their products and employers a disservice. There is much more to programming than just getting an app to work.</p><blockquote><p>对于程序员来说，让他的程序工作这件事只能被称为“程序适用测试（app-titude test）”。一个程序员，不论他写的是否是嵌入式程序，如果目标仅仅是让程序可以工作，恐怕对他的老板和这个程序本身而言都是一件坏事。毕竟，编程这件事可远不止是让程序可以工作这么简单。</p></blockquote><p>As an example of code produced while passing the App-titude test, check out these functions located in one file of a small embedded system:</p><blockquote><p>下面我们来示范一下可以通过“程序适用测试”的代码是什么样子的。先来看一个小型嵌入式系统中某个源文件中的一段函数声明：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ISR(TIMER1_vect) &#123; ... &#125;</span><br><span class="line">ISR(INT2_vect) &#123; ... &#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">btn_Handler</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br><span class="line"><span class="type">float</span> <span class="title function_">calc_RPM</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> <span class="title function_">Read_RawData</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Do_Average</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Get_Next_Measurement</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Zero_Sensor_1</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Zero_Sensor_2</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Dev_Control</span><span class="params">(<span class="type">char</span> Activation)</span> &#123; ... &#125;</span><br><span class="line"><span class="type">char</span> <span class="title function_">Load_FLASH_Setup</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Save_FLASH_Setup</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Store_DataSet</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br><span class="line"><span class="type">float</span> <span class="title function_">bytes2float</span><span class="params">(<span class="type">char</span> bytes[<span class="number">4</span>])</span> &#123; ... &#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Recall_DataSet</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Sensor_init</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">uC_Sleep</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>That list of functions is in the order I found them in the source file. Now I’ll separate them and group them by concern:</p><blockquote><p>可以看到该源文件中的函数是按一定顺序列出来的。现在我们要按照功能进行分组：</p></blockquote><ul><li>Functions that have domain logic</li></ul><blockquote><ul><li>用于定义域逻辑（domain logic）的函数</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> <span class="title function_">calc_RPM</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Do_Average</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Get_Next_Measurement</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Zero_Sensor_1</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Zero_Sensor_2</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><ul><li>Functions that set up the hardware platform</li></ul><blockquote><ul><li>用于设置硬件平台的函数</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ISR(TIMER1_vect) &#123; ... &#125;*</span><br><span class="line"></span><br><span class="line">ISR(INT2_vect) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">uC_Sleep</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">Functions that react to the on off button press</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">btn_Handler</span><span class="params">(<span class="type">void</span>)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Dev_Control</span><span class="params">(<span class="type">char</span> Activation)</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>A Function that can get A&#x2F;D input readings from the hardware</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">char</span> <span class="title function_">Read_RawData</span><span class="params">(<span class="keyword">void</span>)</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><ul><li>Functions that store values to the persistent storage</li></ul><blockquote><ul><li>用于执行持久化存储的函数</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="title function_">Load_FLASH_Setup</span><span class="params">(<span class="keyword">void</span>)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">Save_FLASH_Setup</span><span class="params">(<span class="keyword">void</span>)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">Store_DataSet</span><span class="params">(<span class="keyword">void</span>)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">bytes2float</span><span class="params">(<span class="type">char</span> bytes[<span class="number">4</span>])</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">Recall_DataSet</span><span class="params">(<span class="keyword">void</span>)</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><ul><li>Function that does not do what its name implies</li></ul><blockquote><ul><li>功能与其名字不符的函数</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">Sensor_init</span><span class="params">(<span class="keyword">void</span>)</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>Looking at some of the other files in this application, I found many impediments to understanding the code. I also found a file structure that implied that the only way to test any of this code is in the embedded target. Virtually every bit of this code knows it is in a special microprocessor architecture, using “extended” C constructs3 that tie the code to a particular tool chain and microprocessor. There is no way for this code to have a long useful life unless the product never needs to be moved to a different hardware environment.</p><blockquote><p>在查看该应用程序其他源代码文件的过程中，我同样发现了许多理解上的障碍点。同时，我还发现这个项目的结构决定了该应用程序的所有代码只有在指定硬件平台上才能被测试。几乎代码的所有部分都知道它要运行在一个特殊的微处理器平台上，因为它们用的是“被扩展了的” C 结构，需要特殊的工具链和微处理器才能执行。除非这个产品永远不需要迁移到另一个硬件平台上，否则这段代码几乎不可能有长久的使用价值。</p></blockquote><p>This application works: The engineer passed the App-titude test. But the application can’t be said to have a clean embedded architecture.</p><blockquote><p>所以你看，这段代码的确能够正常工作：它的工程师也通过了“程序适用性测试”，但我们不能说该应用程序有一套整洁的嵌入式架构。</p></blockquote><h2 id="THE-TARGET-HARDWARE-BOTTLENECK-目标硬件瓶颈"><a href="#THE-TARGET-HARDWARE-BOTTLENECK-目标硬件瓶颈" class="headerlink" title="THE TARGET-HARDWARE BOTTLENECK 目标硬件瓶颈"></a>THE TARGET-HARDWARE BOTTLENECK 目标硬件瓶颈</h2><p>There are many special concerns that embedded developers have to deal with that non-embedded developers do not—for example, limited memory space, real-time constraints and deadlines, limited IO, unconventional user interfaces, and sensors and connections to the real world. Most of the time the hardware is concurrently developed with the software and firmware. As an engineer developing code for this kind of system, you may have no place to run the code. If that’s not bad enough, once you get the hardware, it is likely that the hardware will have its own defects, making software development progress even slower than usual.</p><blockquote><p>嵌入式系统的程序员通常需要处理很多在写非嵌入式系统时不需要关心的事情——例如，有限的地址空间、实时性限制、运行截止时间、有限的 I&#x2F;O 能力、非常规的用户接口、感应器，以及其他与物理世界的实际链接。大部分时候，这些系统的硬件是和它的软件、固件并行开发的。工程师在为这种系统编写代码的时候，往往没有任何地方可以运行。如果你认为这还不算糟糕的话，请想象一下，如果我们要等到真正拿到硬件时，才能了解代码在该硬件上存在着哪些意料之外的缺陷，这会在多大程度上拖慢我们的开发进度?</p></blockquote><p>Yes, embedded is special. Embedded engineers are special. But embedded development is not so special that the principles in this book are not applicable to embedded systems.</p><blockquote><p>是的，我们承认嵌入式系统的开发有其特殊性，嵌入式工程师的工作有其特殊性，但我们并不认为嵌入式开发特殊到本书所讲的原则都不适用的程度。</p></blockquote><p>One of the special embedded problems is the target-hardware bottleneck. When embedded code is structured without applying clean architecture principles and practices, you will often face the scenario in which you can test your code only on the target. If the target is the only place where testing is possible, the target-hardware bottleneck will slow you down.</p><blockquote><p>标硬件瓶颈（target-hardware bottleneck）是嵌入式开发所特有的一个问题，如果我们没有采用某种清晰的架构来设计嵌入式系统的代码结构，就经常会面临只能在目标系统平台上测试代码的难题。如果只能在特定的平台上测试代码，那么这一定会拖慢项目的开发进度。</p></blockquote><h3 id="A-CLEAN-EMBEDDED-ARCHITECTURE-IS-A-TESTABLE-EMBEDDED-ARCHITECTURE-整洁的嵌入式架构就是可测试的嵌入式架构"><a href="#A-CLEAN-EMBEDDED-ARCHITECTURE-IS-A-TESTABLE-EMBEDDED-ARCHITECTURE-整洁的嵌入式架构就是可测试的嵌入式架构" class="headerlink" title="A CLEAN EMBEDDED ARCHITECTURE IS A TESTABLE EMBEDDED ARCHITECTURE 整洁的嵌入式架构就是可测试的嵌入式架构"></a>A CLEAN EMBEDDED ARCHITECTURE IS A TESTABLE EMBEDDED ARCHITECTURE 整洁的嵌入式架构就是可测试的嵌入式架构</h3><p>Let’s see how to apply some of the architectural principles to embedded software and firmware to help you eliminate the target-hardware bottleneck.</p><blockquote><p>下面，我们来看一下具体应如何将架构设计的原则应用在嵌入式软件和固件上，以避免陷入目标硬件瓶颈。</p></blockquote><h3 id="Layers-分层"><a href="#Layers-分层" class="headerlink" title="Layers 分层"></a>Layers 分层</h3><p>Layering comes in many flavors. Let’s start with three layers, as shown in Figure 29.1. At the bottom, there is the hardware. As Doug warns us, due to technology advances and Moore’s law, the hardware will change. Parts become obsolete, and new parts use less power or provide better performance or are cheaper. Whatever the reason, as an embedded engineer, I don’t want to have a bigger job than is necessary when the inevitable hardware change finally happens.</p><blockquote><p>分层可以有很多种方式，这里先按图 29.1 所示的设计将系统分成三层。首先，底层是硬件层。正如 Doug 警告我们的那样，由于科技的进步与摩尔定律，硬件是一定会改变的。旧的硬件不见将会被淘汰，新的硬件部件可能耗电量更少，或者性能更好，或者价格更便宜。不管硬件更新的原因是什么，作为嵌入式工程师，我们都不会希望这些不可避免的硬件变动带来更多的工作量。</p></blockquote><p><Figures figure="29-1">Three layers</Figures></p><p>The separation between hardware and the rest of the system is a given—at least once the hardware is defined (Figure 29.2). Here is where the problems often begin when you are trying to pass the App-titude test. There is nothing that keeps hardware knowledge from polluting all the code. If you are not careful about where you put things and what one module is allowed to know about another module, the code will be very hard to change. I’m not just talking about when the hardware changes, but when the user asks for a change, or when a bug needs to be fixed.</p><blockquote><p>硬件与系统其他部分的分隔是既定的——至少在硬件设计完成之后如此（如图 29.2 所示）。这也是在我们试图通过程序适用测试之时往往会发生问题的地方。因为没有什么东西可以真正阻碍硬件实现细节污染到应用代码。如果我们在构建代码的时候不够小心，没有小心安排哪些模块之间可以互相依赖，代码很快就非常难以更改了。请注意，这里所说的变更不仅仅是指来自硬件的变更，还包括用户的功能性变更、修复代码中的 Bug。</p></blockquote><p><Figures figure="29-2">Hardware must be separated from the rest of the system</Figures></p><p>Software and firmware intermingling is an anti-pattern. Code exhibiting this anti-pattern will resist changes. In addition, changes will be dangerous, often leading to unintended consequences. Full regression tests of the whole system will be needed for minor changes. If you have not created externally instrumented tests, expect to get bored with manual tests—and then you can expect new bug reports.</p><blockquote><p>另外，软件与固件集成在一起也属于设计上的反模式（anti-pattern）。符合这种反模式的代码修改起来都会很困难。同时，这种代码也很危险，容易造成意外事故，这导致它经历任何微少的改动都需要进行完整的回归测试。如果没有完善的测试流程，那么你就等着无穷无尽的手工测试吧——同时还有纷沓而来的 Bug 报告。</p></blockquote><h3 id="The-Hardware-Is-a-Detail-硬件是实现细节"><a href="#The-Hardware-Is-a-Detail-硬件是实现细节" class="headerlink" title="The Hardware Is a Detail 硬件是实现细节"></a>The Hardware Is a Detail 硬件是实现细节</h3><p>The line between software and firmware is typically not so well defined as the line between code and hardware, as shown in Figure 29.3.</p><blockquote><p>软件与固件之间的边界往往没有代码与硬件之间的边界那么清晰，如图 29.3 所示。</p></blockquote><p><Figures figure="29-3">The line between software and firmware is a bit fuzzier than the line between code and hardware</Figures></p><p>One of your jobs as an embedded software developer is to firm up that line. The name of the boundary between the software and the firmware is the hardware abstraction layer (HAL) (Figure 29.4). This is not a new idea: It has been in PCs since the days before Windows.</p><blockquote><p>所以，我们的工作之一就是将这个边界定义得更清晰一些。软件与固件之间的边界被称为硬件抽象层（HAL），如图 29.4 所示。这不是一个新概念，它在 PC 上的存在甚至可以追溯到 Windows 诞生之前。</p></blockquote><p><Figures figure="29-4">The hardware abstraction layer</Figures></p><p>The HAL exists for the software that sits on top of it, and its API should be tailored to that software’s needs. As an example, the firmware can store bytes and arrays of bytes into flash memory. In contrast, the application needs to store and read name&#x2F;value pairs to some persistence mechanism. The software should not be concerned that the name&#x2F;value pairs are stored in flash memory, a spinning disk, the cloud, or core memory. The HAL provides a service, and it does not reveal to the software how it does it. The flash implementation is a detail that should be hidden from software.</p><blockquote><p>HAL 的存在是为了给它上层的软件提供服务，HAL 的 API 应该按照这些软件的需要来量身定做。例如，固件可以直接将字节和字节组存入闪存中。相比之下，软件需要的是从某种持久化平台保存和读取 name&#x2F;value 对信息，它不应该关心自己信息到底是被存储到闪存中、磁盘中、云端存储中，还是在内存中读取&#x2F;存储这些信息。总之，HAL 的作用是为软件部分提供一种服务，以便隐藏具体的实现细节。毕竟是专门针对闪存的实现代码是一种细节信息，它应该与软件部分隔离。</p></blockquote><p>As another example, an LED is tied to a GPIO bit. The firmware could provide access to the GPIO bits, where a HAL might provide Led_TurnOn(5). That is a pretty low-level hardware abstraction layer. Let’s consider raising the level of abstraction from a hardware perspective to the software&#x2F;product perspective. What is the LED indicating? Suppose that it indicated low battery power. At some level, the firmware (or a board support package) could provide Led_TurnOn(5), while the HAL provides Indicate_LowBattery(). You can see the HAL expressing services needed by the application. You can also see that layers may contain layers. It is more of a repeating fractal pattern than a limited set of predefined layers. The GPIO assignments are details that should be hidden from the software.</p><blockquote><p>我们再来看另一个例子：有一个 LED 被连接到一个 GPIO 比特位上。固件可以直接操作 GPIO 比特位，而 HAL 则会提供一个 Led_TurnOn(5) 数。这种硬件抽象层的层次是相当低的。现在，假设我们想将抽象层次从硬件层次提升到软件&#x2F;产品的层次。这时候就要弄清楚这个 LED 到底代表的是什么。假设它代表了电池电量不足，那么其固码（或该电路板的支持包）可能就会负责提供 Led_TurnOn(5) 函数，而 HAL 则负责提供 Indicate_LowBattery() 函数。由此可见，HAL 层是按照应用程序的需要来提供服务的。同时，我们也能看出来系统的每一个分层中都可以包含许多分层。相对于之前的固定分层法，这里更像是一种无限分层模式。总之，GPIO 位的对应关系应该是一个具体的实现细节，它应该与软件部分隔离。</p></blockquote><h3 id="DON’T-REVEAL-HARDWARE-DETAILS-TO-THE-USER-OF-THE-HAL-不要向-HAL-的用户暴露硬件细节"><a href="#DON’T-REVEAL-HARDWARE-DETAILS-TO-THE-USER-OF-THE-HAL-不要向-HAL-的用户暴露硬件细节" class="headerlink" title="DON’T REVEAL HARDWARE DETAILS TO THE USER OF THE HAL 不要向 HAL 的用户暴露硬件细节"></a>DON’T REVEAL HARDWARE DETAILS TO THE USER OF THE HAL 不要向 HAL 的用户暴露硬件细节</h3><p>A clean embedded architecture’s software is testable off the target hardware. A successful HAL provides that seam or set of substitution points that facilitate off-target testing.</p><blockquote><p>依照整洁的嵌入式架构所建构的软件应该是可以脱离目标硬件平台来进行测试的。因为设计合理的 HAL 可以为我们脱离硬件平台的测试提供相应的支撑。</p></blockquote><h3 id="The-Processor-Is-a-Detail"><a href="#The-Processor-Is-a-Detail" class="headerlink" title="The Processor Is a Detail"></a>The Processor Is a Detail</h3><p>When your embedded application uses a specialized tool chain, it will often provide header files to <code>&lt;i&gt;</code>help you<code>&lt;/i&gt;</code>.4 These compilers often take liberties with the C language, adding new keywords to access their processor features. The code will look like C, but it is no longer C.</p><blockquote><p>当我们的嵌入式应用依赖于某种特殊的工具链时，该工具链通常会为我们提供一些“<code>&lt;i&gt;帮助&lt;/i&gt;</code>“性质的头文件。这些编译器往往会自带一些基于 C 语言的扩展库，并添加一些用于访问特殊功能的关键词。这会导致这些程序的代码看起来仍然用的是 C 语言，但实际上它们已经不是 C 语言了。</p></blockquote><p>Sometimes vendor-supplied C compilers provide what look like global variables to give access directly to processor registers, IO ports, clock timers, IO bits, interrupt controllers, and other processor functions. It is helpful to get access to these things easily, but realize that any of your code that uses these helpful facilities is no longer C. It won’t compile for another processor, or maybe even with a different compiler for the same processor.</p><blockquote><p>有时候，这些嵌入式应用的提供商所指定的 C 编译器还会提供类似于全局变量的功能，以便我们直接访问寄存器、I&#x2F;O 端口、时钟信息、I&#x2F;O 位、中断控制器以及其他处理器函数，这些函数会极大地方便我们对相关硬件的访问。但请注意，一旦你在代码中使用了这些函数，你写的就不再是 C 语言程序，它就不能用其他编译器来编译了，甚至可能连同一个处理器的不同编译器也不行。</p></blockquote><p>I would hate to think that the silicon and tool provider is being cynical, tying your product to the compiler. Let’s give the provider the benefit of a doubt by assuming that it is truly trying to help. But now it’s up to you to use that help in a way that does not hurt in the future. You will have to limit which files are allowed to know about the C extensions.</p><blockquote><p>我不想说这是提供商故意给我们设置的陷阱，即便我们假设这些硬件提供商这样做真的是为了“帮助”我们，我们自己也要知道如何来利用这些“帮助”，这才是问题的关键。为避免自己的代码在未来出现问题，我们就必须限制这些 C 扩展的使用范围。</p></blockquote><p>Let’s look at this header file designed for the ACME family of DSPs—you know, the ones used by Wile E. Coyote:</p><blockquote><p>下面来看一下针对 ACME DSP（数字信号处理器）系统设计的头文件——While E Coyote 采用的就是这个系统：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _ACME_STD_TYPES</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _ACME_STD_TYPES</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_ACME_X42)</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span>        Uint_32;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">short</span>      Uint_16;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span>       Uint_8;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">int</span>                 Int_32;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">short</span>               Int_16;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">char</span>                Int_8;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(_ACME_A42)</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span>       Uint_32;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span>        Uint_16;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span>       Uint_8;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">long</span>                Int_32;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">int</span>                 Int_16;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">char</span>                Int_8;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">error</span> <span class="string">&lt;acmetypes.h&gt;</span> is not supported for this environment</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>The acmetypes.h header file should not be used directly. If you do, your code gets tied to one of the ACME DSPs. You are using an ACME DSP, you say, so what is the harm? You can’t compile your code unless you include this header. If you use the header and define <code>__ACME_X42</code> or <code>__ACME_A42</code>, your integers will be the wrong size if you try to test your code off-target. If that is not bad enough, one day you’ll want to port your application to another processor, and you will have made that task much more difficult by not choosing portability and by not limiting what files know about ACME.</p><blockquote><p>该 <code>acmetypes.h</code> 头文件通常不应该直接使用。因为如果这样做的话，代码就和某个 ACME DSP 绑定在一起了。这时候你可能会问，我们在这里写代码不就是为了使用 ACME DSP 吗？不引用这个头文件如何编译代码呢？但如果引用了这个头文件，就等于同时定义了 <code>__ACME_X42</code> 和 <code>__ACME_A42</code>，那么我们的代码在平台之外进行测试的时候整数类型的大小就会是错误的。更糟糕的是，有一天当我们想将代码迁移到另外一个处理器上的时候，如果没有在这里限制 ACME 头文件被引用的范围，就会大大增加这项迁移工作的难度。</p></blockquote><p>Instead of using acmetypes.h, you should try to follow a more standardized path and use stdint.h. But what if the target compiler does not provide stdint.h? You can write this header file. The stdint.h you write for target builds uses the acmetypes.h for target compiles like this:</p><blockquote><p>因此在这里，我们应该用标准的 <code>stdint.h</code> 来替代 <code>acmetypes.h</code>。如果目标编译器没有提供 <code>stdint.h</code> 的话，我们可以自己写一个。例如，下面就是一个针对目标编译器的，可以用 <code>acmetypes.h</code> 来构建目标的自定义 <code>stdint.h</code>：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _STDINT_H_#<span class="keyword">define</span> _STDINT_H_#<span class="keyword">include</span> <span class="string">&lt;acmetypes.h&gt;</span>typedef Uint_32 uint32_t;typedef Uint_16 uint16_t;typedef Uint_8  uint8_t;typedef Int_32  int32_t;typedef Int_16  int16_t;typedef Int_8   int8_t;#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>Having your embedded software and firmware use stdint.h helps keep your code clean and portable. Certainly, all of the software should be processor independent, but not all of the firmware can be. This next code snippet takes advantage of special extensions to C that gives your code access to the peripherals in the micro-controller. It’s likely your product uses this micro-controller so that you can use its integrated peripherals. This function outputs a line that says “hi” to the serial output port. (This example is based on real code from the wild.)</p><blockquote><p>使用 <code>stdint.h</code> 来编写嵌入式的软件和固件，你的代码会是整洁且可移植的。当然，我们应该让所有的软件都独立于处理器，但这并不是所有固件都可以做到的。下面这段代码使用了特殊的 C 扩展来访问微处理器的配件，这样做的目的很可能就是为了使用这个配件。这个函数的作用就是输出一行”hi”到串口。（该例子来自于一个真实项目。）</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">say_hi</span><span class="params">()</span>&#123;  IE = <span class="number">0b11000000</span>;  SBUF0 = (<span class="number">0x68</span>);  <span class="keyword">while</span>(TI_0 == <span class="number">0</span>);  TI_0 = <span class="number">0</span>;  SBUF0 = (<span class="number">0x69</span>);  <span class="keyword">while</span>(TI_0 == <span class="number">0</span>);  TI_0 = <span class="number">0</span>;  SBUF0 = (<span class="number">0x0a</span>);  <span class="keyword">while</span>(TI_0 == <span class="number">0</span>);  TI_0 = <span class="number">0</span>;  SBUF0 = (<span class="number">0x0d</span>);  <span class="keyword">while</span>(TI_0 == <span class="number">0</span>);  TI_0 = <span class="number">0</span>;  IE = <span class="number">0b11010000</span>;&#125;</span><br></pre></td></tr></table></figure><p>There are lots of problems with this small function. One thing that might jump out at you is the presence of 0b11000000. This binary notation is cool; can C do that? Unfortunately, no. A few other problems relate to this code directly using the custom C extensions:</p><blockquote><p>这个小函数中存在大量的问题。首先，你注意到的可能就是 <code>0b11000000</code>。二进制表示法的确很酷，但 C 语言支持它吗？并不支持。另外还有一些问题也与 C 语言的扩展有关。</p></blockquote><p>IE: Interrupt enable bits.</p><p>SBUF0: Serial output buffer.</p><p>TI_0: Serial transmit buffer empty interrupt. Reading a 1 indicates the buffer is empty.</p><blockquote><p>IE：设置中断比特位。</p><p>SBUF0：串口输出缓冲区。</p><p>TI_0：串口传输区空中断。读取到 1 表明缓冲区为空。</p></blockquote><p>The uppercase variables actually access micro-controller built-in peripherals. If you want to control interrupts and output characters, you must use these peripherals. Yes, this is convenient—but it’s not C.</p><blockquote><p>这些名字大写的变量实际上都是用来访问微处理器的内置部件的。如果我们需要控制中断并且输出字符，就必须使用这些部件，它们也确实很方便——但这不是 C 代码。</p></blockquote><p>A clean embedded architecture would use these device access registers directly in very few places and confine them totally to the firmware. Anything that knows about these registers becomes firmware and is consequently bound to the silicon. Tying code to the processor will hurt you when you want to get code working before you have stable hardware. It will also hurt you when you move your embedded application to a new processor.</p><blockquote><p>在整洁的嵌入式架构中，我们会将这些用于设备访问的寄存器访问集中在一起，并将其限制在固件层中。这样一来，任何需要知道这些寄存器值的代码都必须成为固件代码，与硬件实现绑定。一旦这些代码与处理器实现强绑定，那么在处理器稳定工作之前它们是无法工作的，并且在需要将其迁移到一个新处理器上时也会遇到麻烦。</p></blockquote><p>If you use a micro-controller like this, your firmware could isolate these low-level functions with some form of a processor abstraction layer (PAL). Firmware above the PAL could be tested off-target, making it a little less firm.</p><blockquote><p>如果我们真的需要使用这种微处理器，固件就必须将这类底层函数隔离成处理器抽象层（PAL），这样一来，使用 PAL 的固件代码就可以在目标平台之外被测试了。</p></blockquote><h3 id="The-Operating-System-Is-a-Detail-操作系统是实现细节"><a href="#The-Operating-System-Is-a-Detail-操作系统是实现细节" class="headerlink" title="The Operating System Is a Detail 操作系统是实现细节"></a>The Operating System Is a Detail 操作系统是实现细节</h3><p>A HAL is necessary, but is it sufficient? In bare-metal embedded systems, a HAL may be all you need to keep your code from getting too addicted to the operating environment. But what about embedded systems that use a real-time operating system (RTOS) or some embedded version of Linux or Windows?</p><blockquote><p>HAL 的必要性是不言而喻的，但光有 HAL 就够了吗？在裸机的嵌入式系统中，HAL 的确可能可以保证我们的代码不会和运行环境绑定得太紧密。但如果嵌入式系统使用了某种实时操作系统（RTOS），或者某种嵌入式的 Linux 或 Windows 呢？</p></blockquote><p>To give your embedded code a good chance at a long life, you have to treat the operating system as a detail and protect against OS dependencies.</p><blockquote><p>为了延长代码的生命周期，我们必须将操作系统也定义为实现细节，让代码避免与操作系统层产生依赖。</p></blockquote><p>The software accesses the services of the operating environment through the OS. The OS is a layer separating the software from firmware (Figure 29.5). Using an OS directly can cause problems. For example, what if your RTOS supplier is bought by another company and the royalties go up, or the quality goes down? What if your needs change and your RTOS does not have the capabilities that you now require? You’ll have to change lots of code. These won’t just be simple syntactical changes due to the new OS’s API, but will likely have to adapt semantically to the new OS’s different capabilities and primitives.</p><blockquote><p>软件通过操作系统来访问运行环境服务。操作系统是将软件与固件隔离的那一层（见图 29.5），直接使用操作系统服务可能会带来问题。例如，如果更换了 RTOS 操作系统厂商，授权费用提高，或者质量下降怎么办？如果需求发生变化，RTOS 无法满足怎么办？很多代码都需要变动，不仅要更改语法适应新操作系统 API，很有可能需要重新适应新操作系统的语义与原语。</p></blockquote><p><Figures figure="29-5">Adding in an operating system</Figures></p><p>A clean embedded architecture isolates software from the operating system, through an operating system abstraction layer (OSAL) (Figure 29.6). In some cases, implementing this layer might be as simple as changing the name of a function. In other cases, it might involve wrapping several functions together.</p><blockquote><p>整洁的嵌入式架构会引入操作系统抽象层（OSAL，如图 29.6 所示），将软件与操作系统分割开。在某些情况下，实现这个抽象层就像给函数改个名字那么简单。而在另一些情况下，则需要将几个函数封装在一起。</p></blockquote><p><Figures figure="29-6">The operating system abstraction layer</Figures></p><p>If you have ever moved your software from one RTOS to another, you know it is painful. If your software depended on an OSAL instead of the OS directly, you would largely be writing a new OSAL that is compatible with the old OSAL. Which would you rather do: modify a bunch of complex existing code, or write new code to a defined interface and behavior? This is not a trick question. I choose the latter.</p><blockquote><p>如果你有迁移过 RTOS 系统的经历，就一定知道那有多痛苦。如果我们能让自己的软件依赖于 OSAL，而不是直接依赖于操作系统，我们就只需要写一个兼容以前的 OSAL 实现的新版本即可。你觉得哪一种方式更好？是修改一堆复杂的现有代码，还是按照接口和行为定义来写一套新代码？这里显而易见，后者更好。</p></blockquote><p>You might start worrying about code bloat about now. Really, though, the layer becomes the place where much of the duplication around using an OS is isolated. This duplication does not have to impose a big overhead. If you define an OSAL, you can also encourage your applications to have a common structure. You might provide message passing mechanisms, rather than having every thread handcraft its concurrency model.</p><blockquote><p>当然，我们可能会担心代码膨胀的问题。但是，其实上面这种分层已经将因为使用操作系统所带来的重复性代码隔离开了，因此这种重复不一定会带来很大的额外负担。而且，如果我们定义了 OSAL，还可以让自己的应用共享一种公用结构。比如采用一套标准的消息传递机制，这样每个线程就不用自己定义一个并行模型了。</p></blockquote><p>The OSAL can help provide test points so that the valuable application code in the software layer can be tested off-target and off-OS. A clean embedded architecture’s software is testable off the target operating system. A successful OSAL provides that seam or set of substitution points that facilitate off-target testing.</p><blockquote><p>另外，OSAL 还可以帮助高价值的应用程序实现在目标平台、目标操作系统之外进行测试。一个由整洁的嵌入式架构所构建出来的软件是可以在目标操作系统之外被测试的。设计良好的 OSAL 会为这种目标环境外的测试提供支撑点。</p></blockquote><h3 id="PROGRAMMING-TO-INTERFACES-AND-SUBSTITUTABILITY-面向接口编程与可替代性"><a href="#PROGRAMMING-TO-INTERFACES-AND-SUBSTITUTABILITY-面向接口编程与可替代性" class="headerlink" title="PROGRAMMING TO INTERFACES AND SUBSTITUTABILITY 面向接口编程与可替代性"></a>PROGRAMMING TO INTERFACES AND SUBSTITUTABILITY 面向接口编程与可替代性</h3><p>In addition to adding a HAL and potentially an OSAL inside each of the major layers (software, OS, firmware, and hardware), you can—and should—apply the principles described throughout this book. These principles encourage separation of concerns, programming to interfaces, and substitutability.</p><blockquote><p>除了在嵌入式系统的主要分层（指软件、操作系统、固件、硬件这四层）之中增加 HAL 和 OSAL 之外，我们还可以——也应该——应用本书中提到的其他设计原则。这些设计原则可以帮助我们按功能模块、接口编程以及可替代性来划分系统。</p></blockquote><p>The idea of a layered architecture is built on the idea of programming to interfaces. When one module interacts with another though an interface, you can substitute one service provider for another. Many readers will have written their own small version of printf for deployment in the target. As long as the interface to your printf is the same as the standard version of printf, you can override the service one for the other.</p><blockquote><p>分层架构的理念是基于接口编程的理念来设计的。当模块之间能以接口形式交互时，我们就可以将一个服务替换成另外一个服务。例如，很多读者应该都写过能在某个目标机器上运行的、小型的自定义的 printf 函数。只要我们的 printf 与标准的 printf 函数接口一致，它们就可以互相替换。</p></blockquote><p>One basic rule of thumb is to use header files as interface definitions. When you do so, however, you have to be careful about what goes in the header file. Limit header file contents to function declarations as well as the constants and struct names that are needed by the function.</p><blockquote><p>目前的普适规则之一就是用头丈件来充当接口的定义。然而，如果真的要这样做的话，就需要小心控制头文件中的内容，尽量确保头文件中只包括函数声明，以及函数所需要的结构体名字和常量。</p></blockquote><p>Don’t clutter the interface header files with data structures, constants, and typedefs that are needed by only the implementation. It’s not just a matter of clutter: That clutter will lead to unwanted dependencies. Limit the visibility of the implementation details. Expect the implementation details to change. The fewer places where code knows the details, the fewer places where code will have to be tracked down and modified.</p><blockquote><p>另外，不要在定义接口的头文件中包含只有具体实现代码才需要的数据结构、常量以及类型定义（typedef）。这不仅仅是架构是否整洁的问题，而是这样做可能会导致意外的依赖关系。总之，我们必须控制好实现细节的可见性，因为这些实现细节是肯定会变化的。关注实现细节的代码越少，它们所需的变更就越少。</p></blockquote><p>A clean embedded architecture is testable within the layers because modules interact through interfaces. Each interface provides that seam or substitution point that facilitates off-target testing.</p><blockquote><p>由整洁的嵌入式架构所构建的系统应该在每一个分层中都是可测试的，因为它的模块之间采用接口通信，每一个接口都为平台之外的测试提供了替换点。</p></blockquote><h3 id="DRY-CONDITIONAL-COMPILATION-DIRECTIVES-DRY-条件性编译命令"><a href="#DRY-CONDITIONAL-COMPILATION-DIRECTIVES-DRY-条件性编译命令" class="headerlink" title="DRY CONDITIONAL COMPILATION DIRECTIVES DRY 条件性编译命令"></a>DRY CONDITIONAL COMPILATION DIRECTIVES DRY 条件性编译命令</h3><p>One use of substitutability that is often overlooked relates to how embedded C and C++ programs handle different targets or operating systems. There is a tendency to use conditional compilation to turn on and off segments of code. I recall one especially problematic case where the statement #ifdef BOARD_V2 was mentioned several thousand times in a telecom application.</p><blockquote><p>另一个经常被忽视的可替代换性规则的实际案例是嵌入式 C&#x2F;C++ 程序对不同平台和操作系统的处理方式。这些程序经常会用条件性编译命令来根据不同的平台启用和禁用某一段代码。例如，我曾经遇到过 <code>#ifdef BOARD_V2</code> 这条语句在一个电信应用程序中出现了几千次的情况。</p></blockquote><p>This repetition of code violates the Don’t Repeat Yourself (DRY) principle.5 If I see #ifdef BOARD_V2 once, it’s not really a problem. Six thousand times is an extreme problem. Conditional compilation identifying the target-hardware’s type is often repeated in embedded systems. But what else can we do?</p><blockquote><p>很显然，这种代码的重复违背了“不要重复自己（DRY）”原则。如果 <code>#ifdef BOARD_V2</code> 只出现一次，这当然不是什么问题，而如果出现了 6000 次，那就非常严重了。但这类条件性编译语句在嵌入式编程中非常常见，有什么好的解决方案吗？</p></blockquote><p>What if there is a hardware abstraction layer? The hardware type would become a detail hidden under the HAL. If the HAL provides a set of interfaces, instead of using conditional compilation, we could use the linker or some form of runtime binding to connect the software to the hardware.</p><blockquote><p>使用硬件抽象层如何？这样的话，硬件类型就只是 HAL 中的一个实现细节了。而且，如果系统中使用的是 HAL 所提供的一系列接口，而不是条件性编译语句，那么我们就可以用链接器，或者某种运行时加载器来将软件与硬件相结合了。</p></blockquote><h2 id="CONCLUSION-本章小结-27"><a href="#CONCLUSION-本章小结-27" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>People who are developing embedded software have a lot to learn from experiences outside of embedded software. If you are an embedded developer who has picked up this book, you will find a wealth of software development wisdom in the words and ideas.</p><blockquote><p>嵌入式编程人员应该多学习一些非嵌入式系统的编程经验。如果你从事的是嵌入式编程工作，相信你一定会从本章的建议中得到很多启发。</p></blockquote><p>Letting all code become firmware is not good for your product’s long-term health. Being able to test only in the target hardware is not good for your product’s long-term health. A clean embedded architecture is good for your product’s long-term health.</p><blockquote><p>为了让我们的产品能长期地保持健康，请别让你的代码都变成固件。如果一个系统的代码只能在目标硬件上测试，那么它的开发过程会变得非常艰难。总之，为产品的长期健康着想而采用一套整洁的嵌入式架构是很有必要的。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Part6-DETAILS-实现细节"><a href="#Part6-DETAILS-实现细节" class="headerlink" title="Part6. DETAILS 实现细节"></a>Part6. DETAILS 实现细节</h1><h1 id="Chap30-THE-DATABASE-IS-A-DETAIL-数据库只是实现细节"><a href="#Chap30-THE-DATABASE-IS-A-DETAIL-数据库只是实现细节" class="headerlink" title="Chap30. THE DATABASE IS A DETAIL 数据库只是实现细节"></a>Chap30. THE DATABASE IS A DETAIL 数据库只是实现细节</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN30.jpg"></p><p>From an architectural point of view, the database is a non-entity—it is a detail that does not rise to the level of an architectural element. Its relationship to the architecture of a software system is rather like the relationship of a doorknob to the architecture of your home.</p><blockquote><p>从系统架构的角度来看，数据库并不重要——它只是一个实现细节，在系统架构中并不占据重要角色。如果就数据库与整个系统架构的关系打个比方，它们之间就好比是门把手和整个房屋架构的关系。</p></blockquote><p>I realize that these are fighting words. Believe me, I’ve had the fight. So let me be clear: I am not talking about the data model. The structure you give to the data within your application is highly significant to the architecture of your system. But the database is not the data model. The database is piece of software. The database is a utility that provides access to the data. From the architecture’s point of view, that utility is irrelevant because it’s a low-level detail—a mechanism. And a good architect does not allow low-level mechanisms to pollute the system architecture.</p><blockquote><p>这个比喻肯定会招来非议。相信我，这种架我吵过很多次了。所以我在这里要把话说得清楚一点：这里讨论的不是数据模型。为应用程序中的数据设计结构，对于系统架构来说当然是很重要的，但是数据库并不是数据模型。数据库只是一款软件，是用来存取数据的工具。从系统架构的角度来看，工具通常是无关紧要的——因为这只是一个底层的实现细节，一种达成目标的手段。一个优秀的架构师是不会让实现细节污染整个系统架构的。</p></blockquote><h2 id="RELATIONAL-DATABASES-关系型数据库"><a href="#RELATIONAL-DATABASES-关系型数据库" class="headerlink" title="RELATIONAL DATABASES 关系型数据库"></a>RELATIONAL DATABASES 关系型数据库</h2><p>Edgar Codd defined the principles of relational databases in 1970. By the mid-1980s, the relational model had grown to become the dominant form of data storage. There was a good reason for this popularity: The relational model is elegant, disciplined, and robust. It is an excellent data storage and access technology.</p><blockquote><p>关系型数据库的基本原理是 Edgar Codd 在 1970 年定义的。到了 20 世纪 80 年代中期，这种关系模型已经成为数据存储设计的主流。由于关系模型优雅、自律、非常稳健，因此得到了非常广泛的应用。总之，关系型数据库是一种非常优秀的数据存储与访问技术。</p></blockquote><p>But no matter how brilliant, useful, and mathematically sound a technology it is, it is still just a technology. And that means it’s a detail.</p><blockquote><p>但不管关系型数据库的设计有多么有智慧，多么精巧，多么符合数学原理，它仍然也只是一种技术。换句话说，它终究只是一种实现细节。</p></blockquote><p>While relational tables may be convenient for certain forms of data access, there is nothing architecturally significant about arranging data into rows within tables. The use cases of your application should neither know nor care about such matters. Indeed, knowledge of the tabular structure of the data should be restricted to the lowest-level utility functions in the outer circles of the architecture.</p><blockquote><p>虽然关系型数据的表模型设计对某一类数据访问需要来说可能很方便，但是把数据按行组成表结构本身并没有什么系统架构意义上的重要性。应用程序的用例不应该知道，也不应该关心这么低层次的实现细节，需要了解数据表结构的代码应该被局限在系统架构的最外圈、最低层的工具函数中。</p></blockquote><p>Many data access frameworks allow database rows and tables to be passed around the system as objects. Allowing this is an architectural error. It couples the use cases, business rules, and in some cases even the UI to the relational structure of the data.</p><blockquote><p>很多数据访问框架允许将数据行和数据表以对象的形式在系统内部传递。这么做在系统架构上来说是完全错误的，这会导致程序的用例、业务逻辑、甚至 UI 与数据的关系模型相互绑定在一起。</p></blockquote><h2 id="WHY-ARE-DATABASE-SYSTEMS-SO-PREVALENT-为什么数据库系统如此流行"><a href="#WHY-ARE-DATABASE-SYSTEMS-SO-PREVALENT-为什么数据库系统如此流行" class="headerlink" title="WHY ARE DATABASE SYSTEMS SO PREVALENT? 为什么数据库系统如此流行"></a>WHY ARE DATABASE SYSTEMS SO PREVALENT? 为什么数据库系统如此流行</h2><p>Why are software systems and software enterprises dominated by database systems? What accounts for the preeminence of Oracle, MySQL, and SQL Server? In a word: disks.</p><blockquote><p>为什么数据库系统在软件系统和企业软件领域如此流行？ Oracle、MySQL 和 SQL Server 这些产品广泛流行的原因是什么？答案是硬盘。</p></blockquote><p>The rotating magnetic disk was the mainstay of data storage for five decades. Several generations of programmers have known no other form of data storage. Disk technology has grown from huge stacks of massive platters 48 inches in diameter that weighed thousands of pounds and held 20 megabytes, to single thin circles, 3 inches in diameter, that weigh just a few grams and hold a terabyte or more. It’s been a wild ride. And throughout that ride programmers have been plagued by one fatal trait of disk technology: Disks are slow.</p><blockquote><p>带有高速旋转的盘片，以磁感应方式读取数据的硬盘在过去五十年成为数据存储的主流手段，以至于最近几代软件工程师对其他类型的数据存储几乎一无所知。而且硬盘技术一直在发展，早先一大摞重达数吨的直径 48 英寸的盘片只能存储 20 兆字节，现在单个直径 3 英寸、重量仅仅几克的薄薄的一张硬盘就能存储上 TB 的数据。这发展得实在是太快了！但是在硬盘的整个发展过程中，程序员们始终被一个限制困扰着：磁盘的访问速度太慢了！</p></blockquote><p>On a disk, data is stored within circular tracks. Those tracks are divided into sectors that hold a convenient number of bytes, often 4K. Each platter may have hundreds of tracks, and there can be a dozen or so platters. If you want to read a particular byte off the disk, you have to move the head to the proper track, wait for the disk to rotate to the proper sector, read all 4K of that sector into RAM, and then index into that RAM buffer to get the byte you want. And all that takes time—milliseconds of times.</p><blockquote><p>在磁盘上，数据是按照环形轨道存储的。这些轨道又会进一步被划分成一系列扇区，这些扇区的大小通常是 4 KB。而每个盘片上都有几百条轨道，整个硬盘可能由十几个盘片组成。如果要从硬盘上读取某一个特定字节，需要将磁头挪到正确的轨道上，等待盘片旋转到正确的位置上，再将整个扇区读入内存中，从内存中查询对应的字节。这些过程当然需要时间，所以硬盘的访问速度一般在毫秒级。</p></blockquote><p>Milliseconds might not seem like a lot, but a millisecond is a million times longer than the cycle time of most processors. If that data was not on a disk, it could be accessed in nanoseconds, instead of milliseconds.</p><blockquote><p>毫秒级的速度看起来好像并不是很慢，但这已经比大多数处理器的速度慢一百万倍了。如果数据不在硬盘上，访问速度通常就通常是纳秒级，而不是毫秒级了。</p></blockquote><p>To mitigate the time delay imposed by disks, you need indexes, caches, and optimized query schemes; and you need some kind of regular means of representing the data so that these indexes, caches, and query schemes know what they are working with. In short, you need a data access and management system. Over the years these systems have split into two distinct kinds: file systems and relational database management systems (RDBMS).</p><blockquote><p>为了应对硬盘访问速度带来的限制，必须使用索引、缓存以及查询优化器等技术。同时，我们还需要一种数据的标准展现格式，以便让索引、缓存及查询优化器来使用。概括来说，我们需要的就是某种数据访问与管理系统。过去几十年内，业界逐渐发展出了两种截然不同的系统：文件系统与关系型数据库系统（RDBMS）。</p></blockquote><p>File systems are document based. They provide a natural and convenient way to store whole documents. They work well when you need to save and retrieve a set of documents by name, but they don’t offer a lot of help when you’re searching the content of those documents. It’s easy to find a file named login.c, but it’s hard, and slow, to find every .c file that has a variable named x in it.</p><blockquote><p>文件系统是基于文档格式的，它提供的是一种便于存储整个文档的方式。当需要按照名字存储数据和查找一系列文档时，文件系统很有用，但当我们需要检索文档内容时，它就没那么有用了。也就是说，我们在文件系统中查找一个名字为<code>login.c</code> 的文件很容易，但要检索出所有包括变量 x 的 <code>.c</code> 文件就很困难，速度也很慢。</p></blockquote><p>Database systems are content based. They provide a natural and convenient way to find records based on their content. They are very good at associating multiple records based on some bit of content that they all share. Unfortunately, they are rather poor at storing and retrieving opaque documents.</p><blockquote><p>而数据库系统则主要关注的是内容，它提供的是一种便于进行内容检索的存储方式。其最擅长的是根据某些共同属性而检索一系列记录。然而它对存储和访问内容不透明的文档的支持就没那么强了。</p></blockquote><p>Both of these systems organize the data on disk so that it can be stored and retrieved in as efficient a way as possible, given their particular access needs. Each has their own scheme for indexing and arranging the data. In addition, each eventually brings the relevant data into RAM, where it can be quickly manipulated.</p><blockquote><p>这两种系统都是为了优化磁盘存储而设计的，人们需要根据它们的特点来将数据组织成最便于访问的模式。每个系统都有一套索引和安排数据的方式。同时，每种系统最终都会将数据缓存在内存中，方便快速操作。</p></blockquote><h2 id="WHAT-IF-THERE-WERE-NO-DISK-假设磁盘不存在会怎样"><a href="#WHAT-IF-THERE-WERE-NO-DISK-假设磁盘不存在会怎样" class="headerlink" title="WHAT IF THERE WERE NO DISK? 假设磁盘不存在会怎样"></a>WHAT IF THERE WERE NO DISK? 假设磁盘不存在会怎样</h2><p>As prevalent as disks once were, they are now a dying breed. Soon they will have gone the way of tape drives, floppy drives, and CDs. They are being replaced by RAM.</p><blockquote><p>虽然硬盘现在还是很常见，但其实已经在走下坡路了。很快它们就会和磁带、软盘、CD 一样成为历史，RAM 正在替代一切。</p></blockquote><p>Ask yourself this question: When all the disks are gone, and all your data is stored in RAM, how will you organize that data? Will you organize it into tables and access it with SQL? Will you organize it into files and access it through a directory?</p><blockquote><p>现在，我们要来考虑一下：如果所有的数据都存在内存中，应该如何组织它们呢？需要按表格存储并且用 SQL 查询吗？需要用文件形式存储，然后按目录查找吗？</p></blockquote><p>Of course not. You’ll organize it into linked lists, trees, hash tables, stacks, queues, or any of the other myriad data structures, and you’ll access it using pointers or references—because that’s what programmers do.</p><blockquote><p>当然不，我们会将数据存储为链表、树、哈希表、堆栈、队列等各种各样的数据结构，然后用指针或者引用来访问这些数据——因为这对程序员来说是最自然的方式。</p></blockquote><p>In fact, if you think carefully about this issue, you’ll realize that this is what you already do. Even though the data is kept in a database or a file system, you read it into RAM and then you reorganize it, for your own convenience, into lists, sets, stacks, queues, trees, or whatever data structure meets your fancy. It is very unlikely that you leave the data in the form of files or tables.</p><blockquote><p>事实上，如果你再仔细想想，就会发现我们已经在这样做了。即使数据保存在数据库或者文件系统中，我们最终也会将其读取到内存中，并按照最方便的形式将其组织成列表、集合、堆栈、队列、树等各种数据结构，继续按文件和表格的形式来操作数据是非常少见的。</p></blockquote><h2 id="DETAILS-实现细节"><a href="#DETAILS-实现细节" class="headerlink" title="DETAILS 实现细节"></a>DETAILS 实现细节</h2><p>This reality is why I say that the database is a detail. It’s just a mechanism we use to move the data back and forth between the surface of the disk and RAM. The database is really nothing more than a big bucket of bits where we store our data on a long-term basis. But we seldom use the data in that form.</p><blockquote><p>上面所说的，就是为什么我们认为数据库只是一种实现细节的原因。数据库终究只是在硬盘与内存之间相互传输数据的一种手段而已，它真的可以被认为只是一个长期存储数据的、装满字节的大桶。我们通常并不会真的以这种形式来使用数据。</p></blockquote><p>Thus, from an architectural viewpoint, we should not care about the form that the data takes while it is on the surface of a rotating magnetic disk. Indeed, we should not acknowledge that the disk exists at all.</p><blockquote><p>因此，从系统架构的视角来看，真的不应该关系数据在旋转的磁盘表面上以什么样的格式存在。实际上，系统架构应该对磁盘本身的存在完全不关心。</p></blockquote><h2 id="BUT-WHAT-ABOUT-PERFORMANCE-但性能怎么办呢"><a href="#BUT-WHAT-ABOUT-PERFORMANCE-但性能怎么办呢" class="headerlink" title="BUT WHAT ABOUT PERFORMANCE? 但性能怎么办呢"></a>BUT WHAT ABOUT PERFORMANCE? 但性能怎么办呢</h2><p>Isn’t performance an architectural concern? Of course it is—but when it comes to data storage, it’s a concern that can be entirely encapsulated and separated from the business rules. Yes, we need to get the data in and out of the data store quickly, but that’s a low-level concern. We can address that concern with low-level data access mechanisms. It has nothing whatsoever to do with the overall architecture of our systems.</p><blockquote><p>性能难道不是系统架构的一个考量标准吗？当然是——但当问题涉及数据存储时，这方面的操作通常是被封装起来，隔离在业务逻辑之外的。也就是说，我们确实需要从数据存储中快速地存取数据，但这终究只是一个底层实现问题。我们完全可以在数据访问这一较低的层面上解决这个问题，而不需要让它与系统架构相关联。</p></blockquote><h2 id="ANECDOTE-一段轶事"><a href="#ANECDOTE-一段轶事" class="headerlink" title="ANECDOTE 一段轶事"></a>ANECDOTE 一段轶事</h2><p>In the late 1980s, I led a team of software engineers at a startup company that was trying to build and market a network management system that measured the communications integrity of T1 telecommunication lines. The system retrieved data from the devices at the endpoints of those lines, and then ran a series of predictive algorithms to detect and report problems.</p><blockquote><p>在 20 世纪 80 年代末，我曾在一家创业公司中带领一组软件工程师开发和推广一个用于监控 T1 线路通信质量的网络管理系统。该系统从 T1 线路两端的设备抓取数据，然后利用预测算法来检测和汇报问题。</p></blockquote><p>We were using UNIX platforms, and we stored our data in simple random access files. We had no need of a relational database because our data had few content-based relationships. It was better kept in trees and linked lists in those random access files. In short, we kept the data in a form that was most convenient to load into RAM where it could be manipulated.</p><blockquote><p>我们当时采用的是 UNIX 平台，并将数据存储成简单的可随机访问的格式。该项目当时也不需要用到关系型数据库，因为数据之间几乎没有内容之间的关系，用树以及链表的形式来存储数据就够了。简单来说，我们的数据存储格式是为了便于加载到内存中处理而设计的。</p></blockquote><p>We hired a marketing manager for this startup—a nice and knowledgeable guy. But he immediately told me that we had to have a relational database in the system. It wasn’t an option and it wasn’t an engineering issue—it was a marketing issue.</p><blockquote><p>创业公司后来招聘了一个市场推广经理 他人很好，知识也很全面。然而他告诉我的第一件事就是我们系统中必须有一个关系型数据库。这容不得商量，也不是一个工程问题——而是一个市场问题。</p></blockquote><p>This made no sense to me. Why in the world would I want to rearrange my linked lists and trees into a bunch of rows and tables accessed through SQL? Why would I introduce all the overhead and expense of a massive RDBMS when a simple random access file system was more than sufficient? So I fought him, tooth and nail.</p><blockquote><p>这对我来说很难接受，为什么我要将链表和树重新按照表格与行模式重组，并且用 SQL 方式存储呢？为什么我们要在随机访问文件系统已经足够用的情况下引入大型关系型数据库系统？所以我一直和他针锋相对，互不相让。</p></blockquote><p>We had a hardware engineer at this company who took up the RDBMS chant. He became convinced that our software system needed an RDBMS for technical reasons. He held meetings behind my back with the executives of the company, drawing stick figures on the whiteboard of a house balancing on a pole, and he would ask the executives, “Would you build a house on a pole?” His implied message was that an RDBMS that keeps its tables in random access files was somehow more reliable than the random access files that we were using.</p><blockquote><p>后来公司内有一位硬件工程师被关系型数据库大潮所感染：它坚信我们的软件系统在技术上有必要采用关系型数据库，他背着我召集了公司的管理层开会，在白板上画了一间用几根杆子支撑的房子，问道：“谁会会把房子建在几根杆子搭起来的地基上？”这背后的逻辑是：通过关系型数据库将数据存储于文件系统中，在某种程度上要比我们自己存储这些文件更可靠。</p></blockquote><p>I fought him. I fought the marketing guy. I stuck to my engineering principles in the face of incredible ignorance. I fought, and fought, and fought.</p><blockquote><p>我当然没有放弃，一直不停地和他还有市场部斗争到底。我誓死捍卫了自己的工程原则，不停地开会、斗争。</p></blockquote><p>In the end, the hardware developer was promoted over my head to become the software manager. In the end, they put a RDBMS into that poor system. And, in the end, they were absolutely right and I was wrong.</p><blockquote><p>最终，这位硬件工程师被提拔为软件开发经理，最终，系统中也加入了一个关系型数据库。最终，我不得不承认，他们是对的，而我是错的。</p></blockquote><p>Not for engineering reasons, mind you: I was right about that. I was right to fight against putting an RDBMS into the architectural core of the system. The reason I was wrong was because our customers expected us to have a relational database. They didn’t know what they would do with it. They didn’t have any realistic way of using the relational data in our system. But it didn’t matter: Our customers fully expected an RDBMS. It had become a check box item that all the software purchasers had on their list. There was no engineering rationale—rationality had nothing to do with it. It was an irrational, external, and entirely baseless need, but it was no less real.</p><blockquote><p>但这里说的不是软件工程问题：在这个问题上我仍然坚持自己没有错，在系统的核心架构中的确不应该引入关系型数据库。这里说我错了的原因，是因为我们的客户希望该系统中能有一个关系型数据库。他们其实也不知道为什么需要，因为他们自己是没有任何机会使用这个关系型数据库的。但这不是重点，问题的重点是我们的客户需要一个关系型数据库。它已经成为当时所有软件购买合同中的一个必选项。这背后毫无工程逻辑——是不理智的。但尽管它是不理智的、外行的、毫无根基的需求，但却是真实存在的。</p></blockquote><p>Where did that need come from? It originated from the highly effective marketing campaigns employed by the database vendors at the time. They had managed to convince high-level executives that their corporate “data assets” needed protection, and that the database systems they offered were the ideal means of providing that protection.</p><blockquote><p>这种需求是从哪里来的？其实是来自于当时数据库厂商非常有效的市场推广。他们说服了企业高管，他们的“数据资产”需要某种保护，数据库则提供了非常便捷的保护能力。</p></blockquote><p>We see the same kind of marketing campaigns today. The word “enterprise” and the notion of “Service-Oriented Architecture” have much more to do with marketing than with reality.</p><blockquote><p>直到今天我们也能看到这种市场宣传，譬如“企业级”“面向服务的架构”这样的措辞大部分都是市场宣传噱头，而跟实际的工程质量无关。</p></blockquote><p>What should I have done in that long-ago scenario? I should have bolted an RDBMS on the side of the system and provided some narrow and safe data access channel to it, while maintaining the random access files in the core of the system. What did I do? I quit and became a consultant.</p><blockquote><p>回头想想，我在这个场景中应该怎么做呢？事实上，我当时应该在系统的某个角落接上一个关系型数据库，在维持系统核心数据结构的同时给关系型数据库提供一些安全的、受限的数据访问方式。但我没这么做，我辞职了，干起了咨询这一行。</p></blockquote><h2 id="CONCLUSION-本章小结-28"><a href="#CONCLUSION-本章小结-28" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>The organizational structure of data, the data model, is architecturally significant. The technologies and systems that move data on and off a rotating magnetic surface are not. Relational database systems that force the data to be organized into tables and accessed with SQL have much more to do with the latter than with the former. The data is significant. The database is a detail.</p><blockquote><p>数据的组织结构，数据的模型，都是系统架构中的重要部分，但是从磁盘上存储、读取数据的机制和手段却没那么重要。关系型数据库强制我们将数据存储成表格并且以 SQL 访问，主要是为了后者。总而言之，数据本身很重要，但数据库系统仅仅是一个实现细节。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap31-THE-WEB-IS-A-DETAIL-Web-是实现细节"><a href="#Chap31-THE-WEB-IS-A-DETAIL-Web-是实现细节" class="headerlink" title="Chap31. THE WEB IS A DETAIL Web 是实现细节"></a>Chap31. THE WEB IS A DETAIL Web 是实现细节</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN31.jpg"></p><p>Were you a developer in the 1990s? Do you remember how the web changed everything? Do you remember how we looked at our old client–server architectures with disdain in the face of the shiny new technology of The Web?</p><blockquote><p>20 世纪 90 年代的时候，你已经是程序员了吗？还记得 Web 是如何改变一切的吗？你记得我们在有了崭新的 Web 技术之后，是如何鄙视那些老旧的客户端&#x2F;服务器架构的吗？</p></blockquote><p>Actually the web didn’t change anything. Or, at least, it shouldn’t have. The web is just the latest in a series of oscillations that our industry has gone through since the 1960s. These oscillations move back and forth between putting all the computer power in central servers and putting all computer power out at the terminals.</p><blockquote><p>然而，Web 技术事实上并没有改变任何东西，或者说它也没有能力改变任何东西。这一次 Web 热潮只是软件行业从 1960 年来经历的数次震荡中的一次。这些振荡一会儿将全部计算资源集中在中央服务器上，一会儿又将计算资源分散到各个终端上。</p></blockquote><p>We’ve seen several of these oscillations just in the last decade or so since the web became prominent. At first we thought all the computer power would be in server farms, and the browsers would be stupid. Then we started putting applets in the browsers. But we didn’t like that, so we moved dynamic content back to the servers. But then we didn’t like that, so we invented Web 2.0 and moved lots of processing back into the browser with Ajax and JavaScript. We went so far as to create whole huge applications written to execute in the browsers. And now we’re all excited about pulling that JavaScript back into the server with Node.</p><blockquote><p>事实上，在过去十年内，或者说自 Web 技术被普遍应用以来，这样的振荡也发生了几次。一开始我们以为计算资源应该集中在服务器集群中，浏览器应该保持简单。但随后我们又开始在浏览器中引入 Applets-再后来我们又改了主意，发明了 Web 2.0，用 Ajax 和 JavaScript 将很多计算过程挪回浏览器中。我们先是非常兴奋地将整个应用程序挪到浏览器去执行，后来又非常开心地采用 Node 技术将那些 JavaScript 代码挪回服务器上执行。</p></blockquote><p>(Sigh.)</p><blockquote><p>一声叹息!</p></blockquote><h2 id="THE-ENDLESS-PENDULUM-无尽的钟摆"><a href="#THE-ENDLESS-PENDULUM-无尽的钟摆" class="headerlink" title="THE ENDLESS PENDULUM 无尽的钟摆"></a>THE ENDLESS PENDULUM 无尽的钟摆</h2><p>Of course, it would be incorrect to think that those oscillations started with the web. Before the web, there was client–server architecture. Before that, there were central minicomputers with arrays of dumb terminals. Before that, there were mainframes with smart green-screen terminals (that were very much analogous to modern-day browsers). Before that, there were computer rooms and punched cards …</p><blockquote><p>当然，这些振荡也不是从 Web 技术开始的。在 Web 出现之前，这种振荡在客户端&#x2F;服务器架构中就很普遍。再往前，就是中央小型机&#x2F;瘦终端的模型（这里的瘦终端和现在我们所谓的现代浏览器非常相似）。再往前则是大型计算机与打孔卡……</p></blockquote><p>And so the story goes. We can’t seem to figure out where we want the computer power. We go back and forth between centralizing it and distributing it. And, I imagine, those oscillations will continue for some time to come.</p><blockquote><p>而且这样的故事还会继续下去，我们似乎永远也决定不了应该将计算资源放在哪里。我们不停地在集中式和分布式之间来回切换。看起来，这样的震荡还要再持续一段时间。</p></blockquote><p>When you look at it in the overall scope of IT history, the web didn’t change anything at all. The web was simply one of many oscillations in a struggle that began before most of us were born and will continue well after most of us have retired.</p><blockquote><p>但从 IT 技术发展历史的整体来看，我们会发现 Web 技术的出现并没有改变任何东西。Web 技术的热潮只是在这个早于我们出生，也肯定会超过我们职业生涯的振荡周期中的一瞬间。</p></blockquote><p>As architects, though, we have to look at the long term. Those oscillations are just short-term issues that we want to push away from the central core of our business rules.</p><blockquote><p>而且作为一名系统架构师，我们应该把眼光放长远一点，这些震荡只是端期问题，不应该把它们放在系统的核心业务逻辑中来考虑。</p></blockquote><p>Let me tell you the story of company Q. Company Q built a very popular personal finance system. It was a desktop app with a very useful GUI. I loved using it.</p><blockquote><p>下面，我们来聊聊 Q 公司的故事。该公司构建了一个非常流行的个人财务系统，这是一个 GUI 很好用的桌面程序，我很喜欢它。</p></blockquote><p>Then came the web. In its next release, company Q changed the GUI to look, and behave, like a browser. I was thunderstruck! What marketing genius decided that personal finance software, running on a desktop, should have the look and feel of a web browser?</p><blockquote><p>然后 Web 技术的热潮到来了，Q 公司打算在下一个版本中将该系统的 GUI 改成了浏览器风格。这真是犹如晴天霹雳！究竟是市场部哪位“大神”决定要让一个桌面版的个人财务软件展示浏览器风格的呢？</p></blockquote><p>Of course, I hated the new interface. Apparently everyone else did, too—because after a few releases, company Q gradually removed the browser-like feel and turned its personal finance system back into a regular desktop GUI.</p><blockquote><p>我当然非常痛恨新的 UI，显然其他人也这么认为——因此在随后的几个版本里，Q 公司又逐渐将浏览器相关的设计从界面中去掉了，最终这个软件又回到正常的桌面 UI 模式。</p></blockquote><p>Now imagine you were a software architect at Q. Imagine that some marketing genius convinces upper management that the whole UI has to change to look more like the web. What do you do? Or, rather, what should you have done before this point to protect your application from that marketing genius?</p><blockquote><p>假设你是 Q 公司的软件架构师，市场人员说服了高层管理者，要将整个 UI 重新设计为“Web”版。你应该怎么办？换句话说，在这类事情发生之前，我们应该提前做好哪方面的准备，才能应对这种无厘头的要求？</p></blockquote><p>You should have decoupled your business rules from your UI. I don’t know whether the Q architects had done that. One day I’d love to hear their story. Had I been there at the time, I certainly would have lobbied very hard to isolate the business rules from the GUI, because you never know what the marketing geniuses will do next.</p><blockquote><p>我们应该做的就是将业务规则与 UI 解耦。我不知道 Q 公司的软件架构师是否是这么做的，我也很想了解他们的故事。如果当时我在，我一定会全力游说他们将业务逻辑与 UI 解耦，因为谁知道市场推广人员接下来会想出什么好点子？</p></blockquote><p>Now consider company A, which makes a lovely smartphone. Recently it released an upgraded version of its “operating system” (it’s so strange that we can talk about the operating system inside a phone). Among other things, that “operating system” upgrade completely changed the look and feel of all the applications. Why? Some marketing genius said so, I suppose.</p><blockquote><p>再说一下 A 公司的故事，他们的产品是智能手机。最近他们发布了一个“操作系统”的升级版（谈论一个手机的操作系统本身就够奇怪的了！）。抛去别的改动不说，这次“操作系统”的更新大幅修改了各种应用程序的外观。为什么？估计是因为市场部某位“大神”的要求吧。</p></blockquote><p>I’m not an expert on the software within that device, so I don’t know if that change caused any significant difficulties for the programmers of the apps that run in company A’s phone. I do hope the architects at A, and the architects of the apps, keep their UI and business rules isolated from each other, because there are always marketing geniuses out there just waiting to pounce on the next little bit of coupling you create.</p><blockquote><p>我不了解这个设备中软件的细节，所以不知道这次改动是否显著影响了那些给 A 公司的手机开发应用程序的人。我只能希望 A 公司的系统架构师，以及应用程序的系统架构师能将 UI 和业务逻辑分离，因为这些市场推广人员是不会错过这里任何一丁点儿的耦合关系的。</p></blockquote><h2 id="THE-UPSHOT-总结一下"><a href="#THE-UPSHOT-总结一下" class="headerlink" title="THE UPSHOT 总结一下"></a>THE UPSHOT 总结一下</h2><p>The upshot is simply this: The GUI is a detail. The web is a GUI. So the web is a detail. And, as an architect, you want to put details like that behind boundaries that keep them separate from your core business logic.</p><blockquote><p>将上面的故事总结成一句话，就是：GUI 只是一个实现细节。而 Web 则是 GUI 的一种，所以也是一个实现细节。作为一名软件架构师，我们需要将这类细节与核心业务逻辑隔离开来。</p></blockquote><p>Think about it this way: The WEB is an IO device. In the 1960s, we learned the value of writing applications that were device independent. The motivation for that independence has not changed. The web is not an exception to that rule.</p><blockquote><p>其实我们可以这样考虑这个问题：Web 只是一种 I&#x2F;O 设备。早在 20 世纪 60 年代，我们就已经了解编写设备无关应用程序的重要性。这种独立性的重要性至今仍然没有变化，Web 也不例外。</p></blockquote><p>Or is it? The argument can be made that a GUI, like the web, is so unique and rich that it is absurd to pursue a device-independent architecture. When you think about the intricacies of JavaScript validation or drag-and-drop AJAX calls, or any of the plethora of other widgets and gadgets you can put on a web page, it’s easy to argue that device independence is impractical.</p><blockquote><p>是这样的吗？有人可能会辩称 Web 这样的 GUI 是非常特殊的，它能力强大，强大到让我们追求设备无关的架构变得毫无意义。当我们考虑到 JavaScript 数据校验的复杂程度、可拖拽的 Ajax 调用，以及无数可以轻松引入的设计组件时，很容易认为追求设备无关性是不现实的。</p></blockquote><p>To some extent, this is true. The interaction between the application and the GUI is “chatty” in ways that are quite specific to the kind of GUI you have. The dance between a browser and a web application is different from the dance between a desktop GUI and its application. Trying to abstract out that dance, the way devices are abstracted out of UNIX, seems unlikely to be possible.</p><blockquote><p>从某种程度上来说，的确如此。应用程序和 GUI 之间的频繁交互的确是与 GUI 的类型密切相关的。浏览器与 Web 应用之间的交互模式也的确与桌面客户端&#x2F;服务器之间的交互模式区别很大。想要让浏览器上的 Web 操作模仿我们在 UNIX 中对 I&#x2F;O 设备那样的操作，将其抽象成界面交互模型几乎是不可能的。</p></blockquote><p>But another boundary between the UI and the application can be abstracted. The business logic can be thought of as a suite of use cases, each of which performs some function on behalf of a user. Each use case can be described based on the input data, the processing preformed, and the output data.</p><blockquote><p>但我们其实可以从 UI 和应用程序之间的另一条边界出发来进行抽象化。因为业务逻辑可以被视为是一组用例的集合。而每个用例都是以用户的身份来执行某种操作的，所以它们都可以用输入数据、处理过程以及输出数据这个流程来描述。</p></blockquote><p>At some point in the dance between the UI and the application, the input data can be said to be complete, allowing the use case to be executed. Upon completion, the resultant data can be fed back into the dance between the UI and the application.</p><blockquote><p>也就是说，在 UI 和应用程序之间的某一点上，输入数据会被认为达到了一个完整状态，然后用例就被允许进入执行阶段了。在用例执行完之后，其生成的返回数据又继续在 UI 与应用程序之间传递。</p></blockquote><p>The complete input data and the resultant output data can be placed into data structures and used as the input values and output values for a process that executes the use case. With this approach, we can consider each use case to be operating the IO device of the UI in a device-independent manner.</p><blockquote><p>这样一来，完整的输入数据，以及完整的输出数据就可以被标准化为数据结构，并提供给执行用例的进程了。通过这种方法，我们就可以认为用例都是以设备无关的方式在操作 I&#x2F;O 设备。</p></blockquote><h2 id="CONCLUSION-本章小结-29"><a href="#CONCLUSION-本章小结-29" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>This kind of abstraction is not easy, and it will likely take several iterations to get just right. But it is possible. And since the world is full of marketing geniuses, it’s not hard to make the case that it’s often very necessary.</p><blockquote><p>这种抽象化处理并不容易，很有可能需要经历几个来回才能找到正确的方向，但这是完全可行的。由于世界上最不缺少的就是市场“大神”，很多时候做这些事情还真的是非常有必要的。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap32-FRAMEWORKS-ARE-DETAILS-应用程序框架是实现细节"><a href="#Chap32-FRAMEWORKS-ARE-DETAILS-应用程序框架是实现细节" class="headerlink" title="Chap32. FRAMEWORKS ARE DETAILS 应用程序框架是实现细节"></a>Chap32. FRAMEWORKS ARE DETAILS 应用程序框架是实现细节</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN32.jpg"></p><p>Frameworks have become quite popular. Generally speaking, this is a good thing. There are many frameworks out there that are free, powerful, and useful.</p><blockquote><p>应用程序框架现在非常流行，这在通常情况下是一件好事。许多框架都非常有效，非常有用，而且是免费的。</p></blockquote><p>However, frameworks are not architectures—though some try to be.</p><blockquote><p>但框架并不等同于系统架构——尽管有些框架确实以此为目标。</p></blockquote><h2 id="FRAMEWORK-AUTHORS-框架作者"><a href="#FRAMEWORK-AUTHORS-框架作者" class="headerlink" title="FRAMEWORK AUTHORS 框架作者"></a>FRAMEWORK AUTHORS 框架作者</h2><p>Most framework authors offer their work for free because they want to be helpful to the community. They want to give back. This is laudable. However, regardless of their high-minded motives, those authors do not have your best interests at heart. They can’t, because they don’t know you, and they don’t know your problems.</p><blockquote><p>大部分框架的作者愿意免费提供自己的工作成果，是因为他们想要帮助整个社群，想要回馈社会。这值得鼓励，但不管这些作者的动机有多么高尚，恐怕也并没有提供针对你个人的最佳方案。即使他们想，也做不到，因为他们并不了解你，也不了解你遇到的问题。</p></blockquote><p>Framework authors know their own problems, and the problems of their coworkers and friends. And they write their frameworks to solve those problems—not yours.</p><blockquote><p>这些框架作者所了解的都是他们自己遇到的问题，可能还包括亲戚朋友所遇到的。他们创造框架的目的是解决这些问题——而不是解决你遇到的问题。</p></blockquote><p>Of course, your problems will likely overlap with those other problems quite a bit. If this were not the case, frameworks would not be so popular. To the extent that such overlap exists, frameworks can be very useful indeed.</p><blockquote><p>当然，你所遇到的问题可能和其他人遇到的大体上一致。如果不是这样，框架也就不会那么流行了。正是由于这种重合性的存在，框架才这么有用。</p></blockquote><h2 id="ASYMMETRIC-MARRIAGE-单向婚姻"><a href="#ASYMMETRIC-MARRIAGE-单向婚姻" class="headerlink" title="ASYMMETRIC MARRIAGE 单向婚姻"></a>ASYMMETRIC MARRIAGE 单向婚姻</h2><p>The relationship between you and the framework author is extraordinarily asymmetric. You must make a huge commitment to the framework, but the framework author makes no commitment to you whatsoever.</p><blockquote><p>我们与框架作者之间的关系是非常不对等的。我们要采用某个框架就意味着自己要遵守一大堆约定，但框架作者却完全不需要为我们遵守什么约定。</p></blockquote><p>Think about this point carefully. When you use a framework, you read through the documentation that the author of that framework provides. In that documentation, the author, and other users of that framework, advise you on how to integrate your software with the framework. Typically, this means wrapping your architecture around that framework. The author recommends that you derive from the framework’s base classes, and import the framework’s facilities into your business objects. The author urges you to couple your application to the framework as tightly as possible.</p><blockquote><p>请仔细想想这一关系，当我们决定采用一个框架时，就需要完整地阅读框架作者提供的文档。在这个文档中，框架作者和框架其他用户对我们提出进行应用整合的一些建议。一般来说，这些建议就是在要求我们围绕着该框架来设计自己的系统架构。譬如，框架作者会建议我们基于框架中的基类来创建一些派生类，并在业务对象中引入一些框架的工具。框架作者还会不停地催促我们将应用与框架结合得越紧密越好。</p></blockquote><p>For the framework author, coupling to his or her own framework is not a risk. The author wants to couple to that framework, because the author has absolute control over that framework.</p><blockquote><p>对框架作者来说，应用程序与自己的框架耦合是没有风险的。毕竟作为作者，他们对框架有绝对的控制权，强耦合是应该的。</p></blockquote><p>What’s more, the author wants you to couple to the framework, because once coupled in this way, it is very hard to break away. Nothing feels more validating to a framework author than a bunch of users willing to inextricably derive from the author’s base classes.</p><blockquote><p>与此同时，作者当然是非常希望让我们的应用与其框架紧密结合的，因为这意味着脱离框架会很困堆。作为框架作者来说，没有什么比让一堆用户心甘情愿地基于他的框架基类来构建派生类更自豪的事情了。</p></blockquote><p>In effect, the author is asking you to marry the framework—to make a huge, long-term commitment to that framework. And yet, under no circumstances will the author make a corresponding commitment to you. It’s a one-directional marriage. You take on all the risk and burden; the framework author takes on nothing at all.</p><blockquote><p>换句话说，框架作者想让我们与框架订终身——这相当于我们要对他们的框架做一个巨大而长期的承诺，而在任何情况下框架作者都不会对我们做出同样的承诺。这种婚姻是单向的。我们要承担所有的风险，而框架作者则没有任何风险。</p></blockquote><h2 id="THE-RISKS-风险"><a href="#THE-RISKS-风险" class="headerlink" title="THE RISKS 风险"></a>THE RISKS 风险</h2><p>What are the risks? Here are just a few for you to consider.</p><blockquote><p>那么我们要承担的风险究竟有哪些呢？我们可以想到的至少有以下这几项：</p></blockquote><ul><li>The architecture of the framework is often not very clean. Frameworks tend to violate the Dependency Rule. They ask you to inherit their code into your business objects—your Entities! They want their framework coupled into that innermost circle. Once in, that framework isn’t coming back out. The wedding ring is on your finger; and it’s going to stay there.</li><li>The framework may help you with some early features of your application. However, as your product matures, it may outgrow the facilities of the framework. If you’ve put on that wedding ring, you’ll find the framework fighting you more and more as time passes.</li><li>The framework may evolve in a direction that you don’t find helpful. You may be stuck upgrading to new versions that don’t help you. You may even find old features, which you made use of, disappearing or changing in ways that are difficult for you to keep up with.</li><li>A new and better framework may come along that you wish you could switch to.</li></ul><hr><blockquote><ul><li>框架自身的架构设计很多时候并不是特别正确的。框架本身可能经常违反依赖关系原则。譬如，框架可能会要求我们将代码引入到业务对象中——甚至是业务实体中。框架可能会想要我们将框架耦合在最内圈代码中。而我们一旦引入，就再也不会离开该框架了，这就像戴上结婚戒指一样，从此一生不离不弃了。</li><li>框架可能会帮助我们实现一些应用程序的早期功能，但随着产品的成熟，功能要求很可能超出框架所能提供的范围。而且随着时间的推移，我们也会发现在应用的开发过程中，自己与框架斗争的时间要比框架帮助我们的时间长得多。</li><li>框架本身可能朝着我们不需要的方向演进。也许我们会被迫升级到一个并不需要的新版本，甚至会发现自己之前所使用的旧功能突然消失了，或悄悄改变了行为。</li><li>未来我们可能会想要切换到一个更新、更好的框架上。</li></ul></blockquote><h2 id="THE-SOLUTION-解决方案"><a href="#THE-SOLUTION-解决方案" class="headerlink" title="THE SOLUTION 解决方案"></a>THE SOLUTION 解决方案</h2><p>What is the solution?</p><blockquote><p>解决方案是什么呢？</p></blockquote><p>Don’t marry the framework!</p><blockquote><p>请不要嫁给框架</p></blockquote><p>Oh, you can use the framework—just don’t couple to it. Keep it at arm’s length. Treat the framework as a detail that belongs in one of the outer circles of the architecture. Don’t let it into the inner circles.</p><blockquote><p>我们可以使用框架——但要时刻警惕，别被它拖住。我们应该将框架作为架构最外圈的一个实现细节来使用，不要让它们进入内圈。</p></blockquote><p>If the framework wants you to derive your business objects from its base classes, say no! Derive proxies instead, and keep those proxies in components that are plugins to your business rules.</p><blockquote><p>如果框架要求我们根据它们的基类来创建派生类，就请不要这样做！我们可以创造一些代理类，同时把这些代理类当作业务逻辑的插件来管理。</p></blockquote><p>Don’t let frameworks into your core code. Instead, integrate them into components that plug in to your core code, following the Dependency Rule.</p><blockquote><p>另外，不要让框架污染我们的核心代码，应该依据依赖关系原则，将它们当作核心代码的插件来管理。</p></blockquote><p>For example, maybe you like Spring. Spring is a good dependency injection framework. Maybe you use Spring to auto-wire your dependencies. That’s fine, but you should not sprinkle @autowired annotations all throughout your business objects. Your business objects should not know about Spring.</p><blockquote><p>以 Spring 为例，它作为一个依赖注入框架是不错的，也许我们会需要用 Spnng 来自动连接应用程序中的各种依赖关系。这不要紧，但是千万别在业务对象里到处写 <code>@autowired</code> 注解。业务对象应该对 Spring 完全不知情才对。</p></blockquote><p>Instead, you can use Spring to inject dependencies into your Main component. It’s OK for Main to know about Spring since Main is the dirtiest, lowest-level component in the architecture.</p><blockquote><p>反之，我们也可以利用 Spring 将依赖关系注入到 Main 组件中，毕竟 Main 组件作为系统架构中最低层、依赖最多的组件，它依赖于 Spring 并不是问题。</p></blockquote><h2 id="I-NOW-PRONOUNCE-YOU-…-不得不接受的依赖"><a href="#I-NOW-PRONOUNCE-YOU-…-不得不接受的依赖" class="headerlink" title="I NOW PRONOUNCE YOU … 不得不接受的依赖"></a>I NOW PRONOUNCE YOU … 不得不接受的依赖</h2><p>There are some frameworks that you simply must marry. If you are using C++, for example, you will likely have to marry STL—it’s hard to avoid. If you are using Java, you will almost certainly have to marry the standard library.</p><blockquote><p>有一些框架是避免不了使用的。例如，如果你在用 C++，那么 STL 就是很难避免使用的。如果你在用 Java，那么标准类库也是不太可能避免使用的。</p></blockquote><p>That’s normal—but it should still be a decision. You must understand that when you marry a framework to your application, you will be stuck with that framework for the rest of the life cycle of that application. For better or for worse, in sickness and in health, for richer, for poorer, forsaking all others, you will be using that framework. This is not a commitment to be entered into lightly.</p><blockquote><p>这很正常——但这仍然应该是你主动选择的结果。你必须明白，如果一旦在项目中引入一个框架，很有可能在整个生命周期中都要依赖于它，不管后来情形怎么变化，这个决定都很难更改了。因此，不应该草率地做出决定。</p></blockquote><h2 id="CONCLUSION-本章小结-30"><a href="#CONCLUSION-本章小结-30" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>When faced with a framework, try not to marry it right away. See if there aren’t ways to date it for a while before you take the plunge. Keep the framework behind an architectural boundary if at all possible, for as long as possible. Perhaps you can find a way to get the milk without buying the cow.</p><blockquote><p>总而言之。当我们面临框架选择时，尽量不要草率地做出决定。在全身心投入之前，应该首先看看是否可以部分地采用以增加了解。另外，请尽可能长时间地将框架留在架构边界之外，越久越好。因为谁知道呢，也许你可以不用买奶牛也能喝到牛奶。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap33-CASE-STUDY-VIDEO-SALES-案例分析：视频销售网站"><a href="#Chap33-CASE-STUDY-VIDEO-SALES-案例分析：视频销售网站" class="headerlink" title="Chap33. CASE STUDY: VIDEO SALES 案例分析：视频销售网站"></a>Chap33. CASE STUDY: VIDEO SALES 案例分析：视频销售网站</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN33.jpg"></p><p>Now it’s time to put these rules and thoughts about architecture together into a case study. This case study will be short and simple, yet will depict both the process a good architect uses and the decisions that such an architect makes.</p><blockquote><p>现在是时候将所有的这些设计规则和架构理念整合起来了。下面，我们来做一次案财析，这个案例分析虽然很简短，但可以描述清楚一个优秀的系统架构师在设计过程和设计决策中应该如何行事。</p></blockquote><h2 id="THE-PRODUCT-产品"><a href="#THE-PRODUCT-产品" class="headerlink" title="THE PRODUCT 产品"></a>THE PRODUCT 产品</h2><p>For this case study, I’ve chosen a product with which I am rather intimately familiar: the software for a website that sells videos. Of course, it is reminiscent of cleancoders.com, the site where I sell my software tutorial videos.</p><blockquote><p>在这个案例分析中，我要讲的是一个我自己很熟悉的产品：线上收费视频网站。当然，这个有点像 <code>cleancoders.com</code>，我在这个网站上出售我的软件开发教程视频。</p></blockquote><p>The basic idea is trivial. We have a batch of videos we want to sell. We sell them, on the web, to both individuals and businesses. Individuals can pay one price to stream the videos, and another, higher price to download those videos and own them permanently. Business licenses are streaming only, and are purchased in batches that allow quantity discounts.</p><blockquote><p>这个案例的设计很简单，就是我们打算向一些个人或者企业提供一批收费的线上教学视频。个人用户既可以选择在线支付之后直接在线观看视频，也可以选择付一笔更高的费用将视频下载到本地，永久地拥有它们。而企业用户就只能在线播放，但他们可以选择批量购买，以此来获得一定折扣。</p></blockquote><p>Individuals typically act as both the viewers and the purchasers. Businesses, in contrast, often have people who buy the videos that other people will watch.</p><blockquote><p>个人用户通常既是购买者又是观看者。而企业用户则不同，他们购买视频通常是用来给其他人观看的。</p></blockquote><p>Video authors need to supply their video files, written descriptions, and ancillary files with exams, problems, solutions, source code, and other materials.</p><blockquote><p>视频作者需要负责上传视频文件、写简介，并且提供视频附带的一系列习题、课后作业、答案、源代码以及其他各类资料。</p></blockquote><p>Administrators need to add new video series, add and delete videos to and from the series, and establish prices for various licenses.</p><blockquote><p>管理员需要负责增加新的视频播放列表，往视频播放列表里添加和删除视频，并且为各种许可类型设置价格。</p></blockquote><p>Our first step in determining the initial architecture of the system is to identify the actors and use cases.</p><blockquote><p>系统架构设计中的第一步，是识别系统中的各种角色和用例。</p></blockquote><h2 id="USE-CASE-ANALYSIS-用例分析"><a href="#USE-CASE-ANALYSIS-用例分析" class="headerlink" title="USE CASE ANALYSIS 用例分析"></a>USE CASE ANALYSIS 用例分析</h2><p>Figure 33.1 shows a typical use-case analysis.</p><blockquote><p>下面，我们通过图 33.1 来示范一次典型的用例分析。</p></blockquote><p><Figures figure="33-1">A typical use-case analysis</Figures></p><p>The four main actors are evident. According to the Single Responsibility Principle, these four actors will be the four primary sources of change for the system. Every time some new feature is added, or some existing feature is changed, that step will be taken to serve one of these actors. Therefore we want to partition the system such that a change to one actor does not affect any of the other actors.</p><blockquote><p>如你所见，图中显然存在着四个角色。根据单一职责原则（SRP），这四个角色将成为系统变更的主要驱动力。每当添加新功能，或者修改现有功能时，我们所做的一切都是在为这些角色服务。所以我们希望能够对系统进行分区处理，避免其中一个角色的变更需求影响其他角色。</p></blockquote><p>The use cases shown in Figure 33.1 are not a complete list. For example, you won’t find log-in or log-out use cases. The reason for this omission is simply to manage the size of the problem in this book. If I were to include all the different use cases, then this chapter would have to turn into a book in its own right.</p><blockquote><p>另外，图 33.1 中的用例并不是一个完整的列表。例如，这里没有分析用于执行登录、注销的用例。省略它们的原因很简单，为了控制本书篇幅。如果列出所有的用例，这一章就会变成一本单独的书了。</p></blockquote><p>Note the dashed use cases in the center of Figure 33.1. They are abstract1 use cases. An abstract use case is one that sets a general policy that another use case will flesh out. As you can see, the View Catalog as Viewer and View Catalog as Purchaser use cases both inherit from the View Catalog abstract use case.</p><blockquote><p>读者应该注意到图 33.1 中还有一些用虚线框起来的用例。我们称之为抽象用例，它们通常用来负责设置通用策略，然后交由其他具体用例来使用。譬如在该图“查看目录”这个用例同时被“购买者查看目录”和“观看者查看目录”这两个用例所继承并实现。</p></blockquote><p>On the one hand, it was not strictly necessary for me to create that abstraction. I could have left the abstract use case out of the diagram without compromising any of the features of the overall product. On the other hand, these two use cases are so similar that I thought it wise to recognize the similarity and find a way to unify it early in the analysis.</p><blockquote><p>一方面来说，其实这种抽象并不是必需的。如果没有这一层拥象：整个产品并不会受到影响；但是另一方面来说，由于这两个用例十分相近，我认为以某种方式来将它们合并起来分析是很合理的。</p></blockquote><h2 id="COMPONENT-ARCHITECTURE-组件架构"><a href="#COMPONENT-ARCHITECTURE-组件架构" class="headerlink" title="COMPONENT ARCHITECTURE 组件架构"></a>COMPONENT ARCHITECTURE 组件架构</h2><p>Now that we know the actors and use cases, we can create a preliminary component architecture (Figure 33.2).</p><blockquote><p>既然我们弄清楚了系统中的各种角色和用例，接下来就可以构造一个初步的组件架构图了（如图 33.2 所示）。</p></blockquote><p>The double lines in the drawing represent architectural boundaries as usual. You can see the typical partitioning of views, presenters, interactors, and controllers. You can also see that I’ve broken each of those categories up by their corresponding actors.</p><blockquote><p>在该图中，双实线代表了系统架构边界。可以看到这里将系统划分成视图、展示器、交互器以及控制器这几个组件，同时也按照对应的系统角色进行了分组。</p></blockquote><p>Each of the components in Figure 33.2 represents a potential .jar file or .dll file. Each of those components will contain the views, presenters, interactors, and controllers that have been allocated to it.</p><blockquote><p>图 33.2 中的每一个组件都对应着一个潜在的 .jar 文件或 .dll 文件。每一个组件都会包含归属于它的视图、展示器、交互器、控制器文件。</p></blockquote><p>Note the special components for the Catalog View and the Catalog Presenter. This is how I dealt with the abstract View Catalog use case. I assume that those views and presenters will be coded into abstract classes within those components, and that the inheriting components will contain view and presenter classes that will inherit from those abstract classes.</p><blockquote><p>值得注意的是，这里有两个特殊的组件：目录视图（Catalog View）和目录展示器（Catalog Presenter）。这就是我应对查看目录列表这个抽象用例的方法。我假设这些视图和展示器将会被编写为抽象类，而继承它们的组件将会包括它们的派生类。</p></blockquote><p><Figures figure="33-2">A preliminary component architecture</Figures></p><p>Would I really break the system up into all these components, and deliver them as .jar or .dll files? Yes and no. I would certainly break the compile and build environment up this way, so that I could build independent deliverables like that. I would also reserve the right to combine all those deliverables into a smaller number of deliverables if necessary. For example, given the partitioning in Figure 33.2, it would be easy to combine them into five .jar files—one for views, presenters, interactors, controllers, and utilities, respectively. I could then independently deploy the components that are most likely to change independently of each other.</p><blockquote><p>但问题是，我们真的需要将系统拆分成这么多组件，然后以 .jar 或 .dll 文件的形式一个个交付吗？是，又不全是。我们确实要按照组件将编译和构建环境分开，以便单独构建对应的组件。但我们仍然可以考虑将所有的交付单元组合起来交付，例如，根据图 33.2 中的分组，我们可以很简单地将它们交付为 5 个 .jar 文件——视图、展示器、交互器、控制器和工具类，这样就可以分别单独部署这些被修改的组件了。</p></blockquote><p>Another possible grouping would be to put the views and presenters together into the same .jar file, and put the interactors, controllers, and utilities in their own .jar file. Still another, even more primitive, grouping would be to create two .jar files, with views and presenters in one file, and everything else in the other.</p><blockquote><p>除此之外，还有另一种分组方式，就是将视图和展示器放在同一个 .jar 文件中，而将交互器、控制器以及工具类各自放在独立的 .jar 文件中。还有一种更简单的方式，就是将视图和展示器放在一个 .jar 文件中，而将其他所有的组件合并为另一个 .jar 文件。</p></blockquote><p>Keeping these options open will allow us to adapt the way we deploy the system based on how the system changes over time.</p><blockquote><p>随着系统的演进，我们可以根据系统变更来调整部署方式。</p></blockquote><h2 id="DEPENDENCY-MANAGEMENT-依赖关系管理"><a href="#DEPENDENCY-MANAGEMENT-依赖关系管理" class="headerlink" title="DEPENDENCY MANAGEMENT 依赖关系管理"></a>DEPENDENCY MANAGEMENT 依赖关系管理</h2><p>The flow of control in Figure 33.2 proceeds from right to left. Input occurs at the controllers, and that input is processed into a result by the interactors. The presenters then format the results, and the views display those presentations.</p><blockquote><p>如你所见，图 33.2 中的控制流是从右向左的。输入发生在控制器端，然后输入的数据经交互器处理后交由展示器格式化出结果，最后由视图来展示这个结果。</p></blockquote><p>Notice that the arrows do not all flow from the right to the left. In fact, most of them point from left to right. This is because the architecture is following the Dependency Rule. All dependencies cross the boundary lines in one direction, and they always point toward the components containing the higher-level policy.</p><blockquote><p>请注意，图中的箭头并不是一直从右向左的。事实上大部分的箭头都是从左向右的。这是因为该架构设计要遵守依赖关系原则。所有跨域边界的依赖关系都应该是同一个方向，而且都指向包含更高级策略的组件。</p></blockquote><p>Also notice that the using relationships (open arrows) point with the flow of control, and that the inheritance relationships (closed arrows) point against the flow of control. This depicts our use of the Open–Closed Principle to make sure that the dependencies flow in the right direction, and that changes to low-level details do not ripple upward to affect high-level policies.</p><blockquote><p>另外，还注意一下图中的“使用”关系（开放箭头），它和控制流方向是一致的：而”继承”关系（闭合箭头）则与之相反，它反映的是我们对开闭原则的应用，通过调整依赖关系，可以保证底层细节的变更不会影响到高层策略组件。</p></blockquote><h2 id="CONCLUSION-本章小结-31"><a href="#CONCLUSION-本章小结-31" class="headerlink" title="CONCLUSION 本章小结"></a>CONCLUSION 本章小结</h2><p>The architecture diagram in Figure 33.2 includes two dimensions of separation. The first is the separation of actors based on the Single Responsibility Principle; the second is the Dependency Rule. The goal of both is to separate components that change for different reasons, and at different rates. The different reasons correspond to the actors; the different rates correspond to the different levels of policy.</p><blockquote><p>图 33.2 中的架构实现的是两个维度上的隔离。第一个是根据单一职责原则对所使用的系统的各个角色进行了隔离，第二个则是对依赖关系原则的应用。这两个维度的隔离都是为了将不同变更原因和不同变更速率的组件分隔开来。譬如变更的原因不同是因为组件使用的角色不同，而变更速率则取决于组件所在的层级。</p></blockquote><p>Once you have structured the code this way, you can mix and match how you want to actually deploy the system. You can group the components into deployable deliverables in any way that makes sense, and easily change that grouping when conditions change.</p><blockquote><p>按照这样的方式组织代码的结构，我们就可以在部署时做灵活的选择。可以随时将组件整合部署，也可以在要求变化的时候灵活地调整。</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="Chap34-THE-MISSING-CHAPTER-拾遗"><a href="#Chap34-THE-MISSING-CHAPTER-拾遗" class="headerlink" title="Chap34. THE MISSING CHAPTER 拾遗"></a>Chap34. THE MISSING CHAPTER 拾遗</h1><p><img src="/../../images/books/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/CH-UN34.jpg"></p><p>By Simon Brown</p><p>All of the advice you’ve read so far will certainly help you design better software, composed of classes and components with well-defined boundaries, clear responsibilities, and controlled dependencies. But it turns out that the devil is in the implementation details, and it’s really easy to fall at the last hurdle if you don’t give that some thought, too.</p><blockquote><p>根据本书之前给出的所有建议，相信读者一定能够建构出具有良好边界设计的类和组件，以形成清晰的责任划分以及可控的依赖关系，设计出更好的软件了。但是困难之处往往在于细节之中，一旦疏忽，也有可能会对软件质量造成不良影响。</p></blockquote><p>Let’s imagine that we’re building an online book store, and one of the use cases we’ve been asked to implement is about customers being able to view the status of their orders. Although this is a Java example, the principles apply equally to other programming languages. Let’s put the Clean Architecture to one side for a moment and look at a number of approaches to design and code organization.</p><blockquote><p>下面我们再来看一个例子，假设正在构建一个在线书店，这个例子的任务是实现一个客户査看订单状态的用例，虽然这是一个 Java 程序的示例，但其所示范的原理适用于任何语言。现在，让我们暂时将整洁架构的概念放在一边，先来看一下如何具体安排代码设计和代码结构。</p></blockquote><h2 id="PACKAGE-BY-LAYER-按层封装"><a href="#PACKAGE-BY-LAYER-按层封装" class="headerlink" title="PACKAGE BY LAYER 按层封装"></a>PACKAGE BY LAYER 按层封装</h2><p>The first, and perhaps simplest, design approach is the traditional horizontal layered architecture, where we separate our code based on what it does from a technical perspective. This is often called “package by layer.” Figure 34.1 shows what this might look like as a UML class diagram.</p><blockquote><p>我们首先想到的，也可能是最简单的设计方式，就是传统的水平分层架构。在这个架构里，我们将代码从技术角度进行分类。这通常被称为“按层封装”。图 34.1 用 UML 类图展示了这种设计。</p></blockquote><p>In this typical layered architecture, we have one layer for the web code, one layer for our “business logic,” and one layer for persistence. In other words, code is sliced horizontally into layers, which are used as a way to group similar types of things. In a “strict layered architecture,” layers should depend only on the next adjacent lower layer. In Java, layers are typically implemented as packages. As you can see in Figure 34.1, all of the dependencies between layers (packages) point downward. In this example, we have the following Java types:</p><blockquote><p>在这种常见的分层架构中，Web 代码分为一层，业务逻辑分为一层，持久化是另外一层。换句话说，我们对代码进行了水平分层，相同类型的代码在一层。在“严格的分层架构”中，每一层只能对相邻的下层有依赖关系。在 Java 中，分层的概念通常是用包来表示的。如图 34.1 所示，所有的分层（包）之间的依赖关系都是指向下的。这里包括了以下 Java 类。</p></blockquote><ul><li>OrdersController: A web controller, something like a Spring MVC controller, that handles requests from the web.</li><li>OrdersService: An interface that defines the “business logic” related to orders.</li><li>OrdersServiceImpl: The implementation of the orders service.1</li><li>OrdersRepository: An interface that defines how we get access to persistent order information.</li><li>JdbcOrdersRepository: An implementation of the repository interface.</li></ul><hr><blockquote><ul><li>OrdersController：Web 控制器，类似 Spring MVC 控制器，负责处理 Web 请求。</li><li>OrderService：定义订单相关业务逻辑的接口。</li><li>OrderServicelmpl：Order 服务的具体实现</li><li>OrdersRepository：定义如何访问订单持久信息的接口。</li><li>JdbcOrderRepository：持久信息访问接口的实现。</li></ul></blockquote><p><Figures figure="34-1">Package by layer</Figures></p><p>In “Presentation Domain Data Layering,”2 Martin Fowler says that adopting such a layered architecture is a good way to get started. He’s not alone. Many of the books, tutorials, training courses, and sample code you’ll find will also point you down the path of creating a layered architecture. It’s a very quick way to get something up and running without a huge amount of complexity. The problem, as Martin points out, is that once your software grows in scale and complexity, you will quickly find that having three large buckets of code isn’t sufficient, and you will need to think about modularizing further.</p><blockquote><p>在 presentation Domain Data Layering 这篇文章中，Martin Fowler 声称釆用这种分层架构是初期一个不错选择。他的观点并不缺乏拥戴者。很多书籍、教程和代码示范都在教育你采用分层架构。这种方式在在项目初期之所以会很合适，是因为它不会过于复杂。但就像 Martin 指出的那样，一旦软件规模扩展了，我们很快就会发现将代码分为三大块并不够，需要进一步进行模块化。</p></blockquote><p>Another problem is that, as Uncle Bob has already said, a layered architecture doesn’t scream anything about the business domain. Put the code for two layered architectures, from two very different business domains, side by side and they will likely look eerily similar: web, services, and repositories. There’s also another huge problem with layered architectures, but we’ll get to that later.</p><blockquote><p>如 Bob 所说，这里还存在另外一个问题是，分层架构无法展现具体的业务领域信息。把两个不同业务领域的、但是都采用了分层架构的代码进行对比，你会发现它们的相似程度极高：都有 Web 层、服务层和数据仓库层。这是分层架构的另外一个问题，后文会具体讲述。</p></blockquote><h2 id="PACKAGE-BY-FEATURE-按功能封装"><a href="#PACKAGE-BY-FEATURE-按功能封装" class="headerlink" title="PACKAGE BY FEATURE 按功能封装"></a>PACKAGE BY FEATURE 按功能封装</h2><p>Another option for organizing your code is to adopt a “package by feature” style. This is a vertical slicing, based on related features, domain concepts, or aggregate roots (to use domain-driven design terminology). In the typical implementations that I’ve seen, all of the types are placed into a single Java package, which is named to reflect the concept that is being grouped.</p><blockquote><p>另外一种组织代码的形式是“按功能封装”，即垂直切分，根据相关的功能、业务概念或者聚合根（领域驱动设计原则中的术语）来切分。在常见的实现中，所有的类型都会放在一个相同的包中，以业务概念来命名。</p></blockquote><p>With this approach, as shown in Figure 34.2, we have the same interfaces and classes as before, but they are all placed into a single Java package rather than being split among three packages. This is a very simple refactoring from the “package by layer” style, but the top-level organization of the code now screams something about the business domain. We can now see that this code base has something to do with orders rather than the web, services, and repositories. Another benefit is that it’s potentially easier to find all of the code that you need to modify in the event that the “view orders” use case changes. It’s all sitting in a single Java package rather than being spread out.3</p><blockquote><p>图 34.2 展示了这种方式，类和接口与之前类似，但是相比之前，这次它们都被放到了同一个 Java 包中。相 比 “按层封装”，这只是一个小变化，但是现在顶层代码结构至少与业务领域有点相关了。我们可以看到这段代码是与订单有关的，而不是只能看到 Web、服务及数据访问。另外一个好处是，如果需要修改 “查看订单”这个业务用例，比较容易找到相关代码，毕竟它们都在一个包中，而不是分散在各处。</p></blockquote><p>I often see software development teams realize that they have problems with horizontal layering (“package by layer”) and switch to vertical layering (“package by feature”) instead. In my opinion, both are suboptimal. If you’ve read this book so far, you might be thinking that we can do much better—and you’re right.</p><blockquote><p>软件研发团队常常一开始采用水平分层方式（即 “按层封装”），遇到困难后再切换到垂直分层方式（即 “按功能封装”）。我认为，两种方式都很不好。看完本书，你应该意识到还有更好的分类方式——没错。</p></blockquote><p><Figures figure="34-2">Package by feature</Figures></p><h2 id="PORTS-AND-ADAPTERS-端口和适配器"><a href="#PORTS-AND-ADAPTERS-端口和适配器" class="headerlink" title="PORTS AND ADAPTERS 端口和适配器"></a>PORTS AND ADAPTERS 端口和适配器</h2><p>As Uncle Bob has said, approaches such as “ports and adapters,” the “hexagonal architecture,” “boundaries, controllers, entities,” and so on aim to create architectures where business&#x2F;domain-focused code is independent and separate from the technical implementation details such as frameworks and databases. To summarize, you often see such code bases being composed of an “inside” (domain) and an “outside” (infrastructure), as suggested in Figure 34.3.</p><blockquote><p>如 Bob 大叔所说，通过采用“端口和适配器”“六边形架构”“边界、控制器、实体”等，我们可以创造出一个业务领域代码与具体实现细节（数据库、框架等）隔离的架构。总结下来，如图 34.3 所示，我们可以区分出代码中的内部代码（领域，Domain）与外部代码（基础设施，Infrastructure）。</p></blockquote><p><Figures figure="34-3">A code base with an inside and an outside</Figures></p><p>The “inside” region contains all of the domain concepts, whereas the “outside” region contains the interactions with the outside world (e.g., UIs, databases, third-party integrations). The major rule here is that the “outside” depends on the “inside”—never the other way around. Figure 34.4 shows a version of how the “view orders” use case might be implemented.</p><blockquote><p>内部区域包含了所有的领域概念，而外部区域则包含了与外界交互的部分（例如 UI、数据库、第三方集成等）。这里主要的规则是，只有外部代码能依赖内部代码，反之则不能。图 34.4 展示了 “查看订单”这个业务用例是如何用这种方式实现的。</p></blockquote><p>The <code>com.mycompany.myapp.domain</code> package here is the “inside,” and the other packages are the “outside.” Notice how the dependencies flow toward the “inside.” The keen-eyed reader will notice that the OrdersRepository from previous diagrams has been renamed to simply be Orders. This comes from the world of domain-driven design, where the advice is that the naming of everything on the “inside” should be stated in terms of the “ubiquitous domain language.” To put that another way, we talk about “orders” when we’re having a discussion about the domain, not the “orders repository.”</p><blockquote><p>这里 <code>com.mycompnay.myapp.domain</code> 包是内部代码，另外一个包是外部代码。注意这里的依赖关系是由外向内的。眼尖的读者可以注意到之前的 OrderRepository 类现在被改名为 Orders。这个概念基于领域驱动设计理念，其中要求内部代码都应该用独特的领域语言来描述。换句话说，我们在业务领域里面讨论的应该是 Orders，而不是“OrdersRepository”。</p></blockquote><p><Figures figure="34-4">View orders use case</Figures></p><p>It’s also worth pointing out that this is a simplified version of what the UML class diagram might look like, because it’s missing things like interactors and objects to marshal the data across the dependency boundaries.</p><blockquote><p>值得注意的是，这里是 UML 类图的一个简化版，这里缺少了交互器，以及跨边界调用时对应的数据编码解码对象。</p></blockquote><h2 id="PACKAGE-BY-COMPONENT-按组件封装"><a href="#PACKAGE-BY-COMPONENT-按组件封装" class="headerlink" title="PACKAGE BY COMPONENT 按组件封装"></a>PACKAGE BY COMPONENT 按组件封装</h2><p>Although I agree wholeheartedly with the discussions about SOLID, REP, CCP, and CRP and most of the advice in this book, I come to a slightly different conclusion about how to organize code. So I’m going to present another option here, which I call “package by component.” To give you some background, I’ve spent most of my career building enterprise software, primarily in Java, across a number of different business domains. Those software systems have varied immensely, too. A large number have been web-based, but others have been client–server4, distributed, message-based, or something else. Although the technologies differed, the common theme was that the architecture for most of these software systems was based on a traditional layered architecture.</p><blockquote><p>虽然我对本书中的 SOLID、REP、CCP、CRP 以及其他大部分建议完全认同，我想提出对代码组织方式的一个不同看法——“按组件封装”。一些背景信息：在我的职业生涯中，我基于 Java 构建了大量不同领域的企业软件，这些软件系统要求各异。大部分系统都是基于 Web 的，也有一些是 CS 架构，或者是分布式架构的、基于消息的，或者其他的。虽然具体采用的技术不同，但大部分系统都是基于传统的分层架构的。</p></blockquote><p>I’ve already mentioned a couple of reasons why layered architectures should be considered bad, but that’s not the whole story. The purpose of a layered architecture is to separate code that has the same sort of function. Web stuff is separated from business logic, which is in turn separated from data access. As we saw from the UML class diagram, from an implementation perspective, a layer typically equates to a Java package. From a code accessibility perspective, for the OrdersController to be able to have a dependency on the OrdersService interface, the OrdersService interface needs to be marked as public, because they are in different packages. Likewise, the OrdersRepository interface needs to be marked as public so that it can be seen outside of the repository package, by the OrdersServiceImpl class.</p><blockquote><p>我已经给出一些分层架构不好的理由，但这还不是全部。分层架构设计的目的是将功能相似的代码进行分组。处理 Web 的代码应该与处理业务逻辑的代码分开，同时也与处理数据访问的代码分开。正如我们在 UML 类图中所见，从实现角度讲，层就是代表了 Java 包。从代码可访问性角度来讲，如果需要 OrdersController 依赖 OrderService 接口，那么这个接口必须设置为 public，因为它们在不同的包中。同样的，OrdersRepository 接口也需要设置为 public，这样才能被包外的类 OrdersServicelmple 使用。</p></blockquote><p>In a strict layered architecture, the dependency arrows should always point downward, with layers depending only on the next adjacent lower layer. This comes back to creating a nice, clean, acyclic dependency graph, which is achieved by introducing some rules about how elements in a code base should depend on each other. The big problem here is that we can cheat by introducing some undesirable dependencies, yet still create a nice, acyclic dependency graph.</p><blockquote><p>在严格分层的架构中，依赖指向的箭头应该永远向下，每一层只能依赖相邻的下一层。通过引入一些代码互相依赖的规则，我们就形成了一个干净、漂亮的单向依赖图。这里有一个大问题——只要通过引入一些不应该有的依赖来作弊，依然可以形成漂亮的单向依赖图。</p></blockquote><p>Suppose that you hire someone new who joins your team, and you give the newcomer another orders-related use case to implement. Since the person is new, he wants to make a big impression and get this use case implemented as quickly as possible. After sitting down with a cup of coffee for a few minutes, the newcomer discovers an existing OrdersController class, so he decides that’s where the code for the new orders-related web page should go. But it needs some orders data from the database. The newcomer has an epiphany: “Oh, there’s an OrdersRepository interface already built, too. I can simply dependency-inject the implementation into my controller. Perfect!” After a few more minutes of hacking, the web page is working. But the resulting UML diagram looks like Figure 34.5.</p><blockquote><p>假设新员工加入了团队，你给新人安排了一个订单相关的业务用例的实现任务。由于这个人刚刚入职，他想好好表现，尽快完成这项功能。粗略看过代码之后，新人发现了 OrdersController 这个类，于是他将新的订单相关的 Web 代码都塞了进去。但是这段代码需更从数据库查找一些订单数据。这时候这个新人灵机一动：“代码己经有了一个 OrdersRepository 接口，只需要将它用依赖注入框架引入控制器就行，我真机智！”几分钟之后，功能已经正常了，但是 UML 结构图变成了图 34.5 这样。</p></blockquote><p>The dependency arrows still point downward, but the OrdersController is now additionally bypassing the OrdersService for some use cases. This organization is often called a relaxed layered architecture, as layers are allowed to skip around their adjacent neighbor(s). In some situations, this is the intended outcome—if you’re trying to follow the CQRS5 pattern, for example. In many other cases, bypassing the business logic layer is undesirable, especially if that business logic is responsible for ensuring authorized access to individual records, for example.</p><blockquote><p>依赖关系箭头依然向下，但是现在 OrdersController 在某些情况下绕过了 OrderService 类。这种组织形式被称为宽松的分层采构，允许某些层跳过直接相邻的邻居。在有些情况下，这是意料之中的——例如，如果我们在遵循 CQRS 设计模式，这是合理的。但是更多的情况下，绕过业务逻辑层是不合理的，尤其是在业务逻辑层要控制权限的情况下。</p></blockquote><p>While the new use case works, it’s perhaps not implemented in the way that we were expecting. I see this happen a lot with teams that I visit as a consultant, and it’s usually revealed when teams start to visualize what their code base really looks like, often for the first time.</p><blockquote><p>虽然新的业务用例可以正常工作，但是它可能不是按照合理方式实现的。作为咨询师，我曾经见过很多团队出现这种情况，只有他们开始仔细观察自己的代码结构图时才会发现。</p></blockquote><p><Figures figure="34-5">Relaxed layered architecture</Figures></p><p>What we need here is a guideline—an architectural principle—that says something like, “Web controllers should never access repositories directly.” The question, of course, is enforcement. Many teams I’ve met simply say, “We enforce this principle through good discipline and code reviews, because we trust our developers.” This confidence is great to hear, but we all know what happens when budgets and deadlines start looming ever closer.</p><blockquote><p>这里我们有的其实只是一个规范——一个架构设计原则内容是“Web 控制器永远不应该直接访问数据层”。这里的核心问题当然是如何强制执行。我遇见的很多团队仅仅通过采用“自律”或者“代码评审”方式来执行，“我相信我的程序员”。有这种自信当然很好，但是我们都知道当预算缩减、工期临近的时候会发生什么事情。</p></blockquote><p>A far smaller number of teams tell me that they use static analysis tools (e.g., NDepend, Structure101, Checkstyle) to check and automatically enforce architecture violations at build time. You may have seen such rules yourself; they usually manifest themselves as regular expressions or wildcard strings that state “types in package <code>**/web</code> should not access types in <code>**/data</code>”; and they are executed after the compilation step.</p><blockquote><p>有一小部分团队告诉我，他们会采用静态分析工具（例如 Ndepend、Structure101、Checkstyle）来在构建阶段自动检查违反架构设计规则的代码。估计你见过这种代码，一般来说就是一段正则表达式，例如“包 <code>**/web</code> 下面的类型不允许访问 <code>**/data</code> 下面的类型”，这些检查在编译步骤之后执行。</p></blockquote><p>This approach is a little crude, but it can do the trick, reporting violations of the architecture principles that you’ve defined as a team and (you hope) failing the build. The problem with both approaches is that they are fallible, and the feedback loop is longer than it should be. If left unchecked, this practice can turn a code base into a “big ball of mud.”6 I’d personally like to use the compiler to enforce my architecture if at all possible.</p><blockquote><p>这种方式虽然简单粗暴，但是确实能起效果，可以锁定违反了团队定义的系统架构设计原则的情况，并且（理想情况下）导致构建失败。这两种方法的共同问题是容易出错，同时反馈循环时间太长了。如果不精心维护，整个代码库可能很快就变成“一团泥巴”。我个人更倾向选择能够让编译器执法的做法。</p></blockquote><p>This brings us to the “package by component” option. It’s a hybrid approach to everything we’ve seen so far, with the goal of bundling all of the responsibilities related to a single coarse-grained component into a single Java package. It’s about taking a service-centric view of a software system, which is something we’re seeing with micro-service architectures as well. In the same way that ports and adapters treat the web as just another delivery mechanism, “package by component” keeps the user interface separate from these coarse-grained components. Figure 34.6 shows what the “view orders” use case might look like.</p><blockquote><p>那么，看一下“按组件封装”的做法。这种做法混合了我们之前讲的所有的方法，目标是将一个粗粒度组件相关的所有类放入一个 Java 包中。这就像是以一种面向服务的视角来构建软件系统，与微服务架构类似。这里，就像端口和适配器模式将 Web 视为一种交付手段一样，“按组件封装”将 U1 与粗粒度组件分离。图 34.6 展示了“查看订单”这个用例的设计图。</p></blockquote><p>In essence, this approach bundles up the “business logic” and persistence code into a single thing, which I’m calling a “component.” Uncle Bob presented his definition of “component” earlier in the book, saying:</p><blockquote><p>总的来说，这种方式将“业务逻辑”与“持久化代码”合并在一起，称为“组件”，Bob 大叔在本书中对“组件”的定义如下：</p></blockquote><p>Components are the units of deployment. They are the smallest entities that can be deployed as part of a system. In Java, they are jar files.</p><blockquote><p>组件是部署单元。组件是系统中能够部署的最小单位，对应在 Java 里就是 jar 文件。</p></blockquote><p><Figures figure="34-6">View orders use case</Figures></p><p>My definition of a component is slightly different: “A grouping of related functionality behind a nice clean interface, which resides inside an execution environment like an application.” This definition comes from my “C4 software architecture model,”7 which is a simple hierarchical way to think about the static structures of a software system in terms of containers, components, and classes (or code). It says that a software system is made up of one or more containers (e.g., web applications, mobile apps, stand-alone applications, databases, file systems), each of which contains one or more components, which in turn are implemented by one or more classes (or code). Whether each component resides in a separate jar file is an orthogonal concern.</p><blockquote><p>我对组件的定义稍有不同：“在一个执行环境（应川程序）中的、一个干净、良好的接口背后的一系列相关功能的集合”。这个定义来自我的“C4 软件架构模型” 这个模里以一种层级模型讨论软件系统的静态结构，其中的概念包括容器、细件、类。这个模型认为，系统由一个或者多个容器组成（例 如 Web 应用、移动 App、独立应用、数据库、文件系统），每个容器包含一个或多个组件，每个组件由一个或多个类组成。每个组件具体存在于哪个 jar 文件中则是另外一个维度的事情。</p></blockquote><p>A key benefit of the “package by component” approach is that if you’re writing code that needs to do something with orders, there’s just one place to go—the OrdersComponent. Inside the component, the separation of concerns is still maintained, so the business logic is separate from data persistence, but that’s a component implementation detail that consumers don’t need to know about. This is akin to what you might end up with if you adopted a micro-services or Service-Oriented Architecture—a separate OrdersService that encapsulates everything related to handling orders. The key difference is the decoupling mode. You can think of well-defined components in a monolithic application as being a stepping stone to a micro-services architecture.</p><blockquote><p>这种“按组件封装”的方式的一个好处是，如果我们需要编写和订单有关的代码，只有一个位置需要修改 OrdersComponet。在这个组件中，仍然应该关注重点隔离原则，但这是组件内部|可题，使用者不需要关心。这就有点像采用微服务架构，或者是面向服务架构的结果——独立的 Orderservice 会将所有订单相关的东西封装起来。这里关键的区别是解耦的方式。我们可以认为，单体程序中的一个良好定义的组件，是微服务化架构的一个前提条件。</p></blockquote><h2 id="THE-DEVIL-IS-IN-THE-IMPLEMENTATION-DETAILS-具体实现细节中的陷阱"><a href="#THE-DEVIL-IS-IN-THE-IMPLEMENTATION-DETAILS-具体实现细节中的陷阱" class="headerlink" title="THE DEVIL IS IN THE IMPLEMENTATION DETAILS 具体实现细节中的陷阱"></a>THE DEVIL IS IN THE IMPLEMENTATION DETAILS 具体实现细节中的陷阱</h2><p>On the face of it, the four approaches do all look like different ways to organize code and, therefore, could be considered different architectural styles. This perception starts to unravel very quickly if you get the implementation details wrong, though.</p><blockquote><p>表面上看，四种代码组织方式各不相同，可以认为是不同的架构设计风格。可是，如果具体实现中不严加注意，很快就会出现偏差。</p></blockquote><p>Something I see on a regular basis is an overly liberal use of the public access modifier in languages such as Java. It’s almost as if we, as developers, instinctively use the public keyword without thinking. It’s in our muscle memory. If you don’t believe me, take a look at the code samples for books, tutorials, and open source frameworks on GitHub. This tendency is apparent, regardless of which architectural style a code base is aiming to adopt—horizontal layers, vertical layers, ports and adapters, or something else. Marking all of your types as public means you’re not taking advantage of the facilities that your programming language provides with regard to encapsulation. In some cases, there’s literally nothing preventing somebody from writing some code to instantiate a concrete implementation class directly, violating the intended architecture style.</p><blockquote><p>我经常遇到的一个问题是，Java 中 public 访问控制修饰符的滥用。我们作为程序员，好像天生就喜欢使用严 public 关键词。这就好像是肌肉记忆一样。如果不信，请看一下各种书籍的代码示范、各种入门教程，以及 GitHub 上的开源框架。这个趋势是显而易见的，不管采用了哪种系统架构风格。将所有的类都设置为 public 意味着就无法利用编程语言提供的封装手段。这样一来，没有任何东西可以阻碍某人写一段直接初始化具体实现类的代码，哪怕它违反了架构设计的要求。</p></blockquote><h2 id="ORGANIZATION-VERSUS-ENCAPSULATION-组织形式与封装的区别"><a href="#ORGANIZATION-VERSUS-ENCAPSULATION-组织形式与封装的区别" class="headerlink" title="ORGANIZATION VERSUS ENCAPSULATION 组织形式与封装的区别"></a>ORGANIZATION VERSUS ENCAPSULATION 组织形式与封装的区别</h2><p>Looking at this issue another way, if you make all types in your Java application public, the packages are simply an organization mechanism (a grouping, like folders), rather than being used for encapsulation. Since public types can be used from anywhere in a code base, you can effectively ignore the packages because they provide very little real value. The net result is that if you ignore the packages (because they don’t provide any means of encapsulation and hiding), it doesn’t really matter which architectural style you’re aspiring to create. If we look back at the example UML diagrams, the Java packages become an irrelevant detail if all of the types are marked as public. In essence, all four architectural approaches presented earlier in this chapter are exactly the same when we overuse this designation (Figure 34.7).</p><blockquote><p>从另外一个角度来看，如果我们将 Java 程序中的所有类型都设置为 public，那么包就仅仅是一种组织形式了（类似文件夹一样的分组方式），而不是一种封装方式，由于 public 类型可以在代码库的任何位置调用，我们事实上就可以忽略包的概念，因为它并不提供什么价值。最终，如果忽视包的概念（因为并不起到任何封装和隐藏的功能），那么想要采用的任何架构风格就都不重要了。我们回过头来看一下例子中的 UML 图，如果所有的类型都是 public，那么 Java 包就成了一个无关紧要的细节信息。于是，所有四种架构方式事实上并没有任何区别（参见图 34.7）。</p></blockquote><p>Take a close look at the arrows between each of the types in Figure 34.7: They’re all identical regardless of which architectural approach you’re trying to adopt. Conceptually the approaches are very different, but syntactically they are identical. Furthermore, you could argue that when you make all of the types public, what you really have are just four ways to describe a traditional horizontally layered architecture. This is a neat trick, and of course nobody would ever make all of their Java types public. Except when they do. And I’ve seen it.</p><blockquote><p>我们再详细看一下图 34.7 中各个类之间的箭头：不论采用哪种架构设计风格，它们的指向都是一致的。虽然概念不同，但是语法上都是一致的。更进一步说，如果所有的类都是 public 的，那么其实我们就是在用四种不同的方式描述一个传统的分层架构设计方式。你会说当然没有人会将所有的 Java 类都设置为 public，但是相信我，我见过。</p></blockquote><p>The access modifiers in Java are not perfect,8 but ignoring them is just asking for trouble. The way Java types are placed into packages can actually make a huge difference to how accessible (or inaccessible) those types can be when Java’s access modifiers are applied appropriately. If I bring the packages back and mark (by graphically fading) those types where the access modifier can be made more restrictive, the picture becomes pretty interesting (Figure 34.8).</p><blockquote><p>虽然 Java 中的访问修饰符并不完美，但是忽略它们的存存就是在自找麻烦。Java 类与包的组织形式其实可以很大程度决定这个类的可访问性（或者不可访问性）。如果我们将包的概念引入这幅图，同时标记（虚化的形式展示）应用到访问控制符的地方，这个图就很有意思了（参见图 34.8）。</p></blockquote><p><Figures figure="34-7">All four architectural approaches are the same</Figures></p><p>Moving from left to right, in the “package by layer” approach, the OrdersService and OrdersRepository interfaces need to be public, because they have inbound dependencies from classes outside of their defining package. In contrast, the implementation classes (OrdersServiceImpl and JdbcOrdersRepository) can be made more restrictive (package protected). Nobody needs to know about them; they are an implementation detail.</p><blockquote><p>从左向右，在 “按层封装”方式中，OrderService 与 OrderRepository 需要 public 修饰符，因为包外的类需要依赖它们。然而，具体实现类（OrderServicelmpl 和 JdbcOrdersRepository）则可以设置更细致的访问权限（包范围内的 protected）。不需要有人依赖它们，它们是具体的实现细节。</p></blockquote><p>In the “package by feature” approach, the OrdersController provides the sole entry point into the package, so everything else can be made package protected. The big caveat here is that nothing else in the code base, outside of this package, can access information related to orders unless they go through the controller. This may or may not be desirable.</p><blockquote><p>在“按功能封装”模式中，OrdersController 是整个包的入口，所以其他的类都可以设置为包范围内的 protected。这里的一个问题是，代码库中的其他代码都必须通过控制器才能访问订单信息——这可能是好处，也可能是坏处，视实际情况而定。</p></blockquote><p>In the ports and adapters approach, the OrdersService and Orders interfaces have inbound dependencies from other packages, so they need to be made public. Again, the implementation classes can be made package protected and dependency injected at runtime.</p><blockquote><p>在端口与适配器模式中，OrderService 与 Orders 接口都有来自包外的依赖关系，所以需要 public 修饰符。同样，实现类可以设置为包范围内 protected，依赖在运行时注入。</p></blockquote><p><Figures figure="34-8">Grayed-out types are where the access modifier can be made more restrictive</Figures></p><p>Finally, in the “package by component” approach, the OrdersComponent interface has an inbound dependency from the controller, but everything else can be made package protected. The fewer public types you have, the smaller the number of potential dependencies. There’s now no way9 that code outside this package can use the OrdersRepository interface or implementation directly, so we can rely on the compiler to enforce this architectural principle. You can do the same thing in .NET with the internal keyword, although you would need to create a separate assembly for every component.</p><blockquote><p>最后、在“组件”封装模式中，OrdersComponet 接口有来自 Controller 的依赖关系，但是其他类都可以设置为包 protected。Public 类型越少，潜在的依赖关系就越少。现在包外代码就不能再直接使用 OrdersRepository 接口或者具对应的实现，我们就可以利用编译器来维护架构设计原则了。在 .Net 语言中，我们可以用 internal 关键词达到一样的目的，然而我们需要给每个组件创建一个单独的 assembly。</p></blockquote><p>Just to be absolutely clear, what I’ve described here relates to a monolithic application, where all of the code resides in a single source code tree. If you are building such an application (and many people are), I would certainly encourage you to lean on the compiler to enforce your architectural principles, rather than relying on self-discipline and post-compilation tooling.</p><blockquote><p>再澄清一点，这里描述的全都和单体程序有关，所有代码都存放在同一个代码树下。如果你在构建这种程序（大部分程序都是如此），那么我强烈建议利用编译器来维护架构设计原理，而不要依赖个人自律和编译过程之后的工具。</p></blockquote><h2 id="OTHER-DECOUPLING-MODES-其他的解耦合模式"><a href="#OTHER-DECOUPLING-MODES-其他的解耦合模式" class="headerlink" title="OTHER DECOUPLING MODES 其他的解耦合模式"></a>OTHER DECOUPLING MODES 其他的解耦合模式</h2><p>In addition to the programming language you’re using, there are often other ways that you can decouple your source code dependencies. With Java, you have module frameworks like OSGi and the new Java 9 module system. With module systems, when used properly, you can make a distinction between types that are public and types that are published. For example, you could create an Orders module where all of the types are marked as public, but publish only a small subset of those types for external consumption. It’s been a long time coming, but I’m enthusiastic that the Java 9 module system will give us another tool to build better software, and spark people’s interest in design thinking once again.</p><blockquote><p>除编程语言自带的工具之外，通常还有其他方式可以进一步解耦源代码级别的依赖关系。在 Java 语言中，有模块化框架 OSGi，以及最新的 Java 9 模块系统。正确利用模块系统，我们可以进一步区分 public 类型和对外发布的类型。例如，我们可以创建一个 Orders 模块。将所有的类型标记为 public，但仅仅公布一小部分类供外部调用。虽然耗时很久，但是我十分期待 Java 9 的模块系统，它能提供构建更好软件的另一套工具，希望能够再次点燃人们思考设计的热情。</p></blockquote><p>Another option is to decouple your dependencies at the source code level, by splitting code across different source code trees. If we take the ports and adapters example, we could have three source code trees:</p><blockquote><p>另外一个选择是将代码分散到不同的代码树中，以从源代码级别解耦依赖关系。以端口和适配器方式为例，我们会有三个代码树：</p></blockquote><ul><li>The source code for the business and domain (i.e., everything that is independent of technology and framework choices): OrdersService, OrdersServiceImpl, and Orders</li><li>The source code for the web: OrdersController</li><li>The source code for the data persistence: JdbcOrdersRepository</li></ul><hr><blockquote><ul><li>业务代码（所有技术和框架无关的代码）：OrdersService、OrdersServiceImpl 以及 Orders。</li><li>Web 源代码：OrdersController。</li><li>持久化源代码：JdbcOrdersRepository。</li></ul></blockquote><p>The latter two source code trees have a compile-time dependency on the business and domain code, which itself doesn’t know anything about the web or the data persistence code. From an implementation perspective, you can do this by configuring separate modules or projects in your build tool (e.g., Maven, Gradle, MSBuild). Ideally you would repeat this pattern, having a separate source code tree for each and every component in your application. This is very much an idealistic solution, though, because there are real-world performance, complexity, and maintenance issues associated with breaking up your source code in this way.</p><blockquote><p>后面两个源代码树对业务代码有编译期依赖关系，而业务代码则对 Web 和数据持久毫无所知。从实现角度来看，我们可以通过将这些代码在构建工具中组织成不同的模块或者项目（例如 Maven&gt; Gradle&gt; MSBUILD 等）来达到目的。理想情况下，我们可以用这种模式将所有组件都划分成不同的项目。然而，这有点太理想化了，因为拆分代码库经常会带来性能、复杂度和维护性方面的问题。</p></blockquote><p>A simpler approach that some people follow for their ports and adapters code is to have just two source code trees:</p><blockquote><p>有些人采用一个稍微简单的组织方式，仅使用两个代码树：</p></blockquote><ul><li>Domain code (the “inside”)</li><li>Infrastructure code (the “outside”)</li></ul><hr><blockquote><ul><li>业务（Domain）代码（内部）</li><li>基础设施（Infrastructure）代码（外部）</li></ul></blockquote><p>This maps on nicely to the diagram (Figure 34.9) that many people use to summarize the ports and adapters architecture, and there is a compile-time dependency from the infrastructure to the domain.</p><blockquote><p>这与图 34.9 完美对应，很多人都用这个方式来简化对端口和适配器架构的描述。基础设施部分对业务代码有一个编译期的依赖关系。</p></blockquote><p><Figures figure="34-9">Domain and infrastructure code</Figures></p><p>This approach to organizing source code will also work, but be aware of the potential trade-off. It’s what I call the “Périphérique anti-pattern of ports and adapters.” The city of Paris, France, has a ring road called the Boulevard Périphérique, which allows you to circumnavigate Paris without entering the complexities of the city. Having all of your infrastructure code in a single source code tree means that it’s potentially possible for infrastructure code in one area of your application (e.g., a web controller) to directly call code in another area of your application (e.g., a database repository), without navigating through the domain. This is especially true if you’ve forgotten to apply appropriate access modifiers to that code.</p><blockquote><p>这种代码组织方式是可行的，但是需要额外注意随之而来的问题。我称这个问题为“端口与适配器模式中的 Peripherique 反模式”。法国巴黎有一条环形公路，名字是 Peripherique 大道。这条大道允许车辆环绕巴黎而不需要进入社区。同样的，将所有的基础设施代码放在同一个源代码树中，就有可能使得应用中的一个区域的基础设施代码（Web 控制器）直接调用另外一个区域的代码（数据库访问），而不经过领域代码。如果没有设置正确的访问修饰符，就更是如此了。</p></blockquote><h2 id="CONCLUSION-THE-MISSING-ADVICE-本章小结：本书拾遗"><a href="#CONCLUSION-THE-MISSING-ADVICE-本章小结：本书拾遗" class="headerlink" title="CONCLUSION: THE MISSING ADVICE 本章小结：本书拾遗"></a>CONCLUSION: THE MISSING ADVICE 本章小结：本书拾遗</h2><p>The whole point of this chapter is to highlight that your best design intentions can be destroyed in a flash if you don’t consider the intricacies of the implementation strategy. Think about how to map your desired design on to code structures, how to organize that code, and which decoupling modes to apply during runtime and compile-time. Leave options open where applicable, but be pragmatic, and take into consideration the size of your team, their skill level, and the complexity of the solution in conjunction with your time and budgetary constraints. Also think about using your compiler to help you enforce your chosen architectural style, and watch out for coupling in other areas, such as data models. The devil is in the implementation details.</p><blockquote><p>这一章的中心思想就是，如果不考虑具体实现细节，再好的设计也无法长久。必须要将设计映射到对应的代码结构上，考虑如何组织代码树，以及在编译期和运行期采用哪种解耦合的模式。保持开放，但是一定要务实，同时要考虑到团队的大小、技术水平，以及对应的时间和预算限制。最好能利用编译器来维护所选的系统架构设计风格，小心防范来自其他地方的耦合模式，例如数据结构。所有的实现细节都是关键的！</p></blockquote><div STYLE="page-break-after: always;"></div><h1 id="AFTERWORD-后序"><a href="#AFTERWORD-后序" class="headerlink" title="AFTERWORD 后序"></a>AFTERWORD 后序</h1><p>My professional career as a software developer began in the 1990s, at a time when the dinosaurs of Big Architecture ruled the world. To get ahead, you had to learn about objects and components, about design patterns, and about the Unified Modeling Language (and its precursors).</p><blockquote><p>我的软件工程师生涯开始于 20 世纪 90 年代，那是一个恐龙级大型架构统治世界的时代。要想在那样的时代获得一席之地，我们必须学会对象及其组件、设计模式、统一建模语言（包括其前身）的相关知识。</p></blockquote><p>Projects—and boy, should we rue the day when we decided to call them that?—started with long design phases, where detailed blueprints for our systems were laid out by “senior” programmers for more “junior” programmers to follow. Which, of course, they didn’t. Ever.</p><blockquote><p>现在想起来，或许真的可以考虑把我们那段日子所做的事情叫作“童子军项目”。每个项目的开头都会有一段长长的设计阶段，以便等那些“高级”程序员为一些跟随他们的、较“低级”的程序员制订好系统的设计蓝图，当然，这些“高级”程序员似乎永远完不成这件事。</p></blockquote><p>And so it was that, after rising to the lofty ranks of “software architect”—and then “lead architect,” “chief architect,” “Lord Architect of the Privy Council,” and all the other highfalutin titles we gave ourselves back in the day—I seemed doomed to spend my days connecting boxes with arrows and coding with PowerPoint, and having barely any impact on the real code itself.</p><blockquote><p>于是乎，做这件事的人被升级到了“软件架构师”，接着是“首席架构师”“总架构师”“枢密院首席架构师”以及其他各种高不可言的头衔，最终，我们还是让一切回到了原点。而我似乎注定要把时间花在画那些带箭头的盒子和编写 PowerPoint 的事情上，而这些事对真实代码的影响近乎为零。</p></blockquote><p>It struck me then that this was nonsense; every line of code contains at least one design decision, and therefore anyone who writes code has a much greater impact on the quality of the software than a PowerPoint jockey like me ever could.</p><blockquote><p>这让我无比受挫，每一行代码本身都至少包含了一条设计决策，任何一个写代码的家伙对软件质量的影响都远在我这个 PowerPoint 专业户之上。</p></blockquote><p>And then, thankfully, the Agile Software Development revolution arrived and put architects like me out of our misery. I’m a programmer. I like programming. And the best way I’ve found to have a positive impact on code is to write it.</p><blockquote><p>幸运的是，接下来发生的敏捷软件开发革命终于让我们这些架构师脱离了苦海。毕竟我是一名程序员，喜欢的是编程。而且我也发现影响软件质量最好的方法还是后序编写代码。</p></blockquote><p>The dinosaurs of Big Architecture—typically to be found wandering the primeval plains of Big Process—were wiped out by the asteroid of Extreme Programming. And it came as a blessed relief.</p><blockquote><p>这些大型架构像恐龙一样在大进程式的原始平原上游荡，然后被一颗叫作“敏捷开发”的小行星灭绝了，真是老天开眼啊！</p></blockquote><p>Development teams were set free to focus on what matters and to concentrate their efforts on things that add value. Instead of waiting weeks or months for a Big Architecture document so they could dutifully ignore it and write the code they were going to write anyway, teams could just agree to a test with their customer, have a quick design session to get their bearings, and then write the code they were going to write anyway.</p><blockquote><p>现在！开发团队可以自由地专注于真正重要的内容，并思考如何为他们所做的事情添加更多价值了。也就是说，他们现在再也不需要浪费几周或几个月的时间等待那些大型架构的设计文档了，他们可以名正言顺地忽略这些设计，直接按照自己的想法编写代码。然后，开发团队只需要安排客户直接参与测试，并在快速设计会议上得到用户的支持，然后他们就可以继续写代码了。</p></blockquote><p>The Big Architecture dinosaurs were gone, and small, nimble Just-Enough-Design-Up-Front-with-Plenty-of-Refactoring mammals replaced us. Software architecture became responsive.</p><blockquote><p>大型架构像恐龙一样消失了，前期设计够用、后期进行大量重构的设计思想如小巧玲珑的哺乳动物一样代替了它们，软件架构迎来了响应式设计的时代。</p></blockquote><p>Well, that was the theory, anyway.</p><blockquote><p>好吧，无论如何，以上这些都属于理论。</p></blockquote><p>The problem with leaving architecture to programmers is that programmers have to be able to think like architects. It turns out that not all of the stuff we learned during the Big Architecture era was of no value. The way that software is structured can have a profound impact on our ability to keep adapting and evolving it, even in the short term.</p><blockquote><p>把架构设计工作交给程序员的问题就是，程序员必须学会像架构师一样思考问题。事实证明，我们在大型架构时代学到的东西也并非一文不值。其设计软件结构的方法依然在我们保持软件的适应和扩展能力方面有着深远的影响，即使在短期开发中也是如此。</p></blockquote><p>Every design decision needs to leave the door open for future changes. Like playing pool, each shot isn’t just about sinking that ball; it’s also about lining up the next shot. Writing working code that doesn’t block future code is a non-trivial skillset. It takes years to master.</p><blockquote><p>我们的每一项设计决策都必须为未来的变化敞开大门。就像打台球一样，我们的每一杆击球都不只是为了要把球打进洞里，它也事关下一杆击球时所在的位置。让我们现在编写的代码不对未来的代码产生阻碍是一项非常重要的技能，通常需要花费多年的时间才能掌握。</p></blockquote><p>And so, the era of Big Architecture gave way to a new era of Fragile Architecture: designs that grew quickly to deliver value sooner, but that made sustaining that pace of innovation very difficult.</p><blockquote><p>因此，在大型架构时代让位给易碎型架构（Fragile Architecture）的新时代之后，虽然设计创造的价值得到了快速发展，但这也让我们想要持续创新变得举步维艰。</p></blockquote><p>It’s all very well talking about “embracing change,” but if it costs $500 to change a line of code, change ain’t happening.</p><blockquote><p>这里所有关于“拥抱变革”的讨论都很美好，但如果每修改一行代码的代价是 500 美元的话，这些变革恐怕根本就不会发生。</p></blockquote><p>Bob Martin’s original papers on OO design principles had a big impact on me as a young software developer. I looked at my code with a fresh perspective, and noticed problems that—until then—never seemed like problems to me.</p><blockquote><p>当我还是一名年轻的软件开发者的时候，Bob Martin 那篇关于面向对象设计原则的论文对我产生了很大的影响，他让我以一种全新的视觉审视了自己的代码，并发现了其中的问题，在那之前，这些问题对我来说似乎从来都不是问题。</p></blockquote><p>Now you’ve seen how it’s possible to write code that delivers value today without blocking future value tomorrow; the onus is on you to put in the practice so you can apply these principles to your own code.</p><blockquote><p>现在，你们也看到了如何才能写出既能提供当前价值，又不会阻碍未来价值的代码，期待你们也能亲自实践这些设计原则，并将其应用到自己的代码中。</p></blockquote><p>Like riding a bicycle, you can’t master software design just by reading about it. To get the best from a book like this, you need to get practical. Analyze your code and look for the kinds of problems Bob highlights, then practice refactoring the code to fix these problems. If you’re new to the refactoring discipline, then this will be a doubly valuable experience.</p><blockquote><p>就像学习骑自行车一样，单纯靠阅读是无法掌握软件设计方法的。为了让我们从这本书中的获益最大化，亲自实践是必不对少的。我们需要亲自分析自己的代码，查看其中是否存在 Bob 所强调的各种问题，然后在重构代码的实践中修复它们。如果你在重构方面是个新手，那么你将从本书收获双重的宝贵学习经验。</p></blockquote><p>Learn how you can incorporate design principles and Clean Architecture into your development processes, so that new code is less likely to cause pain. For example, if you’re doing TDD, make a point of having a little design review after passing each test, and clean up as you go. (It’s way cheaper than fixing bad designs later.) Perhaps, before you commit code, ask a colleague to review it with you. And look into the possibility of adding a code “quality gate” to your build pipeline as a last line of defense against unclean architecture. (And if you don’t have a build pipeline, maybe it’s time to create one?)</p><blockquote><p>我们得学会将书中的这些设计原则以及整洁架构融入自己的开发过程中，这可以大大减少新代码给我们带来的麻烦。例如，如果我们现在正在进行一次测试驱动的开发（TDD），就可以在每一次测试之后做一些设计审查，并及时整理我们的设计（这比事后再修复这些不良设计要省时省力得多）。或者，在提交代码之前，我们也可以邀请同事一起审查代码。另外，我们也可以研究在构建软件的管道中引入一些代码的“质量把关”机制，以作为防止架构设计不够清晰分明的最后一道防线。（如果你还没有设置构建软件的管道，现在是否可以考虑设置一个了？）</p></blockquote><p>Most important of all is to talk about Clean Architecture. Talk about it with your team. Talk about it with the wider developer community. Quality is everybody’s business, and it’s important to reach a consensus about the difference between good and bad architecture.</p><blockquote><p>这一切的重中之重就是要讨论架构的整洁性，我们要在自己的团队中讨论它，在各种开发者社区中讨论它。保证软件质量是我们每个人的责任，在区分架构的好坏标准上达成共识是一件非常重要的事。</p></blockquote><p>Be mindful that most software developers are not very architecture-aware, just as I wasn’t 25 years ago. More experienced developers clued me into it. Once you’ve wrapped your head around Clean Architecture, take the time to wrap someone else’s head around it. Pay it forward.</p><blockquote><p>我们必须意识到，大部分的软件开发者是没有太多架构意识的。就像 25 年前的我一样，是更有经验的开发者让我了解了架构。一旦我们一头扎进了整洁架构中，就会花时间围绕着它思考问题，并玩转它。</p></blockquote><p>While the technology landscape for developers evolves continuously, foundational principles like the ones described here rarely change. I have little doubt that this is a book that’s going to stay on your shelf for many years after your copy of Lean JSON Cloud NoSQL for Dummies has ended up in a yard sale. I hope it does for your Design Fu what Bob’s original papers did for mine.</p><blockquote><p>虽然开发者所在的技术环境一直在不断地发展，但本书所讨论的这些基本设计原则几乎不会发生变化。我一点都不怀疑在你们把 Lean JSON Cloud NoSQL for Dummies 当废纸卖掉很多年之后，这本书会还留在你们的书架上。我希望这本书会 对你们有很大的帮助，就像 Bob 那篇原创论文对我的帮助一样。</p></blockquote><p>The real journey starts here.</p><blockquote><p>愿你们真正的编程设计之旅从这里开始！</p></blockquote><p>—Jason Gorman</p><p>January 26, 2017</p><blockquote><p>——Jason Gorman</p><p>2017 年 1 月 26 日</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Part1-INTRODUCTION-概述&quot;&gt;&lt;a href=&quot;#Part1-INTRODUCTION-概述&quot; class=&quot;headerlink&quot; title=&quot;Part1. INTRODUCTION 概述&quot;&gt;&lt;/a&gt;Part1. INTRODUCTION 概述</summary>
      
    
    
    
    <category term="读书" scheme="https://zxffan.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
    <category term="clean architecture" scheme="https://zxffan.github.io/tags/clean-architecture/"/>
    
  </entry>
  
  <entry>
    <title>认识ProtocolBuffers</title>
    <link href="https://zxffan.github.io/posts/673cef84.html"/>
    <id>https://zxffan.github.io/posts/673cef84.html</id>
    <published>2021-07-15T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Protocol-Buffers"><a href="#什么是Protocol-Buffers" class="headerlink" title="什么是Protocol Buffers"></a>什么是Protocol Buffers</h2><blockquote><p>Protocol buffers are Google’s language-neutral, platform-neutral, extensible mechanism for serializing structured data – think XML, but smaller, faster, and simpler. You define how you want your data to be structured once, then you can use special generated source code to easily write and read your structured data to and from a variety of data streams and using a variety of languages.</p><p>——Google</p></blockquote><p>pb是google推出的一个语言无关、平台无关、可扩展的数据序列化机制，它用来序列化类似xml的结构化数据。</p><p>PB有着许多优点：</p><ol><li>强类型约束</li><li>序列化结果是二进制数据</li><li>性能好</li></ol><p>比如JSON数据这种结构化数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zxfan&quot;</span>,</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="number">123213</span>,</span><br><span class="line">  <span class="string">&quot;email&quot;</span>: <span class="string">&quot;xxx@xx.com&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以注意到JSON的缺点：没有类型约束。我们可以尝试使用PB对这块数据进行定义</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// person.proto</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">required</span> <span class="type">string</span> name = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">required</span> <span class="type">int32</span> id = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">optional</span> <span class="type">string</span> email = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>message</code>用于定义数据结构，Person有三个字段。两个字符串类型（name和email）。一个32位整型（email）。</p><h2 id="PB2的语法"><a href="#PB2的语法" class="headerlink" title="PB2的语法"></a>PB2的语法</h2><p><code>protocol buffers</code>有<code>proto2</code>和<code>proto3</code>两个版本，默认是<code>proto2</code>。</p><h3 id="定义一个message"><a href="#定义一个message" class="headerlink" title="定义一个message"></a>定义一个message</h3><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">message </span><span class="title class_">SearchRequest</span> &#123;</span><br><span class="line">  <span class="keyword">required</span> <span class="type">string</span> query = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">optional</span> <span class="type">int32</span> page_number = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">optional</span> <span class="type">int32</span> result_per_page = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>message</code>用于定义一个message结构，message里每个字段（field）的由几部分组成：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[field rule] [field type] [field name] = [field number]</span><br></pre></td></tr></table></figure><h3 id="Field-Rule"><a href="#Field-Rule" class="headerlink" title="Field Rule"></a>Field Rule</h3><ul><li><code>required</code>：指定字段是必须的</li><li><code>optionsal</code>：指定字段是可选</li><li><code>repeated</code>：指定字段是可重复的，类似数组</li></ul><p>optional的字段是可以添加默认值的，如：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">optional</span> <span class="type">int32</span> result_per_page = <span class="number">3</span> [default = <span class="number">10</span>];</span><br></pre></td></tr></table></figure><h3 id="Field-Type"><a href="#Field-Type" class="headerlink" title="Field Type"></a>Field Type</h3><p>定义字段类型，字段类型可以是<strong>标量类型</strong>也可以是一个<strong>message</strong></p><h4 id="标量类型"><a href="#标量类型" class="headerlink" title="标量类型"></a>标量类型</h4><p>所支持的标量类型，请查阅<a href="https://developers.google.cn/protocol-buffers/docs/proto#scalar">官网文档</a></p><h4 id="Message作为Field类型"><a href="#Message作为Field类型" class="headerlink" title="Message作为Field类型"></a>Message作为Field类型</h4><p>如下例：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">message </span><span class="title class_">SearchResponse</span> &#123;</span><br><span class="line">  <span class="keyword">repeated</span> Result result = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Result</span> &#123;</span><br><span class="line">  <span class="keyword">required</span> <span class="type">string</span> url = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">optional</span> <span class="type">string</span> title = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="type">string</span> snippets = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h4><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum </span><span class="title class_">Corpus</span> &#123;</span><br><span class="line">  UNIVERSAL = <span class="number">0</span>;</span><br><span class="line">  WEB = <span class="number">1</span>;</span><br><span class="line">  IMAGES = <span class="number">2</span>;</span><br><span class="line">  LOCAL = <span class="number">3</span>;</span><br><span class="line">  NEWS = <span class="number">4</span>;</span><br><span class="line">  PRODUCTS = <span class="number">5</span>;</span><br><span class="line">  VIDEO = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">SearchRequest</span> &#123;</span><br><span class="line">  <span class="keyword">required</span> <span class="type">string</span> query = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">optional</span> <span class="type">int32</span> page_number = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">optional</span> <span class="type">int32</span> result_per_page = <span class="number">3</span> [default = <span class="number">10</span>];</span><br><span class="line">  <span class="keyword">optional</span> Corpus corpus = <span class="number">4</span> [default = UNIVERSAL];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Field-Name"><a href="#Field-Name" class="headerlink" title="Field Name"></a>Field Name</h3><p>定义字段名称</p><h3 id="Field-Number"><a href="#Field-Number" class="headerlink" title="Field Number"></a>Field Number</h3><p>定义字段编号。pb被编码成二进制数据，这个编号就是用来标识字段的。</p><ul><li>字段编号必须唯一，不能两个字段使用同一个数字。（只要确保同一个message中不重复就行）</li><li>编号1～15会被编码成1个字节，而16～2047会被编码成2个字节。所以要尽可能多得使用1～15。</li><li>最小编号1，最大编号2^29 - 1。</li></ul><h3 id="Reserved"><a href="#Reserved" class="headerlink" title="Reserved"></a>Reserved</h3><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">message </span><span class="title class_">Foo</span> &#123;</span><br><span class="line">  reserved <span class="number">2</span>, <span class="number">15</span>, <span class="number">9</span> to <span class="number">11</span>; <span class="comment">// 保留 field number</span></span><br><span class="line">  reserved <span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>; <span class="comment">// 保留 field name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>reserved</code>意味着指定的<code>field number</code>或<code>field name</code>不能被使用。</p><p>这在一些场景下十分有用——如果你删除了某个message的field，那么对应的field number就可以被其他field使用了。但是如果其他人使用的是旧版的proto文件，这是就会发生问题，因为PB是通过number来鉴别field的。</p><p>所以，当我们删除某个字段时，考虑一下这个number能否被复用。如果不能，那就使用<code>reserved</code>避免使用到该number。</p><p><code>enum</code>也是支持<code>reserved</code>的</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum </span><span class="title class_">Foo</span> &#123;</span><br><span class="line">  reserved <span class="number">2</span>, <span class="number">15</span>, <span class="number">9</span> to <span class="number">11</span>, <span class="number">40</span> to max;</span><br><span class="line">  reserved <span class="string">&quot;FOO&quot;</span>, <span class="string">&quot;BAR&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p><code>message</code>能够嵌套<code>message</code>和<code>enum</code></p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">message </span><span class="title class_">SearchResponse</span> &#123;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="type">string</span> url = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">optional</span> <span class="type">string</span> title = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">repeated</span> <span class="type">string</span> snippets = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">EnumLike</span> &#123;</span><br><span class="line">    UNKNOWN = <span class="number">0</span>;</span><br><span class="line">    STARTED = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">repeated</span> Result result = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">required</span> EnumLike like = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>注意：这个特性不支持<code>Java</code>语言</p><p>我们通常讲不通的message拆分到不通的<code>.proto</code>文件中。我们可以使用<code>import</code>来复用<code>.proto</code>的内容</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;other_proto.proto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这就可以使用other_proto.proto的内容了</span></span><br></pre></td></tr></table></figure><p>还有一个<code>import public</code>语句。举个例子：有<code>a.protp</code> <code>b.proto</code> <code>c.proto</code> <code>d .proto</code>四个<code>.proto</code>文件，其中<code>b.proto</code>内容如下：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> public <span class="string">&quot;a.proto&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;d.proto&quot;</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>然后<code>c.proto</code>再导入<code>b.proto</code>文件，这样c就可以使用a和b中的定义的内容</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;b.proto&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 能够使用a.proto和b.proto定义的内容</span></span><br><span class="line"><span class="comment">// 但不包括d.proto，因为b使用的是不加public的import</span></span><br></pre></td></tr></table></figure><p>所以加上<code>public</code>后，就具有传递行了。</p><p>特别注意：我们在使用pb命令行工具时，可用通过添加参数<code>-I/--proto_path</code>，用于指定寻找文件的位置。如果没有指定默认取当前工作路径（就是命令执行的目录）。</p><h3 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h3><p>PB提供一套扩展机制，可以对现有message进行扩展（类似类继承）</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">message </span><span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  extensions <span class="number">100</span> to <span class="number">199</span>; </span><br><span class="line">  <span class="comment">// 100 to max</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>extensions</code>关键字表明100~199的编号是为扩展保留的。</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extend Foo &#123;</span><br><span class="line">  <span class="keyword">optional</span> <span class="type">int32</span> bar = <span class="number">126</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>extend</code>关节字后加上message name，表示对该message进行扩展。新加字段只能使用100～199作为编号。</p><h3 id="Oneof"><a href="#Oneof" class="headerlink" title="Oneof"></a>Oneof</h3><h3 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h3><h3 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h3><p>&#x2F;&#x2F; TODO</p><h2 id="JavaScript如何使用PB"><a href="#JavaScript如何使用PB" class="headerlink" title="JavaScript如何使用PB"></a>JavaScript如何使用PB</h2><p>&#x2F;&#x2F; TODO</p><p>因为是语言无关的，可以在<a href="https://developers.google.cn/protocol-buffers">官网</a>找到相对应的语言指导</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> protobuf =  <span class="built_in">require</span>(<span class="string">&#x27;protocol-buffers&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建schema</span></span><br><span class="line"><span class="keyword">const</span> schema = <span class="title function_">protobuf</span>(fs.<span class="title function_">redFileSync</span>(__dirname + <span class="string">&#x27;./person.proto&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码</span></span><br><span class="line"><span class="keyword">const</span> buf = schema.<span class="property">Column</span>.<span class="title function_">encode</span>(&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zxfan&quot;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&quot;zxfan@xx.com&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解码</span></span><br><span class="line"><span class="keyword">const</span> data = schema.<span class="property">Column</span>.<span class="title function_">decode</span>(buf)</span><br></pre></td></tr></table></figure><p>编码会将原数据编码成二进制</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是Protocol-Buffers&quot;&gt;&lt;a href=&quot;#什么是Protocol-Buffers&quot; class=&quot;headerlink&quot; title=&quot;什么是Protocol Buffers&quot;&gt;&lt;/a&gt;什么是Protocol Buffers&lt;/h2&gt;&lt;bloc</summary>
      
    
    
    
    <category term="experience" scheme="https://zxffan.github.io/categories/experience/"/>
    
    
  </entry>
  
  <entry>
    <title>Crypto</title>
    <link href="https://zxffan.github.io/posts/6f842db3.html"/>
    <id>https://zxffan.github.io/posts/6f842db3.html</id>
    <published>2021-06-19T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><p>哈希算法又称为散列算法。将一个任意长度的的数组作为输入，能够获得固定长度的输出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(crypto.<span class="title function_">getHashes</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出</span></span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">  &#x27;RSA-MD4&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;RSA-MD5&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;RSA-MDC2&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;RSA-RIPEMD160&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;RSA-SHA1&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;RSA-SHA1-2&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;RSA-SHA224&#x27;,</span></span><br><span class="line"><span class="comment">  ...</span></span><br><span class="line"><span class="comment">  ...</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>以<code>md5</code>为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> text = <span class="string">&quot;hello crypto!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> md5 = crypto.<span class="title function_">createHash</span>(<span class="string">&quot;md5&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> result = md5.<span class="title function_">update</span>(text).<span class="title function_">digest</span>(<span class="string">&quot;hex&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><ul><li><code>createHash</code>：创建hash，参数为hash算法，具体见<code>crypto.getHashes()</code></li><li><code>update</code>：对字符串进行hash</li><li><code>digest</code>：获取信息摘要<ul><li>不传参数，返回Buffer</li><li>参数为字符编码，<code>hex</code>返回16进制</li></ul></li></ul><p>md5是不可逆的，破解md5也只能使用暴力的“碰撞破解”。所以一般会对文本进行多次md5哈希：<code>md5.update(text).update(text).update(text)</code></p><blockquote><p>哈希算法通常用作信息摘要算法，比如双发通信时，发送方将资源（数据，用户）的信息摘要进行加密，接收方再去验证比对</p></blockquote><h2 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h2><p><code>Hmac</code>被称为加盐算法，即 <code>Hmac = hash + 密钥</code>。比如<code>sha-1</code>算法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> text = <span class="string">&quot;hello crypto!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = crypto.<span class="title function_">createHmac</span>(<span class="string">&quot;sha1&quot;</span>, <span class="string">&quot;miyao&quot;</span>).<span class="title function_">update</span>(text).<span class="title function_">digest</span>(<span class="string">&quot;hex&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 09ef939a42b909a48d8ea3803692ec88eedc4c04</span></span><br></pre></td></tr></table></figure><p><code>createHmac</code>第二个参数密钥</p><blockquote><p>密钥可以通过<code>openssl</code>来创建</p><p><code>openssl genrsa -out rsa_private.key 1024</code></p></blockquote><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>对称加密指：利用同一个密钥来加密&#x2F;解密数据。这有两个关键点：</p><ul><li>有加密也有解密，所以加密算法是可逆的</li><li>同一个密钥</li></ul><p>以<code>aes192</code>为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> text = <span class="string">&quot;hello crypto!&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> key = crypto.<span class="title function_">scryptSync</span>(<span class="string">&quot;woshimiyao&quot;</span>, <span class="string">&quot;yanzhi&quot;</span>, <span class="number">24</span>); <span class="comment">// 密钥</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">data, iv</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> cipher = crypto.<span class="title function_">createCipheriv</span>(<span class="string">&quot;aes192&quot;</span>, key, iv);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cipher.<span class="title function_">update</span>(data, <span class="string">&quot;utf-8&quot;</span>, <span class="string">&quot;hex&quot;</span>).<span class="title function_">final</span>(<span class="string">&quot;hex&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decrypt</span>(<span class="params">data, iv</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> decipher = crypto.<span class="title function_">createDecipheriv</span>(<span class="string">&quot;aes192&quot;</span>, key, iv);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> decipher.<span class="title function_">update</span>(data, <span class="string">&quot;hex&quot;</span>, <span class="string">&quot;utf-8&quot;</span>).<span class="title function_">final</span>(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iv = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">16</span>, <span class="number">0</span>); <span class="comment">// 初始化向量</span></span><br><span class="line"><span class="keyword">const</span> e = <span class="title function_">encrypt</span>(text, iv);</span><br><span class="line"><span class="keyword">const</span> d = <span class="title function_">decrypt</span>(e, iv);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e, d); <span class="comment">// 3e07418b2c1ed2b128943b005610f166 hello crypto!</span></span><br></pre></td></tr></table></figure><h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>非对称加密：利用两个密钥，一个用于加密另一个用于解密。这也有两个关键点：</p><ul><li>有加密也有解密，所以加密算法是可逆的</li><li>两个密钥：<ul><li>公钥：用于加密</li><li>私钥：用于解密</li></ul></li></ul><h2 id="常见加密算法"><a href="#常见加密算法" class="headerlink" title="常见加密算法"></a>常见加密算法</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;哈希&quot;&gt;&lt;a href=&quot;#哈希&quot; class=&quot;headerlink&quot; title=&quot;哈希&quot;&gt;&lt;/a&gt;哈希&lt;/h2&gt;&lt;p&gt;哈希算法又称为散列算法。将一个任意长度的的数组作为输入，能够获得固定长度的输出。&lt;/p&gt;
&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="experience" scheme="https://zxffan.github.io/categories/experience/"/>
    
    
    <category term="Nodejs" scheme="https://zxffan.github.io/tags/Nodejs/"/>
    
    <category term="crypto" scheme="https://zxffan.github.io/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>字节跳动面试</title>
    <link href="https://zxffan.github.io/posts/33f3fd9d.html"/>
    <id>https://zxffan.github.io/posts/33f3fd9d.html</id>
    <published>2021-06-04T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><ol><li><p>自我介绍</p></li><li><p>网络模型：osi七层模型，每层干什么的？</p></li><li><p>http协议的理解。想到啥说啥。就是你随便说，面试官会顺着问</p><ol><li>无状态</li><li>应用层协议，基于tcp</li><li>发展历史：从0.9到3.0</li><li>缓存</li><li>http状态吗：从1xx一直说到5xx</li></ol></li><li><p>https？说了一下tls协商</p></li><li><p>es6相关，说一些用过哪些？面试官会顺着问。</p><ol><li>var&#x2F;let&#x2F;const ， 面试官顺着问了它们的区别</li><li>字符串有哪些方法。这个问题应该是问错了，他想问得是数组：map filter reduce sort…</li><li>模块规范 esm cjs 区别</li><li>promise，然后就开始手写。估计他最初是想让我实现数组相关的方法，但是发现自己问错了就跳过了。</li></ol></li><li><p>3道题</p><ol><li>Promise.all</li><li>快排、归并，dfs选一个写</li><li>最小银币找零问题：现有[1,2,5,9,10]几种硬币，当有18面值的硬币时，如何找零使得硬币数量最少；答案是2——18 &#x3D; 9+9</li></ol></li><li><p>感受：一面还是非常基础的。问了挺多的网络相关的内容</p></li></ol><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><ol><li><p>自我介绍？没让自我介绍直接开始。</p></li><li><p>看简历：</p><ol><li>问你是怎么优化（webpack）构建性能的？<ol><li>缓存：如何根据js代码变化去修改缓存的？</li><li>thread-loader 怎么选取进程数量的？</li><li>如何去做chunk拆分，怎么考量的？</li></ol></li><li>cli脚手架 怎么设计的？</li></ol></li><li><p>vue的computed如何进行依赖收集？说了computed的实现机制。</p></li><li><p>vue3相对于vue2做了哪些改进？讲了响应式和compiler的优化（静态提升、pathFlag、BlockTree）</p></li><li><p>手写题目：类似vue中的渲染函数（render），让你生成dom元素（返回一个dom对象）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vnode = <span class="title function_">el</span>(<span class="string">&quot;div&quot;</span>, &#123; <span class="attr">class</span>: <span class="string">&quot;container&quot;</span> &#125;, [</span><br><span class="line">  <span class="title function_">el</span>(<span class="string">&quot;span&quot;</span>, &#123;&#125;, [<span class="string">&quot;hello world&quot;</span>]),</span><br><span class="line">]);</span><br><span class="line">vnode.<span class="title function_">render</span>();</span><br></pre></td></tr></table></figure></li><li><p>场景题：</p><p>一个多语言应用，大概14种语言。假如每个语言都放在一个js文件中（中文的一个文件，英文的一个文件）。目前存在两个问题</p><ul><li>应用启动时，会加载这14种语言（js文件），但实际上只需要1种语言，问如何优化？</li><li>随着开发，有一些语言的值不在使用了，但还是加载到内存中去了，如何优化？</li></ul></li><li><p>感受：二面连自我介绍都省了，哈哈！！感觉面试官爱从编译的角度问问题，估计这和他的具体工作相关吧。总体感觉这位面试官还是不错的，问得都是比较实际的问题。</p></li></ol><h2 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h2><p>三面聊得特别广，也挺深的。</p><ol><li><p>之前性能优化怎么做的，这个聊了很久</p></li><li><p>cdn为什么会快？</p></li><li><p>从url到页面渲染的过程</p><ol><li>知道http如何判断响应返回的吗？</li><li>script 加载为什么会阻塞dom解析，既然有defer和async，为什么浏览器不默认defer&#x2F;async?</li></ol></li><li><p>js中函数是一等公民。js中函数可以返回一个函数（闭包），知道这个特性实现难点在哪吗？</p></li><li><p>你的项目（自己的开源项目）有做过设计吗？看过设计相关的书吗？</p><ol><li>设计模式</li><li>函数式编程</li></ol></li><li><p>你项目写了虚拟列表优化，怎么做的</p><ol><li>滚动得快的话，出现白屏怎么优化？</li><li>如果高度不固定，怎么实现？</li></ol></li><li><p>为什么会学习electron？</p><ol><li>electron的进程模型</li><li>浏览器的进程模型</li></ol></li><li><p>手写题：</p><p>场景：根据ip判断ip所在范围，要求：尽可能高效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假如在这两个范围内的 是中国的ip</span></span><br><span class="line"><span class="keyword">const</span> db = [</span><br><span class="line">  [<span class="string">&quot;0.0.0.0&quot;</span>, <span class="string">&quot;10.0.0.0&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;11.0.0.0&quot;</span>, <span class="string">&quot;200.0.0.0&quot;</span>],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// ip: string，判断ip是否是中国ip</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isInChain</span>(<span class="params">ip</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><p>感觉三面的面试官的职责可能不仅仅是前端，喜欢问一些特别底层的问题。</p><blockquote><p>三轮技术面试都没有怎么考算法，就一面考了一道动态规划。飞书的面试官还是比较注重实际的开发能力的。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一面&quot;&gt;&lt;a href=&quot;#一面&quot; class=&quot;headerlink&quot; title=&quot;一面&quot;&gt;&lt;/a&gt;一面&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;自我介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网络模型：osi七层模型，每层干什么的？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;h</summary>
      
    
    
    
    <category term="self" scheme="https://zxffan.github.io/categories/self/"/>
    
    
    <category term="前端" scheme="https://zxffan.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="interview" scheme="https://zxffan.github.io/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>clear 清除浮动</title>
    <link href="https://zxffan.github.io/posts/d8bddba6.html"/>
    <id>https://zxffan.github.io/posts/d8bddba6.html</id>
    <published>2021-05-30T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>clear用于解决，由于float造成的浮动塌陷问题。</p><h2 id="只能清除前面的浮动"><a href="#只能清除前面的浮动" class="headerlink" title="只能清除前面的浮动"></a>只能清除前面的浮动</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span>a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span>b<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c&quot;</span>&gt;</span>c<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.a</span>,</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.b</span>,</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.c</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.b</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">clear</span>: left</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>无论对<code>b</code>设置<code>clear: left/right/both</code>。都只能清除<code>a</code>的浮动（a将独占一行），然而无法清除b的浮动。这是因为浏览器的解析顺序的缘故。</p><p>那么<code>clear: right</code>有什么用？当<code>float:right</code>时不就能清除右侧浮动了么！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;clear用于解决，由于float造成的浮动塌陷问题。&lt;/p&gt;
&lt;h2 id=&quot;只能清除前面的浮动&quot;&gt;&lt;a href=&quot;#只能清除前面的浮动</summary>
      
    
    
    
    <category term="CSS" scheme="https://zxffan.github.io/categories/CSS/"/>
    
    
    <category term="css" scheme="https://zxffan.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="https://zxffan.github.io/posts/616f4683.html"/>
    <id>https://zxffan.github.io/posts/616f4683.html</id>
    <published>2021-05-17T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>性能优化是很大的话题，可以从两个角度入手</p><ul><li>优化资源体积</li><li>优化请求速度</li></ul><h2 id="优化资源体积"><a href="#优化资源体积" class="headerlink" title="优化资源体积"></a>优化资源体积</h2><h3 id="资源懒加载"><a href="#资源懒加载" class="headerlink" title="资源懒加载"></a>资源懒加载</h3><p>资源懒加载就是指，当前这个页面只去加载本页面的资源。其它资源不去加载</p><h4 id="按照路由懒加载"><a href="#按照路由懒加载" class="headerlink" title="按照路由懒加载"></a>按照路由懒加载</h4><p>如果使用<code>webpack</code>这种构建工具，可以使用动态<code>import</code>函数来按照路由实现拆分chunk</p><h4 id="拆分node-modules"><a href="#拆分node-modules" class="headerlink" title="拆分node_modules"></a>拆分node_modules</h4><p>如果一个项目使用到了诸如：<code>element-ui</code> <code>vue</code> <code>pdfjs</code> <code>videojs</code>这些插件；<code>webpack</code>默认会将所有<code>node_modules</code>打包成一个<code>chunk</code>。但是某一个页面只用到了vue没有用到其它库，这是就会导致这个页面加载了许多无用的资源</p><p>所以我们要根据使用情况来拆分<code>node_modules</code>。具体做法就是通过<code>webpack</code>的<code>splitChunk</code>功能来实现。</p><blockquote><p>把这些库都拆分出去了，不就影响到下个页面的性能的吗？</p><p>利用<code>preftch</code>解决</p><ul><li>import函数可以使用魔法注释 <code>/*.webpackPrefetch: true */</code> <code>/*.webpackPreload: true */</code></li></ul></blockquote><h4 id="库按需加载"><a href="#库按需加载" class="headerlink" title="库按需加载"></a>库按需加载</h4><p>比如<code>element-ui</code>，它内置了大量组件。我们应该去按需引用他们。</p><p>使用<code>babel-plugin-import</code>来实现组件库（js和css）的按需加载</p><h3 id="资源压缩"><a href="#资源压缩" class="headerlink" title="资源压缩"></a>资源压缩</h3><h4 id="客户端压缩"><a href="#客户端压缩" class="headerlink" title="客户端压缩"></a>客户端压缩</h4><p>客户端压缩资源文件，比如<code>js</code> <code>css</code> <code>img</code>等</p><ul><li>js：使用<code>terser-webpack-plugin</code>压缩脚本代码</li><li>css：使用<code>optimize-css-webpack-plugin</code></li><li>Img: 图片可以使用 <code>image-webpack-loader</code>压缩</li></ul><h4 id="服务端压缩"><a href="#服务端压缩" class="headerlink" title="服务端压缩"></a>服务端压缩</h4><p>服务端开启<code>g-zip</code>压缩</p><p>比如nginx，直接配置<code>gzip: on</code>即可</p><h2 id="优化请求速度"><a href="#优化请求速度" class="headerlink" title="优化请求速度"></a>优化请求速度</h2><p>从请求速度角度入手。首先，需要理清楚页面显示之前都发生了些什么。</p><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><p>输入url，后首先不是DNS，而是检查浏览器缓存。浏览器缓存可以分成四种</p><h4 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h4><p><code>service worder</code>就是服务端与客户端之间的代理人。客户端对资源的请求会被<code>service worker</code>拦截下来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// worker.js</span></span><br><span class="line"><span class="comment">/* 监听安装事件，install 事件一般是被用来设置你的浏览器的离线缓存逻辑 */</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;install&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 通过这个方法可以防止缓存未完成，就关闭serviceWorker */</span></span><br><span class="line">  event.<span class="title function_">waitUntil</span>(</span><br><span class="line">    <span class="comment">/* 创建一个名叫V1的缓存版本 */</span></span><br><span class="line">    caches.<span class="title function_">open</span>(<span class="string">&#x27;v1&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">cache</span>) &#123;</span><br><span class="line">      <span class="comment">/* 指定要缓存的内容，地址为相对于跟域名的访问路径 */</span></span><br><span class="line">      <span class="keyword">return</span> cache.<span class="title function_">addAll</span>([</span><br><span class="line">        <span class="string">&#x27;./index.html&#x27;</span> <span class="comment">// 资源URL</span></span><br><span class="line">      ]);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注册fetch事件，拦截全站的请求 */</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;fetch&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 在缓存中匹配对应请求资源直接返回 */</span></span><br><span class="line">  event.<span class="title function_">respondWith</span>(caches.<span class="title function_">match</span>(event.<span class="property">request</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>service worker</code>需要注册, <code>navigator.serviceWorker.register</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="comment">/* 判断当前浏览器是否支持serviceWorker */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="comment">/* 当页面加载完成就创建一个serviceWorker */</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/* 创建并指定对应的执行内容 */</span></span><br><span class="line">    <span class="comment">/* scope 参数是可选的，可以用来指定你想让 service worker 控制的内容的子目录。 在这个例子里，我们指定了 &#x27;/&#x27;，表示 根网域下的所有内容。这也是默认值。 */</span></span><br><span class="line">    navigator.<span class="property">serviceWorker</span>.<span class="title function_">register</span>(<span class="string">&#x27;./serviceWorker.js&#x27;</span>, &#123;<span class="attr">scope</span>: <span class="string">&#x27;./&#x27;</span>&#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">registration</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ServiceWorker registration successful with scope: &#x27;</span>, registration.<span class="property">scope</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ServiceWorker registration failed: &#x27;</span>, err);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>service worker是基于web worker</p></blockquote><h4 id="memory-cache-amp-disk-cache"><a href="#memory-cache-amp-disk-cache" class="headerlink" title="memory cache &amp; disk cache"></a>memory cache &amp; disk cache</h4><ul><li><p>内存缓存，这部分资源存放到内存中的</p></li><li><p>磁盘缓存，这部分资源是存放到磁盘中的。也就是我们常说的<strong>强缓存</strong>和<strong>协商缓存</strong></p></li></ul><p><code>chrome</code>会自动将磁盘缓存存放到内存中，下次请求时，就会自动从内存中去。内存IO的性能肯定优于磁盘IO。当浏览器关闭后，存放到内存的缓存就会自动清空，而磁盘缓存一致存在</p><h4 id="push-cache"><a href="#push-cache" class="headerlink" title="push cache"></a>push cache</h4><p><code>HTTP2</code>拥有<strong>服务端推送的功能</strong>。</p><h3 id="DNS-prefetch"><a href="#DNS-prefetch" class="headerlink" title="DNS prefetch"></a>DNS prefetch</h3><p>开启DNS 预取，在加载HTML时，开始解析域名获取IP。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 会自动加上响应头，告诉浏览器开始dns预解析 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;x-dns-prefetch-control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;on&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定要解析的域名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//www.zhix.net&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>将一些图片或者不变的大资源，采用CDN上云的方式。从而加快请求速度</p><h3 id="并发限制"><a href="#并发限制" class="headerlink" title="并发限制"></a>并发限制</h3><p>现代浏览器对同一个域的请求是有并发限制的。比如<code>chrome</code>最多并发6个请求。我们有两种方案来解决：</p><ul><li>拆分不同的域名：那我们可以将资源拆分到不同的域下，从而绕开限制。</li><li>使用HTTP2：<code>http2</code>可以实现多路复用，一个域名只需要建立一个tcp连接</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;性能优化&quot;&gt;&lt;a href=&quot;#性能优化&quot; class=&quot;headerlink&quot; title=&quot;性能优化&quot;&gt;&lt;/a&gt;性能优化&lt;/h2&gt;&lt;p&gt;性能优化是很大的话题，可以从两个角度入手&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优化资源体积&lt;/li&gt;
&lt;li&gt;优化请求速度&lt;/li&gt;
</summary>
      
    
    
    
    <category term="experience" scheme="https://zxffan.github.io/categories/experience/"/>
    
    
    <category term="网络" scheme="https://zxffan.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="Nodejs" scheme="https://zxffan.github.io/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Vuex@4.x</title>
    <link href="https://zxffan.github.io/posts/340f0a10.html"/>
    <id>https://zxffan.github.io/posts/340f0a10.html</id>
    <published>2021-05-12T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vuex注册流程"><a href="#Vuex注册流程" class="headerlink" title="Vuex注册流程"></a>Vuex注册流程</h2><p>首先通过<code>createStore</code>方法创建一个store对象。然后使用<code>app.use(store)</code>。<code>store</code>对象是一个vue插件。所以必须实现install方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  install (app, injectKey) &#123;</span><br><span class="line">    app.<span class="title function_">provide</span>(injectKey || storeKey, <span class="variable language_">this</span>)</span><br><span class="line">    app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$store</span> = <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件里使用vuex</span></span><br><span class="line"><span class="comment">// 1: this.$store</span></span><br><span class="line"><span class="comment">// 2: inject: [injectKey] </span></span><br></pre></td></tr></table></figure><p>创建store对象的流程：</p><ol><li>初始化所有module</li><li>resetStoreState<ul><li>注册getter</li><li>响应式state</li></ul></li></ol><h2 id="如何注册module"><a href="#如何注册module" class="headerlink" title="如何注册module"></a>如何注册module</h2><p><code>installModule</code>会初始化root模块，也会初始化所有子模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">installModule</span> (store, rootState, path, <span class="variable language_">module</span>, hot) &#123;</span><br><span class="line">  <span class="keyword">const</span> isRoot = !path.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> namespace = store.<span class="property">_modules</span>.<span class="title function_">getNamespace</span>(path)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// register in namespace map</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">namespaced</span>) &#123;</span><br><span class="line">    store.<span class="property">_modulesNamespaceMap</span>[namespace] = <span class="variable language_">module</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set state</span></span><br><span class="line">  <span class="keyword">if</span> (!isRoot &amp;&amp; !hot) &#123;</span><br><span class="line">    <span class="keyword">const</span> parentState = <span class="title function_">getNestedState</span>(rootState, path.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">const</span> moduleName = path[path.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> local = <span class="variable language_">module</span>.<span class="property">context</span> = <span class="title function_">makeLocalContext</span>(store, namespace, path)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注册所有mutation</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="title function_">forEachMutation</span>(<span class="function">(<span class="params">mutation, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> namespacedType = namespace + key</span><br><span class="line">    <span class="title function_">registerMutation</span>(store, namespacedType, mutation, local)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注册所有action</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="title function_">forEachAction</span>(<span class="function">(<span class="params">action, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> type = action.<span class="property">root</span> ? key : namespace + key</span><br><span class="line">    <span class="keyword">const</span> handler = action.<span class="property">handler</span> || action</span><br><span class="line">    <span class="title function_">registerAction</span>(store, type, handler, local)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注册所有getter</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="title function_">forEachGetter</span>(<span class="function">(<span class="params">getter, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> namespacedType = namespace + key</span><br><span class="line">    <span class="title function_">registerGetter</span>(store, namespacedType, getter, local)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注册所有子模块</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="title function_">forEachChild</span>(<span class="function">(<span class="params">child, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">installModule</span>(store, rootState, path.<span class="title function_">concat</span>(key), child, hot)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册getters"><a href="#注册getters" class="headerlink" title="注册getters"></a>注册getters</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">registerGetter</span> (store, type, rawGetter, local) &#123;</span><br><span class="line">  <span class="keyword">if</span> (store.<span class="property">_wrappedGetters</span>[type]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`[vuex] duplicate getter key: <span class="subst">$&#123;type&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 把所有getter 注册到 _wrappedGetters对象上</span></span><br><span class="line">  store.<span class="property">_wrappedGetters</span>[type] = <span class="keyword">function</span> <span class="title function_">wrappedGetter</span> (store) &#123;</span><br><span class="line">    <span class="comment">// rawGetter就是开发者提供的getter</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">rawGetter</span>(</span><br><span class="line">      local.<span class="property">state</span>, <span class="comment">// local state</span></span><br><span class="line">      local.<span class="property">getters</span>, <span class="comment">// local getters</span></span><br><span class="line">      store.<span class="property">state</span>, <span class="comment">// root state</span></span><br><span class="line">      store.<span class="property">getters</span> <span class="comment">// root getters</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册actions"><a href="#注册actions" class="headerlink" title="注册actions"></a>注册actions</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">registerAction</span> (store, type, handler, local) &#123;</span><br><span class="line">  <span class="keyword">const</span> entry = store.<span class="property">_actions</span>[type] || (store.<span class="property">_actions</span>[type] = [])</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 利用闭包实现柯里化</span></span><br><span class="line">  <span class="comment">// 下次执行函数就不需要传参数了</span></span><br><span class="line">  entry.<span class="title function_">push</span>(<span class="keyword">function</span> <span class="title function_">wrappedActionHandler</span> (payload) &#123;</span><br><span class="line">    <span class="keyword">let</span> res = handler.<span class="title function_">call</span>(store, &#123;</span><br><span class="line">      <span class="attr">dispatch</span>: local.<span class="property">dispatch</span>,</span><br><span class="line">      <span class="attr">commit</span>: local.<span class="property">commit</span>,</span><br><span class="line">      <span class="attr">getters</span>: local.<span class="property">getters</span>,</span><br><span class="line">      <span class="attr">state</span>: local.<span class="property">state</span>,</span><br><span class="line">      <span class="attr">rootGetters</span>: store.<span class="property">getters</span>,</span><br><span class="line">      <span class="attr">rootState</span>: store.<span class="property">state</span></span><br><span class="line">    &#125;, payload)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 会用Promise包一层 action</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">isPromise</span>(res)) &#123;</span><br><span class="line">      res = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (store.<span class="property">_devtoolHook</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        store.<span class="property">_devtoolHook</span>.<span class="title function_">emit</span>(<span class="string">&#x27;vuex:error&#x27;</span>, err)</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册mutations"><a href="#注册mutations" class="headerlink" title="注册mutations"></a>注册mutations</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">registerMutation</span> (store, type, handler, local) &#123;</span><br><span class="line">  <span class="keyword">const</span> entry = store.<span class="property">_mutations</span>[type] || (store.<span class="property">_mutations</span>[type] = [])</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 对各个模块 注册mutation</span></span><br><span class="line">  entry.<span class="title function_">push</span>(<span class="keyword">function</span> <span class="title function_">wrappedMutationHandler</span> (payload) &#123;</span><br><span class="line">    handler.<span class="title function_">call</span>(store, local.<span class="property">state</span>, payload)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何初始化store中的数据"><a href="#如何初始化store中的数据" class="headerlink" title="如何初始化store中的数据"></a>如何初始化store中的数据</h2><p>需要响应式的数据有getters和state</p><p>state的响应式是通过<code>reactive</code>对象来实现的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resetStoreState</span> (store, state, hot) &#123;</span><br><span class="line">  <span class="keyword">const</span> oldState = store.<span class="property">_state</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// bind store public getters</span></span><br><span class="line">  store.<span class="property">getters</span> = &#123;&#125;</span><br><span class="line">  <span class="comment">// reset local getters cache</span></span><br><span class="line">  store.<span class="property">_makeLocalGettersCache</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> wrappedGetters = store.<span class="property">_wrappedGetters</span></span><br><span class="line">  <span class="keyword">const</span> computedObj = &#123;&#125;</span><br><span class="line">  <span class="title function_">forEachValue</span>(wrappedGetters, <span class="function">(<span class="params">fn, key</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    computedObj[key] = <span class="title function_">partial</span>(fn, store)</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(store.<span class="property">getters</span>, key, &#123;</span><br><span class="line">      <span class="attr">get</span>: <span class="function">() =&gt;</span> computedObj[key](),</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span> <span class="comment">// for local getters</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用reactive响应式state</span></span><br><span class="line">  store.<span class="property">_state</span> = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: state</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enable strict mode for new state</span></span><br><span class="line">  <span class="keyword">if</span> (store.<span class="property">strict</span>) &#123;</span><br><span class="line">    <span class="title function_">enableStrictMode</span>(store)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (oldState) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hot) &#123;</span><br><span class="line">      <span class="comment">// dispatch changes in all subscribed watchers</span></span><br><span class="line">      <span class="comment">// to force getter re-evaluation for hot reloading.</span></span><br><span class="line">      store.<span class="title function_">_withCommit</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        oldState.<span class="property">data</span> = <span class="literal">null</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何实现只有mutation才能修改state"><a href="#如何实现只有mutation才能修改state" class="headerlink" title="如何实现只有mutation才能修改state"></a>如何实现只有mutation才能修改state</h2><p>说明：只有<strong>严格模式</strong>且<strong>开发模式</strong>下，vuex才会阻止非mutation修改state</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 严格模式会调用 enableStrictMode</span></span><br><span class="line"><span class="keyword">if</span> (store.<span class="property">strict</span>) &#123;</span><br><span class="line">  <span class="title function_">enableStrictMode</span>(store)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用watch监听state，如果state发生变化</span></span><br><span class="line"><span class="comment">// 提示</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">enableStrictMode</span> (store) &#123;</span><br><span class="line">  <span class="title function_">watch</span>(<span class="function">() =&gt;</span> store.<span class="property">_state</span>.<span class="property">data</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// assert如果条件为 false会抛一场</span></span><br><span class="line">      <span class="comment">// 由于是sync</span></span><br><span class="line">      <span class="comment">// 所以会阻止修改</span></span><br><span class="line">      <span class="title function_">assert</span>(store.<span class="property">_committing</span>, <span class="string">`do not mutate vuex store state outside mutation handlers.`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123; <span class="attr">deep</span>: <span class="literal">true</span>, <span class="attr">flush</span>: <span class="string">&#x27;sync&#x27;</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以这个<code>store._committing</code>只要是<code>false</code>就会阻止修改state。</p><p>那什么时候这个值为true呢，那肯定是commit的时候</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">_withCommit</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  entry.<span class="title function_">forEach</span>(<span class="keyword">function</span> <span class="title function_">commitIterator</span> (handler) &#123;</span><br><span class="line">    <span class="title function_">handler</span>(payload)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// _withCommit方法会修改_committing的状态</span></span><br><span class="line"><span class="comment">// 执行完mutation又会 改回来</span></span><br><span class="line">_withCommit (fn) &#123;</span><br><span class="line">  <span class="keyword">const</span> committing = <span class="variable language_">this</span>.<span class="property">_committing</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_committing</span> = <span class="literal">true</span></span><br><span class="line">  <span class="title function_">fn</span>()</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_committing</span> = committing</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vuex注册流程&quot;&gt;&lt;a href=&quot;#Vuex注册流程&quot; class=&quot;headerlink&quot; title=&quot;Vuex注册流程&quot;&gt;&lt;/a&gt;Vuex注册流程&lt;/h2&gt;&lt;p&gt;首先通过&lt;code&gt;createStore&lt;/code&gt;方法创建一个store对象。然后使用</summary>
      
    
    
    
    <category term="源码" scheme="https://zxffan.github.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="vue" scheme="https://zxffan.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Electron的隔离上下文</title>
    <link href="https://zxffan.github.io/posts/b9b99d96.html"/>
    <id>https://zxffan.github.io/posts/b9b99d96.html</id>
    <published>2021-05-04T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ContextIsolation"><a href="#ContextIsolation" class="headerlink" title="ContextIsolation"></a>ContextIsolation</h2><p>处于安全考虑，<code>Electron12</code>默认开启了上下文隔离（context isolation），它会将<strong>上下文环境</strong>划分两个运行环境——<strong>主环境</strong>和<strong>隔离环境</strong></p><p>主环境：渲染进程所运行的环境，无法访问到Electron API</p><p>隔离环境：preload脚本所运行的环境，能够访问到Electron API</p><p><code>ContextIsolation</code>是默认开启的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">  <span class="attr">webPreference</span>: &#123;</span><br><span class="line">    <span class="attr">contextIsolation</span>: <span class="literal">true</span> <span class="comment">// 默认就是true</span></span><br><span class="line">    <span class="attr">preload</span>: <span class="string">&#x27;path to your preload js file&#x27;</span>, <span class="comment">// 设置preload脚本</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="ContextBridge"><a href="#ContextBridge" class="headerlink" title="ContextBridge"></a>ContextBridge</h2><p>通过使用<a href="https://www.electronjs.org/docs/api/context-bridge#contextbridgeexposeinmainworldapikey-api-experimental">ContextBridge</a>，可以通过隔离环境将<code>Electron API</code>暴露给主环境</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隔离环境</span></span><br><span class="line"><span class="keyword">const</span> &#123; contextBridge, ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(</span><br><span class="line">  <span class="string">&#x27;electron&#x27;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">doThing</span>: <span class="function">() =&gt;</span> ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;do-a-thing&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>主环境直接在window对象上使用<code>window.electron.doThing()</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ContextIsolation&quot;&gt;&lt;a href=&quot;#ContextIsolation&quot; class=&quot;headerlink&quot; title=&quot;ContextIsolation&quot;&gt;&lt;/a&gt;ContextIsolation&lt;/h2&gt;&lt;p&gt;处于安全考虑，&lt;code&gt;E</summary>
      
    
    
    
    <category term="Electron" scheme="https://zxffan.github.io/categories/Electron/"/>
    
    
    <category term="javascript" scheme="https://zxffan.github.io/tags/javascript/"/>
    
    <category term="Electron" scheme="https://zxffan.github.io/tags/Electron/"/>
    
    <category term="桌面端软件" scheme="https://zxffan.github.io/tags/%E6%A1%8C%E9%9D%A2%E7%AB%AF%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>vue-router@4.x</title>
    <link href="https://zxffan.github.io/posts/22412f62.html"/>
    <id>https://zxffan.github.io/posts/22412f62.html</id>
    <published>2021-04-30T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="vue-router是如何实现修改url而不会使页面刷新？"><a href="#vue-router是如何实现修改url而不会使页面刷新？" class="headerlink" title="vue-router是如何实现修改url而不会使页面刷新？"></a>vue-router是如何实现修改url而不会使页面刷新？</h3><p><code>vue-router</code>通过<code>history</code>这个<code>BOM</code>对象来修改url的</p><ul><li><code>history.pushState</code>：向当前浏览器会话的历史堆栈中添加一个state</li><li><code>history.replaceState</code>：替换历史堆栈栈顶的state</li></ul><p>这两个API不会导致页面刷新</p><h3 id="vue-router如何监听url变化？"><a href="#vue-router如何监听url变化？" class="headerlink" title="vue-router如何监听url变化？"></a>vue-router如何监听url变化？</h3><p><code>history.pushState</code>和<code>history.replaceState</code>是手动执行的，不需要监听</p><p>需要监听浏览器后退——<code>window.addEventListener(&quot;popstate&quot;, () =&gt; &#123;&#125;)</code></p><blockquote><p>旧版本的<code>vue-router</code>。对hash路由做了一层兼容性判断：如果浏览器支持<code>history.pushState</code>就监听<code>popstate</code>事件，否则监听<code>hashchange</code></p></blockquote><h3 id="vue-router的路由组件如何响应url变化"><a href="#vue-router的路由组件如何响应url变化" class="headerlink" title="vue-router的路由组件如何响应url变化"></a>vue-router的路由组件如何响应url变化</h3><p>在执行<code>vue-router</code>的<code>install</code>方法时，将<code>currentRoute</code>全局注入（provide），然后在<code>router-view</code>组件内<code>inject</code>。</p><p>在创建router时传入了<code>routes</code>参数，以定义应用的路由列表。<code>routes</code>是一个树结构。每一次路由变化时，都会在routes中寻找一个匹配当前跳转url的路由列表（数组）并赋值给<code>currentRoute.matched</code>。</p><p>在<code>router-view</code>中时这样获取的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> matchedRouteRef = computed&lt;<span class="title class_">RouteLocationMatched</span> | <span class="literal">undefined</span>&gt;(</span><br><span class="line">  <span class="function">() =&gt;</span> routeToDisplay.<span class="property">value</span>.<span class="property">matched</span>[depth]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>router-view</code>是一个嵌套结构，<code>depth</code>表示深度。<code>depth</code>是这样来的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> depth = <span class="title function_">inject</span>(viewDepthKey, <span class="number">0</span>) <span class="comment">// 初始默认为0</span></span><br><span class="line"><span class="title function_">provide</span>(viewDepthKey, depth + <span class="number">1</span>) <span class="comment">// +1 provide给子组件</span></span><br></pre></td></tr></table></figure><p>这样就可以获取匹配到的路由，然后就是获取路由对应的组件，并渲染。</p><h3 id="导航守卫原理"><a href="#导航守卫原理" class="headerlink" title="导航守卫原理"></a>导航守卫原理</h3><p>每次发生路由跳转时，回去执行导航守卫，源码位于<code>vue-router-next/src/router.ts</code>下的<code>navigate</code>方法。该方法主要做了：</p><ol><li>收集<code>beforeRouteLeave</code>导航守卫</li><li>执行所有收集到的导航</li><li>收集并执行全局守卫<code>beforeEach</code></li><li>收集并执行<code>beforeRouteUpdate</code></li><li>收集并执行<code>beforeEnter</code></li><li>收集并执行<code>beforeRouteEnter</code></li><li>收集并执行<code>beforeResolve</code></li><li>最后执行<code>afterEach</code></li></ol><blockquote><p>整个过程是Promise链式调用。若其中一步reject，后面就不会执行了。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;h3 id=&quot;vue-router是如何实现修改url而不会使页面刷新？&quot;&gt;&lt;a href=&quot;#vue-router是如何实现修改url而不会使</summary>
      
    
    
    
    <category term="源码" scheme="https://zxffan.github.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="vue" scheme="https://zxffan.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>网络知识梳理</title>
    <link href="https://zxffan.github.io/posts/8c9e2fd.html"/>
    <id>https://zxffan.github.io/posts/8c9e2fd.html</id>
    <published>2021-04-29T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP演进"><a href="#HTTP演进" class="headerlink" title="HTTP演进"></a>HTTP演进</h2><h3 id="HTTP-x2F-0-9"><a href="#HTTP-x2F-0-9" class="headerlink" title="HTTP&#x2F;0.9"></a>HTTP&#x2F;0.9</h3><p>第一版HTTP协议，只能传输文本，请求报文内容只有 1 行。</p><ul><li>客户端：请求报文：<code>GET/index.html</code></li><li>服务端：返回一个以 ASCII 字符流编码的 HTML 文档。</li></ul><h3 id="HTTP-x2F-1-0"><a href="#HTTP-x2F-1-0" class="headerlink" title="HTTP&#x2F;1.0"></a>HTTP&#x2F;1.0</h3><p>HTTP 可以用来传输脚本、样式、图片、音频和视频等不同类型的文件</p><p>增加了头部的设定，<code>Accept</code>和<code>Content-Type</code></p><h3 id="HTTP-x2F-1-1"><a href="#HTTP-x2F-1-1" class="headerlink" title="HTTP&#x2F;1.1"></a>HTTP&#x2F;1.1</h3><p>解决了<code>HTTP/1.0</code>的连接问题，支持TCP连接复用</p><ul><li><code>HTTP/1.0</code>：每次请求都会建立连接、传输数据和断开连接三个阶段</li><li><code>HTTP/1.1</code>：第二次请求会复用第一次请求的TCP连接</li></ul><p>长连接可以在请求头中加上<code>Connection: keep-alive</code>。<code>HTTP/1.1</code>默认开启<code>keep-alive</code>，不加这个请求头也可以使用长连接的。</p><h3 id="HTTP-x2F-2"><a href="#HTTP-x2F-2" class="headerlink" title="HTTP&#x2F;2"></a>HTTP&#x2F;2</h3><p><code>HTTP/2</code>增强了并发能力</p><ul><li><strong>二进制传输</strong>：<code>http/1.1</code>传输的是文本，<code>http/2</code>传输的是二进制流</li><li><strong>多路复用</strong>：<code>http/2</code>有两个概念——<strong>帧</strong>和<strong>流</strong>。<code>http/2</code>将数据报文分成一个个二进制<strong>帧（Frame）</strong>，在一个TCP连接中，不同的帧组合在一起发送（<strong>二进制分帧</strong>）形成<strong>流（Stream）</strong>。在接收方根据帧首部信息在组合起来。<code>HTTP/1.1</code>只能一个个请求报文排队发送（容易发生<strong>队头阻塞</strong>）。</li><li><strong>header压缩</strong>：http请求有这繁多冗长的首部，<code>http/2</code>会对首部进行压缩</li><li><strong>服务端推送</strong>：能够主动给客户端推送资源<ul><li><code>http/1.1</code>加载网页的顺序：请求html，解析html，再请求js、css等文件</li><li><code>http/2</code>：当服务端收到html请求时，服务端就主动吧html、css、js以及图片等资源发送给客户端</li></ul></li></ul><h3 id="HTTP-x2F-3"><a href="#HTTP-x2F-3" class="headerlink" title="HTTP&#x2F;3"></a>HTTP&#x2F;3</h3><p><code>HTTP/1.x</code>、<code>HTTPS</code>以及<code>HTTP/2.0</code>都离不开底层的<code>TCP</code>协议。</p><p><code>HTTP/2.0</code>采用多路复用，多个数据包使用一个<code>TCP</code>连接。<code>TCP</code>是可靠连接，但发生丢包时，会进行重传。所以网络状态差的情况下，某些数据包频繁重传，从而导致拥塞，后面的HTTP包都穿不出去。这叫做<strong>头部阻塞（Head of line Blocking）</strong></p><p><code>HTTP/3.0</code>就开始考虑放弃<code>TCP</code>转向<code>UDP</code>协议。起初<code>Google</code>搞出来个<code>QUIC</code>协议，后来<code>IETF</code>标准化了<code>QUIC</code>协议形成<code>HTTP/3</code>。其底层采用<code>UDP</code>，基于<code>UDP</code>实现做了众多增强：</p><ul><li>0RTT：<code>TPC</code>建立连接每次都需要三次握手，就存在数据包的三次往返即<strong>3RTT</strong>。而<code>QUIC</code>首次建立连接只需要<code>1RTT</code>。其后的连接可以直接复用，只需要<strong>0RTT</strong></li><li>连接迁移：当<code>源IP</code>、<code>源端口</code>、<code>目的IP</code>、<code>目的端口</code>其中一个发生变化就需要重新建立TCP连接。只要<strong>Connection ID</strong>没有变化。<code>HTTP/3</code>可以继续复用连接</li><li>头部阻塞：由于使用<code>UDP</code>，发生丢包时，也不会立即重传，阻塞连接。</li><li>拥塞控制</li><li>前向纠错</li><li>更多特性 请参考<a href="https://zhuanlan.zhihu.com/p/143464334">文章</a></li></ul><p>chrome只支持 <code>Google QUIC</code>。对<code>IETF QUIC</code>的支持处于<code>WIP</code>状态</p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTP(超文本传输协议)，有着一个致命的缺陷，那就是内容是<strong>明文传输</strong>的，没有经过任何加密，而这些明文数据会经过<strong>WiFi、路由器、运营商、机房</strong>等多个物理设备节点，如果在这中间任意一个节点被监听，传输的内容就会完全暴露，这一攻击手法叫做MITM（Man In The Middle）<strong>中间人攻击</strong>。</p><p>HTTPS &#x3D; HTTP + TLS&#x2F;SSL。HTTPS就是在HTTP（应用层）与TCP（传输层）之间加上了一层<code>TLS/SSL</code>协议</p><h3 id="对称加密和非对称加密"><a href="#对称加密和非对称加密" class="headerlink" title="对称加密和非对称加密"></a>对称加密和非对称加密</h3><p>区别：</p><ul><li>加解密方式不同：<ul><li>对称加密使用同一个密钥加解密</li><li>非对称加密使用不同的密钥加解密</li></ul></li><li>性能：对称加密比非对称加密快</li></ul><h3 id="CA-Certification-Authority"><a href="#CA-Certification-Authority" class="headerlink" title="CA(Certification Authority)"></a>CA(Certification Authority)</h3><p>CA是为了保证密钥的正确性。具体来说就是把密钥放入一个证书中，该证书包含服务端的信息，比如颁发者、域名、有效期，为了保证证书是可信的，需要由一个可信的第三方来对证书进行签名。这个第三方一般是证书的颁发机构，也称 CA（Certification Authority，认证中心）。</p><h3 id="HTTPS工作流程"><a href="#HTTPS工作流程" class="headerlink" title="HTTPS工作流程"></a>HTTPS工作流程</h3><p><img src="/../../images/network/HTTP-process.webp" alt="https"></p><ol><li>客户端发送HTTPS请求（默认端口443）</li><li>服务端有一套<code>CA数字证书</code>，证书含有一个<code>公钥public</code>。服务端接收到请求，会将这个证书发送给客户端。服务端还有一个<code>私钥private</code>，私钥是一直保存再服务端不公开的。</li><li>客户端收到证书，校验合法性，主要包括是否在有效期内、证书的域名与请求的域名是否匹配，上一级证书是否有效（递归判断，直到判断到系统内置或浏览器配置好的根证书），如果不通过，则显示HTTPS警告信息，如果通过则继续。</li><li>客户端先生成一段<code>随机key</code>，再利用证书中的<code>公钥public</code>加密这段<code>随机key</code>，并将这个<code>随机key密文</code>发送给服务端。</li><li>服务端收到这个<code>随机key密文</code>文后，通过<code>私钥private</code>来解密，获取客户端真正的<code>随机key</code></li><li>服务端使用<code>随机key</code>来加密需要传输的HTTP数据，并发送给客户端</li><li>客户端再用<code>随机key</code>来解密服务端传输过来的密文，获取真正的数据</li><li>后续HTTPS请求使用之前交换好的<code>随机Key</code>进行对称加解密。</li></ol><blockquote><p> 由于随机key明文没有再网络上传输，所以”中间人”并不知道用于加密和解密的随机key，因此是安全的</p></blockquote><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><p><code>SYN</code>报文：请求连接</p><p><code>ACK</code>报文：应答</p><p><code>FIN</code>报文：断开连接</p><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><p>三次握手就是建立TCP连接的过程，流程如下图：</p><p><img src="/../../images/network/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="三次握手"></p><p>一共分三步：</p><ol><li>客户端发送SYN消息给服务端（告知服务端要建立连接）</li><li>服务端同时发送两个消息（SYN和ACK）给客户端<ul><li>ACK表示收到了客户端的SYN</li><li>SYN表示服务端也要连接客户端</li></ul></li><li>客户端发送ACK给服务端（表示接受服务端的SYN）</li></ol><blockquote><p> <strong>为什么要三次握手？</strong></p><p>TCP是可靠传输，三次握手目的是确认双方的接收和发送能力。经过三次握手，服务端和客户端都确认了双方的接收和发送能力。</p></blockquote><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p>四次挥手是TCP断开连接的过程，流程如下图</p><p><img src="/../../images/network/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" alt="四次挥手.png"></p><p>一共分为四步：（客户端和服务端都可以断开请求，以服务端为例）</p><ol><li>服务端发送FIN请求，表示服务端要断开连接</li><li>客户端发送ACK请求，表示收到了服务端的请求</li><li>客户单发送FIN请求，表示客户端也要断开连接</li><li>服务端发送ACK请求，表示收到了客户端的请求</li></ol><blockquote><p>为什么2，3步骤不能一起发送</p><p>ACK只是对FIN的应答，断开连接要处理的问题比较多，比如说服务端&#x2F;客户端可能还有发送出去的消息没有得到 ACK；也有可能服务端自己有资源要释放。</p></blockquote><h2 id="webscoket"><a href="#webscoket" class="headerlink" title="webscoket"></a>webscoket</h2><p><code>websocket</code>的建立也是通过<code>http</code>实现的</p><p>首先，客户端先发送一个HTTP请求，请求头携带以下信息</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">ws://websocket.example.com/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>websocket.example.com</span><br><span class="line"><span class="attribute">Upgrade</span><span class="punctuation">: </span>websocket</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Upgrade</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://example.com</span><br><span class="line">Sec-WebSocket-Key:pAloKxsGSHtpIHrJdWLvzQ==</span><br><span class="line">Sec-WebSocket-Version:13</span><br></pre></td></tr></table></figure><ul><li><code>Connection: Upgrade</code>告知服务端，浏览器想要升级协议</li><li><code>Upgrade: websocket</code>：升级到websocket协议</li><li><code>Sec-WebSocket-Key</code>浏览器的随机key，用于娇艳</li><li><code>Sec-WebSocket-Version</code>：websocket版本</li></ul><p>服务端收到请求，就开始升级协议，返回101。服务端收到。响应大概是这样的</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">101</span> Switching Protocols</span><br><span class="line"><span class="attribute">Upgrade</span><span class="punctuation">: </span>websocket</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Upgrade</span><br><span class="line"><span class="attribute">Sec-WebSocket-Accept</span><span class="punctuation">: </span>nRu4KAPUPjjWYrnzxDVeqOxCvlM=</span><br></pre></td></tr></table></figure><p><code>Sec-WebSocket-Accept</code>是根据响应头中的key进行加密而来的</p><p>客户端收到这个响应后，会校验这个<code>accept</code>。就是以同样的方式加密key，看key和accept是否相同。</p><p>到这里，websocket的连接就建立完成了。随后的请求都是以websocket协议发送。</p><h2 id="网络分层结构"><a href="#网络分层结构" class="headerlink" title="网络分层结构"></a>网络分层结构</h2><h3 id="TCP-x2F-IP-四层模型"><a href="#TCP-x2F-IP-四层模型" class="headerlink" title="TCP&#x2F;IP 四层模型"></a>TCP&#x2F;IP 四层模型</h3><p><code>TCP/IP</code>是互联网相关的各类协议族的总称<br><code>TCP/IP</code>具有分层结构，分为：应用层、传输层、网络层和数据链路层</p><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>应用层决定了向用户提供应用服务时通信的活动。<br>相关协议：<code>FTP</code>、<code>DNS</code>以及<code>HTTP</code></p><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><p>传输层提供处于网络连接中的两台计算机之间的数据传输<br>相关协议：<code>TCP</code>和<code>UDP</code></p><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><p>网络层规定了数据包通过怎样的传输线路到达对方计算机<br>相关协议：<code>IP</code></p><h4 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h4><p>数据链路是用来处理连接网络的<strong>硬件部分</strong><br>例如：<code>NIC(网卡)</code>、<code>光纤</code>等物理可见部分</p><h3 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h3><ul><li>应用层</li><li>表示层：负责数据格式的转换</li><li>会话层：负责建立和断开通信连接</li><li>传输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul><p><img src="/../../images/network/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E7%BB%93%E6%9E%84.webp" alt="网络分层结构"></p><h4 id="数据链路层-1"><a href="#数据链路层-1" class="headerlink" title="数据链路层"></a>数据链路层</h4><p>数据链路层主要有3种功能：</p><ul><li>封装成帧：将物理层上交的比特流封装成帧</li><li>透明传输：封装成帧的时候，会给每个帧加上帧开始符（SOH）和帧结束符（EOT）。是指该层上传输的数据的内容、格式及编码没有限制，也没有必要解释信息结构的意义</li><li>差错检测<ul><li>比特差错</li><li>帧 丢失&#x2F;重复&#x2F;失序</li></ul></li></ul><p>对于网络层，由于链路层的存在，而不需要关心物理层具体采用了那种传输介质和通信设备。</p><blockquote><p>网络层、数据链路层和物理层要关联理解。</p><p>假如A与B通信（在不同的网段中），实际上AB之间还有很多的物理设备（交换机、路由器）。物理设备之间是通过传输介质相连接，比如光纤、同轴电缆（这属于物理层）。</p><p>消息从A到B，需要经过一个个的网段，每个网段内都是通过mac地址来寻找下一个站点（数据链路层）。在公网上使用IP来寻找目的主机（网络层）</p></blockquote><h4 id="传输单元"><a href="#传输单元" class="headerlink" title="传输单元"></a>传输单元</h4><p>物理层的 数据传输单元是数据位（bit）<br>数据链路层的数据传输单元是数据帧（frame）<br>网络层的数据传输单元是数据包（packet）<br>传输层的 数据传输单元是数据段（segment）<br>其他更高层次的数据传输单元是数据（data）</p><h3 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h3><table><thead><tr><th align="left"></th><th align="left">UDP</th><th>TCP</th></tr></thead><tbody><tr><td align="left">是否连接</td><td align="left">无连接</td><td>面向连接</td></tr><tr><td align="left">是否可靠</td><td align="left">不可靠传输，不使用流量控制和拥塞控制</td><td>可靠传输，使用流量控制和拥塞控制</td></tr><tr><td align="left">连接对象个数</td><td align="left">支持一对一，一对多，多对一和多对多交互通信</td><td>只能是一对一通信</td></tr><tr><td align="left">传输方式</td><td align="left">面向报文</td><td>面向字节流</td></tr><tr><td align="left">首部开销</td><td align="left">首部开销小，仅8字节</td><td>首部最小20字节，最大60字节</td></tr><tr><td align="left">适用场景</td><td align="left">适用于实时应用（IP电话、视频会议、直播等）</td><td>适用于要求可靠传输的应用，例如文件传输</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTTP演进&quot;&gt;&lt;a href=&quot;#HTTP演进&quot; class=&quot;headerlink&quot; title=&quot;HTTP演进&quot;&gt;&lt;/a&gt;HTTP演进&lt;/h2&gt;&lt;h3 id=&quot;HTTP-x2F-0-9&quot;&gt;&lt;a href=&quot;#HTTP-x2F-0-9&quot; class=&quot;head</summary>
      
    
    
    
    <category term="NetWork" scheme="https://zxffan.github.io/categories/NetWork/"/>
    
    
    <category term="NetWork" scheme="https://zxffan.github.io/tags/NetWork/"/>
    
    <category term="HTTP" scheme="https://zxffan.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript原型污染</title>
    <link href="https://zxffan.github.io/posts/54b3fc67.html"/>
    <id>https://zxffan.github.io/posts/54b3fc67.html</id>
    <published>2021-04-28T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型污染"><a href="#原型污染" class="headerlink" title="原型污染"></a>原型污染</h2><blockquote><p>原型污染就是，通过某种手段达到修改JavaScript原型的目的</p></blockquote><p>比如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;</span><br></pre></td></tr></table></figure><p>定义了一个对象a，a有一个<code>constructor</code>属性指向a的构造器（<code>Object</code>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="property">constructor</span> === <span class="title class_">Object</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>Object很常用，比如：<code>Object.prototype.toString</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(a) <span class="comment">// &quot;[object Object]&quot; 获取类型</span></span><br></pre></td></tr></table></figure><p>但是问题来了，通过a对象可以访问并修改Object对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;attack&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再使用 toString</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(a) <span class="comment">// &quot;attack&quot;</span></span><br></pre></td></tr></table></figure><p>这就发生了<strong>原型污染</strong></p><blockquote><p>lodash发生过一次严重的原型污染bug，场景是两个对象合并<code>merge(a, b)</code>， </p></blockquote><h2 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h2><h3 id="过滤危险属性"><a href="#过滤危险属性" class="headerlink" title="过滤危险属性"></a>过滤危险属性</h3><p>两个对象合并，把<code>constructor</code>属性和<code>__proto__</code>这样的敏感过滤掉。</p><h3 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze"></a>Object.freeze</h3><p><code>Object.freeze</code>可以冻结一个对象，这个对象不能被修改。</p><p>原理就是修改对象的<code>descriptor</code>中的<code>writable:false</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="string">&quot;attack&quot;</span></span><br><span class="line"></span><br><span class="line">consoel.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>) <span class="comment">// ƒ toString() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Object-create-null"><a href="#Object-create-null" class="headerlink" title="Object.create(null)"></a>Object.create(null)</h3><p>创建一个原型对象为null的对象，这样就不存在污染原型的情况</p><h3 id="Map代替对象字面量"><a href="#Map代替对象字面量" class="headerlink" title="Map代替对象字面量"></a>Map代替对象字面量</h3><p><code>map.set(&quot;__proto__&quot;, xx)</code>并不会修改原型对象</p><h2 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h2><p>深合并和深拷贝算法注意<strong>原型污染</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;原型污染&quot;&gt;&lt;a href=&quot;#原型污染&quot; class=&quot;headerlink&quot; title=&quot;原型污染&quot;&gt;&lt;/a&gt;原型污染&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;原型污染就是，通过某种手段达到修改JavaScript原型的目的&lt;/p&gt;
&lt;/blockquote</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://zxffan.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://zxffan.github.io/tags/JavaScript/"/>
    
    <category term="Promise" scheme="https://zxffan.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>Webpack构建流程源码解析</title>
    <link href="https://zxffan.github.io/posts/aef11e42.html"/>
    <id>https://zxffan.github.io/posts/aef11e42.html</id>
    <published>2021-04-27T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.597Z</updated>
    
    <content type="html"><![CDATA[<p>webpack的构建分为3个阶段：</p><ul><li>准备阶段：生成 <code>compiler</code>和<code>compilation</code>对象</li><li>编译阶段：递归生成模块依赖图</li><li>产出阶段：优化modules，生成chunks。最终输出文件</li></ul><p>本文讨论的是<code>webpack@5.34.0</code></p><h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><h3 id="创建compiler"><a href="#创建compiler" class="headerlink" title="创建compiler"></a>创建compiler</h3><p>对于每一个wepback的构建配置，都会创建一个<code>compiler</code>对象，记录着整个 Webpack 的生命周期</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> webpack <span class="keyword">from</span> <span class="string">&quot;webpack&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compiler = <span class="title function_">webpack</span>(options)</span><br><span class="line"><span class="comment">// webpack(options, () =&gt; &#123;&#125;)</span></span><br></pre></td></tr></table></figure><p>调用webpack函数会返回<code>compiler</code>对象，其内部大致逻辑如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">webpack</span> = (<span class="params">options, callback</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 1. 创建compiler</span></span><br><span class="line">  <span class="keyword">let</span> compiler;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(options)) compiler = <span class="title function_">createMultiCompiler</span>(options, options);</span><br><span class="line">  <span class="keyword">else</span> compiler = <span class="title function_">createCompiler</span>(options);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2.</span></span><br><span class="line">  <span class="comment">// 有callback参数就会自动执行compiler.run</span></span><br><span class="line">  <span class="comment">// options中watch为true就会自动调用compiler.watch</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3. 返回compiler</span></span><br><span class="line">  <span class="keyword">return</span> compiler</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>示例代码并非是webpack中的源码。只是将源码中的核心逻辑提炼出来的伪代码，这样更方便理解webpack的主流程。下同。</p></blockquote><p><code>createCompiler</code>和<code>createMultiCompiler</code>才是真正创建<code>compiler</code>的逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">createCompiler</span> = rawOptions =&gt; &#123;</span><br><span class="line"><span class="comment">// 1. normalize options</span></span><br><span class="line">  <span class="comment">// 就是对传入的options做些初始化，添加默认参数之类的工作</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2. 他来了，创建compiler对象</span></span><br><span class="line"><span class="keyword">const</span> compiler = <span class="keyword">new</span> <span class="title class_">Compiler</span>(options.<span class="property">context</span>);</span><br><span class="line">compiler.<span class="property">options</span> = options;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2. 新建NodeEvniromentPlugin，这是wepback启用的第一个plugin</span></span><br><span class="line">  <span class="comment">// 主要作用是 </span></span><br><span class="line">  <span class="comment">// - 创建日志（方便webpack输出构建日志）</span></span><br><span class="line">  <span class="comment">// - 设置compiler的文件系统 inputFileSystem...</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">NodeEnvironmentPlugin</span>(&#123;</span><br><span class="line"><span class="attr">infrastructureLogging</span>: options.<span class="property">infrastructureLogging</span></span><br><span class="line">&#125;).<span class="title function_">apply</span>(compiler);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 3. 执行所有plugin</span></span><br><span class="line">  <span class="comment">// - 函数plugin，执行函数</span></span><br><span class="line">  <span class="comment">// - class plugin，执行其apply方法</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(options.<span class="property">plugins</span>)) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> plugin <span class="keyword">of</span> options.<span class="property">plugins</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> plugin === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">plugin.<span class="title function_">call</span>(compiler, compiler);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">plugin.<span class="title function_">apply</span>(compiler);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">applyWebpackOptionsDefaults</span>(options);</span><br><span class="line">compiler.<span class="property">hooks</span>.<span class="property">environment</span>.<span class="title function_">call</span>(); <span class="comment">// hook</span></span><br><span class="line">compiler.<span class="property">hooks</span>.<span class="property">afterEnvironment</span>.<span class="title function_">call</span>(); <span class="comment">// hook</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 5.添加默认内置plugin</span></span><br><span class="line">  <span class="comment">// 根据options的设置来配置响应内置plugin</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">WebpackOptionsApply</span>().<span class="title function_">process</span>(options, compiler); </span><br><span class="line">compiler.<span class="property">hooks</span>.<span class="property">initialize</span>.<span class="title function_">call</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> compiler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createMultiCompiler</span> = (<span class="params">childOptions, options</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 给每一个option创建一个compiler</span></span><br><span class="line"><span class="keyword">const</span> compilers = childOptions.<span class="title function_">map</span>(<span class="function"><span class="params">options</span> =&gt;</span> <span class="title function_">createCompiler</span>(options));</span><br><span class="line">  <span class="comment">// 创建MultiCompiler对象</span></span><br><span class="line"><span class="keyword">const</span> compiler = <span class="keyword">new</span> <span class="title class_">MultiCompiler</span>(compilers, options);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> compiler;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里注意一点：在<code>compiler</code>对象创建后：</p><ol><li>逐一执行<code>options.plugins</code>中所有的plugin。</li><li>根据options的内容，添加webpack内置的plugin。比如<code>EntryOptionPlugin</code>。针对不同环境(node electron browser)会设置不同的plugin。</li></ol><blockquote><p>webpack有大量的内置plugin，这都是在<code>WebpackOptionsApply</code>中的<code>process</code>来设置的。可以说webpack的所有功能(resolve optimization module解析…)都是由相应的plugin完成的。</p></blockquote><p>获得<code>compiler</code>对象后，下一步就时进行构建，这是通过<code>compiler.run</code>方法实现的。</p><p><code>run</code>方法主要做了2件事：</p><ul><li>执行compiler的hook <code>beforeRun</code> <code>run</code> <code>readRecords</code>。在创建compiler对象时会执行所有plugin。如果在这三个hook绑定的了事件，在此时会被执行。（这三个hook时串行执行的，代码是嵌套的）</li><li>执行<code>compiler.compile</code>方法进行构建</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">beforeRun</span>.<span class="title function_">callAsync</span>(<span class="variable language_">this</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">finalCallback</span>(err);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">run</span>.<span class="title function_">callAsync</span>(<span class="variable language_">this</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">finalCallback</span>(err);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">readRecords</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">finalCallback</span>(err);</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">compile</span>(onCompiled);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="创建Compilation"><a href="#创建Compilation" class="headerlink" title="创建Compilation"></a>创建Compilation</h3><p><code>compilation</code>对象属于<code>compiler</code>。每一次构建，<code>compiler</code>都会创建一个<code>compilation</code>对象</p><p><code>compiler.compile</code>方法会真正地创建<code>compilation</code>对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./lib/Compiler.js</span></span><br><span class="line"><span class="comment">// compile</span></span><br><span class="line"><span class="keyword">const</span> params = <span class="variable language_">this</span>.<span class="title function_">newCompilationParams</span>();</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">beforeCompile</span>.<span class="title function_">callAsync</span>(params, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">callback</span>(err);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">compile</span>.<span class="title function_">call</span>(params);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建compilation对象</span></span><br><span class="line">  <span class="keyword">const</span> compilation = <span class="variable language_">this</span>.<span class="title function_">newCompilation</span>(params);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 执行compiler的各种hook</span></span><br><span class="line">  <span class="comment">// 以及执行compilation的 finish 和 seal方法</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>代码很长，主要流程如下:</p><ol><li><code>compiler.hooks.beforeCompile</code> </li><li>创建<code>compilation</code>对象。这里调用了<code>compiler.newCompilation</code>方法，该方法做了以下几件事<ol><li>创建<code>compilation</code>，会先清理上一次构建的<code>compilation</code>对象</li><li><code>compiler.hooks.thisCompilation</code></li><li><code>compiler.hooks.compilation</code></li></ol></li><li><code>compiler.hooks.make</code> </li><li><code>compiler.hooks.finishMake</code></li><li><code>compilation.finish</code></li><li><code>compilation.seal</code></li><li><code>compiler.hooks.afterCompile</code></li></ol><p>这些hooks都是串行执行的。<code>afterCompile</code>这个hook的执行表示一次构建已经完成。那么从compilation对象创建完成到<code>afterCompile</code>触发之前，包含了<strong>编译阶段</strong>和<strong>产出阶段</strong></p><h2 id="编译阶段"><a href="#编译阶段" class="headerlink" title="编译阶段"></a>编译阶段</h2><p><code>compiler.hooks.make</code>这个hook被触发执行，就代表了编译开始。</p><p>在<code>compiler</code>创建时(<code>new WebpackOptionsApply().process(options, compiler); </code>)，这里给compiler添加了许多并绑定了许多内置plugin。其中有一个<code>EntryOptionsPlugin</code>，他是用于解析入口(entry)配置。根据entry字段类型再选择不同的plugin</p><ul><li>entry为function：<code>DynamicEntryPlugin</code></li><li>entry不为function：<code>EntryPlugin</code></li></ul><p>编译阶段的开始就是从<code>entry</code>文件开始解析<code>module</code>。</p><p>以<code>EntryPlugin</code>为例，其apply方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">compiler.<span class="property">hooks</span>.<span class="property">make</span>.<span class="title function_">tapAsync</span>(<span class="string">&quot;EntryPlugin&quot;</span>, <span class="function">(<span class="params">compilation, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; entry, options, context &#125; = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dep = <span class="title class_">EntryPlugin</span>.<span class="title function_">createDependency</span>(entry, options);</span><br><span class="line">  compilation.<span class="title function_">addEntry</span>(context, dep, options, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">callback</span>(err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>EntryPlugin</code>在<code>compile.make</code>这个hook上注册了一个事件。<code>compiler.hooks.make</code>这个hook被触发执行时，hook上注册的事件全都会被执行。</p><p><code>EntryPlugin</code>会调用<code>compilation.addEntry</code>方法。</p><p>接下看就看<code>compilation</code>的表演：</p><ol><li>addEntry添加入口文件</li><li>将资源文件转成<code>NormalModule</code>对象（简称module对象），一个文件(js css img)都是一个module</li><li>调用<code>module.build</code>方法</li><li>调用<code>runLoaders</code>，找到相应的loader处理该module</li><li>对于js module，会通过<code>acorn</code>转成<code>AST</code>。分析模块依赖关系，如果有依赖模块 调用<code>compilation.addEntry</code>（第1步）</li><li>最终获取所有module</li></ol><blockquote><p>编译阶段是一个递归的过程</p><p>每一个module build完成都会触发<code>compilation.hooks.succeedModule</code>，并传入当前module对象</p></blockquote><h2 id="产出阶段"><a href="#产出阶段" class="headerlink" title="产出阶段"></a>产出阶段</h2><p>调用<code>compilation.seal</code>方法，封存文件就是处理文件生成chunk。</p><h3 id="Seal"><a href="#Seal" class="headerlink" title="Seal"></a>Seal</h3><p>首先触发<code>compilation.hooks.optimizeDependencies</code>这个hook上的所有事件。对module做一些优化操作（比如<code>tree-shaking</code>）</p><p>根据入口生成chunk，有几个入口就会有几个chunk。</p><p>然后就是递归分析chunk，如果有动态导入(<code>import()</code>)就会单独拆分出chunk</p><blockquote><p>这个过程还有一堆hooks，这些可以在这些hooks上做些优化操作。比如<code>optimizeModules</code>和<code>optimizeChunks</code></p></blockquote><p>生成chunck的<code>hash</code></p><p>生成chunk的<code>sourceMap</code></p><h3 id="Assets"><a href="#Assets" class="headerlink" title="Assets"></a>Assets</h3><p><code>createChunkAssets</code>生成assets ，会将生成的Assets存放到<code>compilation.assets</code>数组中</p><p><code>emitAsset</code>将文件输出</p><h2 id="Watch模式"><a href="#Watch模式" class="headerlink" title="Watch模式"></a>Watch模式</h2><p>当调用<code>compiler.watch</code>，会启用watch模式。当文件发生更改是，会自动重新构建.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="title function_">watch</span>(<span class="params">watchOptions, handler</span>) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">watching</span> = <span class="keyword">new</span> <span class="title class_">Watching</span>(<span class="variable language_">this</span>, watchOptions, handler);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">watching</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>watch方法创建了一个<code>Watching</code>实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Watch</span> &#123;</span><br><span class="line">  <span class="title function_">contstructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_invalidate</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">_invalidate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 防止重复构建</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_go</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">_go</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 构建逻辑</span></span><br><span class="line">    compiler.<span class="title function_">compile</span>() <span class="comment">// 调用compiler的compile方法进行构建</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">_done</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 构建完成了</span></span><br><span class="line">    <span class="comment">// 获取构建完后的依赖</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">watch</span>() <span class="comment">// 监听这些依赖</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">watch</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 监听文件变化</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">compiler</span>.<span class="property">watchFileSystem</span>.<span class="title function_">watch</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 文件发生变化 监听的回调会被调用</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_invalidate</span>() <span class="comment">// 进行下一轮构建</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听文件是通过<code>this.compiler.watchFileSystem.watch()</code>方法来实现的。这个<code>watchFileSystem</code>是在创建<code>compiler</code>对象时，初始化的。</p><p>创建<code>compiler</code>时，执行了<code>NodeEvniromentPlugin</code>。这个plugin会设置文件系统。将<code>watchFleSystem</code>设置成<code>NodeWatchFileSystem</code>，而其内部又会创建一个<code>watchpack</code>对象来监听文件变化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NodeEnvironmentPlugin</span> &#123;</span><br><span class="line"><span class="title function_">apply</span>(<span class="params">compiler</span>) &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">compiler.<span class="property">inputFileSystem</span> = <span class="keyword">new</span> <span class="title class_">CachedInputFileSystem</span>(fs, <span class="number">60000</span>);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">compiler.<span class="property">watchFileSystem</span> = <span class="keyword">new</span> <span class="title class_">NodeWatchFileSystem</span>(</span><br><span class="line">compiler.<span class="property">inputFileSystem</span></span><br><span class="line">);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>值得一提的是，当文件短时间变化多次，会触发多次构建吗？</p><p>其实是不会的，<code>watchpack</code>添加了防抖机制。只会触发最后一次。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一张图总结流程</p><p><img src="/../../images/framework/webpack%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B.svg" alt="webpack构建流程"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;webpack的构建分为3个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备阶段：生成 &lt;code&gt;compiler&lt;/code&gt;和&lt;code&gt;compilation&lt;/code&gt;对象&lt;/li&gt;
&lt;li&gt;编译阶段：递归生成模块依赖图&lt;/li&gt;
&lt;li&gt;产出阶段：优化modules，生</summary>
      
    
    
    
    <category term="工程化" scheme="https://zxffan.github.io/categories/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
    <category term="javascript" scheme="https://zxffan.github.io/tags/javascript/"/>
    
    <category term="webpack" scheme="https://zxffan.github.io/tags/webpack/"/>
    
    <category term="架构" scheme="https://zxffan.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>vue2-生命周期</title>
    <link href="https://zxffan.github.io/posts/bdeefbce.html"/>
    <id>https://zxffan.github.io/posts/bdeefbce.html</id>
    <published>2021-04-26T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue2生命周期图"><a href="#Vue2生命周期图" class="headerlink" title="Vue2生命周期图"></a>Vue2生命周期图</h2><p><img src="/../../images/Vue/vue2%E4%BB%8E%E5%88%9B%E5%BB%BA%E5%88%B0%E6%B8%B2%E6%9F%93.svg" alt="生命周期"></p><h2 id="组件创建到页面渲染"><a href="#组件创建到页面渲染" class="headerlink" title="组件创建到页面渲染"></a>组件创建到页面渲染</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><code>new Vue()</code>的执行，会创建一个组件实例（根组件）<code>vm</code>，然后进行各种初始化工作</p><ol><li>合并 options，也就是初始化组件的options选项</li><li>初始化vm（组件实例）上的各个属性</li><li>初始化绑定在当前组件上的listener(v-on)</li><li>初始化render函数，在vm上绑定createElement方法</li><li>**<code>beforeCreated</code>**钩子调用</li><li>将inject定义为响应式</li><li>.初始化, 定义响应式数据 <code>props</code>  <code>methods</code> <code>data</code> <code> computed</code> <code>watch</code></li><li>初始化vm._provide属性</li><li>**<code>creted</code>**钩子调用</li></ol><h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><p>如果<code>new Vue</code>传入了<code>el</code>属性，就会自动调用<code>vm.$mount</code>方法，渲染实例</p><ol><li>调用<code>mountComponent</code></li><li>新建Watcher，传入<code>updateComponent</code>逻辑</li><li>Watcher调用<code>updateComponent</code>逻辑</li><li>进入<code>patch</code>逻辑</li></ol><h2 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h2><p>vue2的响应式涉及到三种角色——<code>reactiveObj(响应式对象)</code> <code>Watcher</code>  <code>Dep</code></p><ul><li>响应式对象通过<code>Object.defineProperty</code>拦截getter和setter</li><li>Watcher用于触发组件更新</li><li>每个响应式对象都有一个dep对象，它有一个subs的Watcher数组，用于记录依赖该响应式对象的所有watcher</li></ul><p>当组件开始渲染时：</p><ul><li>会创建一个<code>Watcher</code>对象。将组件更新的逻辑（<code>updateComponent</code>）记录到Watcher</li><li>将Dep.target设置为 创建的 <code>Watcher</code>对象</li></ul><p>随即执行render方法，会触发响应式对象的getter。将<code>Dep.target</code>添加到<code>dep.subs</code>中，即依赖收集</p><p>在修改响应式对象，会触发setter。</p><ul><li>执行<code>dep.notify</code>，触发<code>dpe.subs</code>中所有<code>watcher</code>的<code>update</code>方法</li><li><code>watcher.update()</code>会触发<code>updateComponent</code>，从而使得组件更新</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue2生命周期图&quot;&gt;&lt;a href=&quot;#Vue2生命周期图&quot; class=&quot;headerlink&quot; title=&quot;Vue2生命周期图&quot;&gt;&lt;/a&gt;Vue2生命周期图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/../../images/Vue/vue2%E4%BB%8E%</summary>
      
    
    
    
    <category term="源码" scheme="https://zxffan.github.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="vue" scheme="https://zxffan.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Webpack之SplitChunks</title>
    <link href="https://zxffan.github.io/posts/110bf707.html"/>
    <id>https://zxffan.github.io/posts/110bf707.html</id>
    <published>2021-04-25T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SplitChunks"><a href="#SplitChunks" class="headerlink" title="SplitChunks"></a>SplitChunks</h2><p><code>splitChunks</code>可以指定<code>webpack</code>打包的拆分规则。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;async&quot;</span>, <span class="comment">// 三选一： &quot;initial&quot; | &quot;all&quot; | &quot;async&quot; (默认)</span></span><br><span class="line">      <span class="attr">minSize</span>: <span class="number">30000</span>, <span class="comment">// 最小尺寸，30K，development 下是10k，越大那么单个文件越大，chunk 数就会变少（针对于提取公共 chunk的时候，不管再大也不会把动态加载的模块合并到初始化模块中）当这个值很大的时候就不会做公共部分的抽取了</span></span><br><span class="line">      <span class="attr">maxSize</span>: <span class="number">0</span>, <span class="comment">// 文件的最大尺寸，0为不限制，优先级：maxInitialRequest/maxAsyncRequests &lt; maxSize &lt; minSize</span></span><br><span class="line">      <span class="attr">minChunks</span>: <span class="number">1</span>, <span class="comment">// 默认1，被提取的一个模块至少需要在几个 chunk 中被引用，这个值越大，抽取出来的文件就越小</span></span><br><span class="line">      <span class="attr">maxAsyncRequests</span>: <span class="number">5</span>, <span class="comment">// 在做一次按需加载的时候最多有多少个异步请求，为 1 的时候就不会抽取公共 chunk 了</span></span><br><span class="line">      <span class="attr">maxInitialRequests</span>: <span class="number">3</span>, <span class="comment">// 针对一个 entry 做初始化模块分隔的时候的最大文件数，优先级高于 cacheGroup，所以为 1 的时候就不会抽取 initial common 了</span></span><br><span class="line">      <span class="attr">automaticNameDelimiter</span>: <span class="string">&quot;~&quot;</span>, <span class="comment">// 打包文件名分隔符</span></span><br><span class="line">      <span class="attr">name</span>: <span class="literal">true</span>, <span class="comment">// 拆分出来文件的名字，默认为 true，表示自动生成文件名，如果设置为固定的字符串那么所有的 chunk 都会被合并成一个</span></span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="attr">vendors</span>: &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>, <span class="comment">// 正则规则，如果符合就提取 chunk</span></span><br><span class="line">          <span class="attr">priority</span>: -<span class="number">10</span>, <span class="comment">// 缓存组优先级，当一个模块可能属于多个 chunkGroup，这里是优先级</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">default</span>: &#123;</span><br><span class="line">          <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">priority</span>: -<span class="number">20</span>, <span class="comment">// 优先级</span></span><br><span class="line">          <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>, <span class="comment">// 如果该chunk包含的modules都已经另一个被分割的chunk中存在，那么直接引用已存在的chunk，不会再重新产生一个</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用动态导入<code>import()</code>或者<code>requre.ensure()</code>，就会根据</p><h2 id="SplitChunks参数"><a href="#SplitChunks参数" class="headerlink" title="SplitChunks参数"></a>SplitChunks参数</h2><h3 id="chunks"><a href="#chunks" class="headerlink" title="chunks"></a>chunks</h3><p>有三个值——<code>async</code> <code>all</code> <code>initial</code></p><h4 id="async-默认"><a href="#async-默认" class="headerlink" title="async(默认)"></a>async(默认)</h4><p>只会将异步模块（<code>import()</code>导入的模块）提出出来</p><h4 id="initial"><a href="#initial" class="headerlink" title="initial"></a>initial</h4><p>提取同步模块和异步模块。如果一个模块在moduleA中是同步导入，在moduleB中是异步导入。那么由于导入方式不同，这个模块会被抽离出不同的文件。</p><h4 id="all"><a href="#all" class="headerlink" title="all"></a>all</h4><p>提取同步模块和异步模块，无论是同步import还是异步import。都会抽离到一个文件中。<code>all</code>会最大程度复用文件。</p><h3 id="maxInitialRequests和maxAsyncRequests"><a href="#maxInitialRequests和maxAsyncRequests" class="headerlink" title="maxInitialRequests和maxAsyncRequests"></a>maxInitialRequests和maxAsyncRequests</h3><p>浏览器对相同域名的并法请求是有限制的。比如chrome 限制6个相同域名的请求。如果同一时间发送10个请求。则另外4个就会被阻塞</p><p>所以，<code>splitChunks</code>把文件拆得太碎，反而会影响加载时间。</p><p><code>maxInitialRequests</code>设置为<code>3</code>，表示浏览器初始最多发送3个请求。它会将入口文件拆成&lt;3份。</p><p><code>maxAsyncRequests</code>是用来限制异步模块并行最大请求数的。</p><blockquote><p>前者是限定入口的文件的拆分，后者是限定异步模块的拆分</p></blockquote><h3 id="minSize和maxSize"><a href="#minSize和maxSize" class="headerlink" title="minSize和maxSize"></a>minSize和maxSize</h3><p><code>minSize</code>：满足拆分的最小体积（单位字节）。大于这个大小并满足拆分规则就会被拆分</p><p><code>maxSize</code>：默认为0表示不作限制。如果非0。待拆分模块大小大于<code>maxSize</code>时就会拆分</p><blockquote><p>规则优先级：maxInitialRequest&#x2F;maxAsyncRequests &lt; maxSize &lt; minSize</p></blockquote><h3 id="cacheGroups"><a href="#cacheGroups" class="headerlink" title="cacheGroups"></a>cacheGroups</h3><p>这是<code>splitChunks</code>最重要的部分。它定义了拆分规则。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">  <span class="attr">vendors</span>: &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>, <span class="comment">// 正则规则，如果符合就提取 chunk</span></span><br><span class="line">    <span class="attr">priority</span>: -<span class="number">10</span>, <span class="comment">// 缓存组优先级，当一个模块可能属于多个 chunkGroup，这里是优先级</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>test</code>表示匹配规则，可以是一个正则。<code>/[\\/]node_modules[\\/]</code>表示匹配<code>/node_modules/</code>或着<code>\node_modules\</code></p><p><code>priority</code>：缓存组优先级，当一个模块可能属于多个 chunkGroup时，取优先级高的</p><p><code>reuseExistingChunk</code>: true表示复用其他chunk内已拥有的模块 当chunks引用了已经存在的被抽离的chunks时不会新创建一个chunk而是复用chunk。</p><p>其它属性：<code>chunks</code> <code>maxInitialRequests</code> <code>maxAsyncRequests</code> <code>minSize</code>…….</p><blockquote><p>cacheGroups下找不到<code>chunks</code>等属性，就会去splitChunks中的配置。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SplitChunks&quot;&gt;&lt;a href=&quot;#SplitChunks&quot; class=&quot;headerlink&quot; title=&quot;SplitChunks&quot;&gt;&lt;/a&gt;SplitChunks&lt;/h2&gt;&lt;p&gt;&lt;code&gt;splitChunks&lt;/code&gt;可以指定&lt;code&gt;</summary>
      
    
    
    
    <category term="工程化" scheme="https://zxffan.github.io/categories/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
    <category term="javascript" scheme="https://zxffan.github.io/tags/javascript/"/>
    
    <category term="webpack" scheme="https://zxffan.github.io/tags/webpack/"/>
    
    <category term="架构" scheme="https://zxffan.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>web-vitals源码解读</title>
    <link href="https://zxffan.github.io/posts/473044000000.html"/>
    <id>https://zxffan.github.io/posts/473044000000.html</id>
    <published>2021-04-25T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web-vitals简介"><a href="#web-vitals简介" class="headerlink" title="web-vitals简介"></a>web-vitals简介</h2><p><a href="https://www.npmjs.com/package/web-vitals#overview">web-vitals</a>是<code>google</code>开源的一个测量web性能指标的工具。体积才<strong>1KB</strong>，它可以用来测量<code>CLS</code>、<code>FID</code>、<code>LCP</code>、<code>FCP</code>、<code>TTFB</code>。</p><p>可通过npm来安装<code>npm install web-vitals</code></p><p>使用也十分简单</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;getLCP, getFID, getCLS&#125; <span class="keyword">from</span> <span class="string">&#x27;web-vitals&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getCLS</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"><span class="title function_">getFID</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"><span class="title function_">getLCP</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure><h2 id="源码结构"><a href="#源码结构" class="headerlink" title="源码结构"></a>源码结构</h2><p><code>web-vitals</code>整个项目不是很复杂，目录结构如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├─.git</span><br><span class="line">├─docs</span><br><span class="line">├─src # 源码</span><br><span class="line">├─test # 测试代码</span><br><span class="line">├─.eslintrc </span><br><span class="line">├─.gitignore</span><br><span class="line">├─base.d.ts</span><br><span class="line">├─base.js</span><br><span class="line">├─CHANGELOG.md</span><br><span class="line">├─LICENSE # 开源协议</span><br><span class="line">├─package-lock.json</span><br><span class="line">├─package.json</span><br><span class="line">├─README.md</span><br><span class="line">├─rollup.config.js # rollup构建配置</span><br><span class="line">├─tsconfig.json # ts配置</span><br><span class="line">├─wdio.conf.js # e2e测试配置</span><br></pre></td></tr></table></figure><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><h3 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h3><p><code>web-vitals</code>通过配置eslint来约定代码规范。通常，<code>eslint</code>配置文件位于根目录下。这样对于整个项目都通用一套<code>eslint</code>配置。这往往是不满足需求的。可能src目录需要一套eslint配置，而test目录有需要另一套eslint配置。<code>web-vitals</code>是通过<code>eslintrc</code>下的<strong>overrides</strong>字段配置的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;babel-eslint&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;browser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;es6&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mocha&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;parserOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;overrides&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wdio.conf.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;eslint:recommended&quot;</span><span class="punctuation">,</span> <span class="string">&quot;google&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;max-len&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;test/e2e/*.js&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;globals&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;$&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;browser&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;eslint:recommended&quot;</span><span class="punctuation">,</span> <span class="string">&quot;google&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;no-invalid-this&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;max-len&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;ignorePattern&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^\\s*import|= require\\(|^\\s*it\\(|^\\s*describe\\(&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ignoreUrls&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="string">&quot;src/**/*.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@typescript-eslint/parser&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@typescript-eslint/no-non-null-assertion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;@typescript-eslint/no-use-before-define&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;@typescript-eslint/explicit-function-return-type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;@typescript-eslint/explicit-module-boundary-types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;@typescript-eslint/ban-ts-comment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;@typescript-eslint/camelcase&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;node/no-missing-import&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;node/no-unsupported-features/es-syntax&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;node/no-missing-require&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;node/shebang&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;no-dupe-class-members&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;parserOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ecmaVersion&quot;</span><span class="punctuation">:</span> <span class="number">2018</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>overrides</code>字段对应的值是一个数组，该数组中的每个元素都是一条新的eslint规则，并覆盖全局配置</p><h3 id="husky"><a href="#husky" class="headerlink" title="husky"></a>husky</h3><p><a href="https://typicode.github.io/husky/"><code>husky</code></a>是一个<code>git</code>钩子工具，<code>package.json</code>文件下有个<code>husky</code>字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint \&quot;*.js\&quot; \&quot;src/**/*.ts\&quot; \&quot;test/**/*.js\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lint:fix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --fix \&quot;*.js\&quot; \&quot;src/**/*.ts\&quot; \&quot;test/**/*.js\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;husky&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;hooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;pre-commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run lint&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>它的作用是，在每次<code>git commit</code>时，触发钩子并执行<code>npm run lint</code>，也就是进行Eslint检查。如果没有通过eslint，就会commit失败。</p><h3 id="rollup-x2F-plugin-eslint"><a href="#rollup-x2F-plugin-eslint" class="headerlink" title="@rollup&#x2F;plugin-eslint"></a>@rollup&#x2F;plugin-eslint</h3><p><code>web-vitals</code>的<code>rollup</code>并没有配置<a href="https://github.com/rollup/plugins/tree/master/packages/eslint">@rollup&#x2F;plugin-eslint</a>。如果加上这个插件，会在构建时进行eslint检查，如果没有通过eslint，就会构建失败并给出相应的修复提示。</p><h2 id="构建配置"><a href="#构建配置" class="headerlink" title="构建配置"></a>构建配置</h2><p><code>web-vitals</code>是通过<code>rollup</code>进行构建打包的。其配置也十分简单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> replace <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-replace&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;terser&#125; <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-terser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">&#x27;rollup-plugin-babel&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">configurePlugins</span> = (<span class="params">&#123;<span class="variable language_">module</span>, polyfill = <span class="literal">false</span>&#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    <span class="title function_">babel</span>(&#123;</span><br><span class="line">      <span class="attr">presets</span>: [[<span class="string">&#x27;@babel/preset-env&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">targets</span>: &#123;</span><br><span class="line">          <span class="attr">browsers</span>: [<span class="string">&#x27;ie 11&#x27;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;]],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title function_">terser</span>(&#123;</span><br><span class="line">      <span class="variable language_">module</span>,</span><br><span class="line">      <span class="attr">mangle</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title function_">replace</span>(&#123;</span><br><span class="line">      <span class="string">&#x27;self.__WEB_VITALS_POLYFILL__&#x27;</span>: polyfill,</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> configs = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">input</span>: <span class="string">&#x27;dist/modules/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;esm&#x27;</span>,</span><br><span class="line">      <span class="attr">file</span>: <span class="string">&#x27;./dist/web-vitals.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: <span class="title function_">configurePlugins</span>(&#123;<span class="attr">module</span>: <span class="literal">true</span>, <span class="attr">polyfill</span>: <span class="literal">false</span>&#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">input</span>: <span class="string">&#x27;dist/modules/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;umd&#x27;</span>,</span><br><span class="line">      <span class="attr">file</span>: <span class="string">`./dist/web-vitals.umd.js`</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;webVitals&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: <span class="title function_">configurePlugins</span>(&#123;<span class="attr">module</span>: <span class="literal">false</span>, <span class="attr">polyfill</span>: <span class="literal">false</span>&#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">input</span>: <span class="string">&#x27;dist/modules/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;esm&#x27;</span>,</span><br><span class="line">      <span class="attr">file</span>: <span class="string">&#x27;./dist/web-vitals.base.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: <span class="title function_">configurePlugins</span>(&#123;<span class="attr">module</span>: <span class="literal">true</span>, <span class="attr">polyfill</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">input</span>: <span class="string">&#x27;dist/modules/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;umd&#x27;</span>,</span><br><span class="line">      <span class="attr">file</span>: <span class="string">`./dist/web-vitals.base.umd.js`</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;webVitals&#x27;</span>,</span><br><span class="line">      <span class="attr">extend</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: <span class="title function_">configurePlugins</span>(&#123;<span class="attr">module</span>: <span class="literal">false</span>, <span class="attr">polyfill</span>: <span class="literal">true</span>&#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">input</span>: <span class="string">&#x27;dist/modules/polyfill.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;iife&#x27;</span>,</span><br><span class="line">      <span class="attr">file</span>: <span class="string">&#x27;./dist/polyfill.js&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;webVitals&#x27;</span>,</span><br><span class="line">      <span class="attr">strict</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: <span class="title function_">configurePlugins</span>(&#123;<span class="attr">module</span>: <span class="literal">false</span>&#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> configs;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="不同的产出文件"><a href="#不同的产出文件" class="headerlink" title="不同的产出文件"></a>不同的产出文件</h3><p>导出的<code>config</code>是一个数组。每个数组元素是一份rollup配置</p><table><thead><tr><th>产出文件名</th><th>module</th><th>polyfill</th></tr></thead><tbody><tr><td>web-vitals.js</td><td>esm</td><td>不含</td></tr><tr><td>web-vitals.umd.js</td><td>umd</td><td>不含</td></tr><tr><td>web-vitals.base.js</td><td>esm</td><td>含</td></tr><tr><td>web-vitals.base.umd.js</td><td>umd</td><td>含</td></tr><tr><td>polyfill.js</td><td>iife</td><td>-</td></tr></tbody></table><ul><li><p><code>esm</code>：即 ES Module，在代码中直接<code>import</code>使用</p></li><li><p><code>iife</code>：立即执行函数，就是<code>(function() &#123;&#125;)(window)</code>这种形式</p></li><li><p><code>umd</code>：本质上也是iife，但是它将待执行的函数作为iife的参数传入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">IIFE</span>(<span class="params"> def </span>) &#123;</span><br><span class="line">  <span class="title function_">def</span>( <span class="variable language_">window</span> );</span><br><span class="line">&#125;)(<span class="keyword">function</span> <span class="title function_">def</span>(<span class="params"> <span class="variable language_">global</span> </span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( a ); <span class="comment">// 3 </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="variable language_">global</span>.<span class="property">a</span> ); <span class="comment">// 2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><code>iife</code>和<code>umd</code>都是直接在浏览器中使用了</p><h3 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree-shaking"></a>tree-shaking</h3><p>rolup使用了<code>@rollup/plugin-replace</code>，用于替换一些常量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">replace</span>(&#123;</span><br><span class="line">    <span class="string">&#x27;self.__WEB_VITALS_POLYFILL__&#x27;</span>: polyfill,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这会将代码中所有出现的<code>self.__WEB_VITALS_POLYFILL__</code>的地方替换成<code>polyfill</code>变量的对应的值（<code>true</code>或<code>false</code>）。在代码中出现大量的<code>self.__WEB_VITALS_POLYFILL__</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/lib/getFirstHidden.ts </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function getFirstHidden</span></span><br><span class="line"><span class="keyword">if</span> (self.<span class="property">__WEB_VITALS_POLYFILL__</span>) &#123;</span><br><span class="line">    firstHiddenTime = self.<span class="property">webVitals</span>.<span class="property">firstHiddenTime</span>;</span><br><span class="line">    <span class="keyword">if</span> (firstHiddenTime === <span class="title class_">Infinity</span>) &#123;</span><br><span class="line">        <span class="title function_">trackChanges</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    firstHiddenTime = <span class="title function_">initHiddenTime</span>();</span><br><span class="line">    <span class="title function_">trackChanges</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>self.__WEB_VITALS_POLYFILL__</code>是true，rollup在构建时，就会吧else的逻辑删掉。反之，会把if的逻辑给删掉。这样就实现了Tree Shaking——删除多余代码。</p><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p><code>web-vitals</code>的源码是使用TS编写的，最终需要生成js文件。</p><p><code>web-vitals</code>的构建过程：</p><ul><li>先通过tsc生成<strong>js文件</strong>和<strong>类型声明文件</strong>。</li><li>再通过<strong>rollup</strong>进行对<strong>js文件</strong>打包构建</li></ul><p>类型声明需要再<code>package.json</code>中<code>typings</code>字段指定声明文件的位置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/web-vitals.umd.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/web-vitals.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typings&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/modules/index.d.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;base.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;base.d.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;src&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>main</code>:  定义了 npm 包的入口文件，browser 环境和 node 环境均可使用</p></li><li><p><code>module</code>:  定义 npm 包的 ESM 规范的入口文件，browser 环境和 node 环境均可使用</p></li><li><p>好有个<code>browser</code> : 定义 npm 包在 browser 环境下的入口文件</p></li><li><p><code>files</code>：当<code>npm publish</code>是，指定需要上传的文件。</p></li></ul><h2 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h2><p><code>web-vitals</code>采用<code>Apache-2.0</code>开源协议。该协议允许开发者修改代码，并且商业发布。但是对于改动部分必须提供一份声明。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><code>web-vitals</code>的测试需要真实的浏览器环境，即需要<strong>端到端测试（e2e test）</strong>。项目通过[wdio（webDriver.IO）](<a href="https://webdriver.io/docs/gettingstarted">Getting Started | WebdriverIO</a>)来实现的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm-run-all build -p -r test:*&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;test:e2e&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wdio wdio.conf.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;test:server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node test/server.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程"></a>测试流程</h3><p>当执行<code>npm run test</code>时</p><ul><li>先构建打包项目</li><li>启动一个HTTP服务，用于处理浏览器的资源请求</li><li>启动wdio测试</li></ul><p>当执行test&#x2F;e2e目录下的测试用例时，例如<code>getLCP-test.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;reports the correct value on hidden (reportAllChanges === false)&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 浏览器不支持就跳过这条用例</span></span><br><span class="line">    <span class="keyword">if</span> (!browserSupportsLCP) <span class="variable language_">this</span>.<span class="title function_">skip</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开 /test/lcp这个网页，这是测试网页</span></span><br><span class="line">    <span class="keyword">await</span> browser.<span class="title function_">url</span>(<span class="string">&#x27;/test/lcp&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待所有图片加载完成</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">imagesPainted</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跳转到空白页，触发上一个页面的 hide状态</span></span><br><span class="line">    <span class="keyword">await</span> browser.<span class="title function_">url</span>(<span class="string">&#x27;about:blank&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测是beacon.log中是否有数据，参数为数据条数</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">beaconCountIs</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对 beacon数据进行断言</span></span><br><span class="line">    <span class="title function_">assertStandardReportsAreCorrect</span>(<span class="keyword">await</span> <span class="title function_">getBeacons</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当输入<code>browser.url(&#39;/test/lcp&#39;)</code>其实访问的地址是<code>http://localhost:9090/test/lcp</code>(在wdio.config.js中配置的)。这条请求会发送给本地的HTTP服务上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/test/server.js</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/test/:view&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    ...req.<span class="property">query</span>,</span><br><span class="line">    <span class="attr">modulePath</span>: <span class="string">`/dist/web-vitals<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">        req.query.polyfill ? <span class="string">`.base`</span> : <span class="string">``</span>&#125;</span>.js`</span>,</span><br><span class="line">    <span class="attr">webVitalsPolyfill</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./dist/polyfill.js&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">send</span>(nunjucks.<span class="title function_">render</span>(<span class="string">`<span class="subst">$&#123;req.params.view&#125;</span>.njk`</span>, data));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>nunjucks</code>是一个模板引擎。data数据会插入到模板引擎内。当访问<code>/test/lcp</code>时，会将解析<code>lcp.njk</code>并将html返回给浏览器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/test/view/lcp.njk --&gt;</span></span><br><span class="line">&#123;% extends &#x27;layout.njk&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>LCP Test<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% if not imgDelay %&#125;</span><br><span class="line">      &#123;% set imgDelay = 500 %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> &#123;% <span class="attr">if</span> <span class="attr">imgHidden</span> %&#125;<span class="attr">hidden</span>&#123;% <span class="attr">endif</span> %&#125; <span class="attr">src</span>=<span class="string">&quot;/test/img/square.png?delay=&#123;&#123; imgDelay &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Text below the image<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;navigate-away&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://example.com&quot;</span>&gt;</span>Navigate away<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Include a tall element to ensure scrolling is possible. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;height: 100vh&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>Text below the full-height element.<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;getLCP&#125; <span class="keyword">from</span> <span class="string">&#x27;&#123;&#123; modulePath &#125;&#125;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLCP</span>(<span class="function">(<span class="params">lcp</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// Log for easier manual testing.</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(lcp);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// Elements can&#x27;t be serialized, so we convert first.</span></span></span><br><span class="line"><span class="language-javascript">      lcp = &#123;</span></span><br><span class="line"><span class="language-javascript">        ...lcp,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">entries</span>: lcp.<span class="property">entries</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> (&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">element</span>: e.<span class="property">element</span>.<span class="property">nodeName</span>.<span class="title function_">toLowerCase</span>(),</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">size</span>: e.<span class="property">size</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">startTime</span>: e.<span class="property">startTime</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;)),</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 发送统计数据</span></span></span><br><span class="line"><span class="language-javascript">      navigator.<span class="title function_">sendBeacon</span>(<span class="string">`/collect`</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(lcp));</span></span><br><span class="line"><span class="language-javascript">    &#125;, self.<span class="property">__reportAllChanges</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>html中的最后一步调用了<code> navigator.sendBeacon(&quot;/collect&quot;, JSON.stringify(lcp));</code>，<code>/collect</code>这个请求也是发到本地的HTTP服务。服务端会将数据写入到<code>src/test/beacons.log</code>中。</p><h3 id="sendBeacon"><a href="#sendBeacon" class="headerlink" title="sendBeacon"></a>sendBeacon</h3><p><code>navigator.sendBeacon</code>是专门用来发送异步统计数据的API。</p><p>有一种需求：当页面跳转或关闭时，我们需要将当前页面的一些统计数据发送到服务端。往往这些数据不能提前发送。如果使用异步<code>XMLHttpRequest</code>的话，浏览器可能会忽略这个请求。如果使用同步<code>XMLHttpRequest</code>的话，会影响下个页面的加载速度。</p><p>使用<code>navigator.sendBeacon</code>，会发送一个异步请求，并且不会被浏览器忽略。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="keyword">function</span> <span class="title function_">logData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">visibilityState</span> === <span class="string">&#x27;hidden&#x27;</span>) &#123;</span><br><span class="line">    navigator.<span class="title function_">sendBeacon</span>(<span class="string">&#x27;/log&#x27;</span>, analyticsData);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>判断页面关闭与否，建议使用<code>visibilitychange</code>事件</p><p>safari需要使用<code>pagehide</code>事件</p></blockquote><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="PerformanceObserver"><a href="#PerformanceObserver" class="headerlink" title="PerformanceObserver"></a>PerformanceObserver</h3><p>性能观察者(PerformanceObserver)用于获取性能数据。</p><p><code>new PerformanceObserver(callback);</code> 接受一个callback作为参数</p><p><code>observer</code>方法用于注册性能条目类型，type指所要观测的性能条目类型，取值情况通过<code>PerformanceObserver.supportedEntryTypes</code>属性查看。</p><p><code>[&quot;element&quot;, &quot;event&quot;, &quot;first-input&quot;, &quot;largest-contentful-paint&quot;, &quot;layout-shift&quot;, &quot;longtask&quot;, &quot;mark&quot;, &quot;measure&quot;, &quot;navigation&quot;, &quot;paint&quot;, &quot;resource&quot;]</code></p><p>其中:</p><ul><li><code>largest-contentful-paint</code>：LCP</li><li><code>layout-shift</code>：CLS</li><li><code>first-input</code>：FID</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取lcp时间</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">callback</span> = (<span class="params">entryList</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> entryList.<span class="title function_">getEntries</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;LCP candidate:&#x27;</span>, entry.<span class="property">startTime</span>, entry);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(callback)</span><br><span class="line"></span><br><span class="line">observer.<span class="title function_">observe</span>(&#123;<span class="attr">type</span>: <span class="string">&#x27;largest-contentful-paint&#x27;</span>, <span class="attr">buffered</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure><h3 id="LCP、FID、CLS"><a href="#LCP、FID、CLS" class="headerlink" title="LCP、FID、CLS"></a>LCP、FID、CLS</h3><p><code>web-vitals</code>中的<code>LCP</code>、<code>FID</code>和<code>CLS</code>都是通过<code>PerformanceObserver</code>来实现的。</p><p>以LCP为例：</p><p><code>getLCP</code>函数位于<code>src/getLCP.ts</code>文件中。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getLCP</span> = (<span class="params">onReport: ReportHandler, reportAllChanges?: <span class="built_in">boolean</span></span>) =&gt; &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 1 获取 第一次页面处于hidden状态的时间</span></span><br><span class="line">  <span class="keyword">const</span> firstHidden = <span class="title function_">getFirstHidden</span>();</span><br><span class="line">  <span class="keyword">let</span> metric = <span class="title function_">initMetric</span>(<span class="string">&#x27;LCP&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">report</span>: <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> bindReporter&gt;;</span><br><span class="line"></span><br><span class="line">                         </span><br><span class="line">  <span class="comment">// 2. PerformanceObserver</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">entryHandler</span> = (<span class="params">entry: PerformanceEntry</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> value = entry.<span class="property">startTime</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过滤掉切换pagehide后的 性能数据</span></span><br><span class="line">    <span class="keyword">if</span> (value &lt; firstHidden.<span class="property">timeStamp</span>) &#123;</span><br><span class="line">      metric.<span class="property">value</span> = value;</span><br><span class="line">      metric.<span class="property">entries</span>.<span class="title function_">push</span>(entry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">report</span>();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> po = <span class="title function_">observe</span>(<span class="string">&#x27;largest-contentful-paint&#x27;</span>, entryHandler);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (po) &#123;</span><br><span class="line">    report = <span class="title function_">bindReporter</span>(onReport, metric, reportAllChanges);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">stopListening</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!finalMetrics.<span class="title function_">has</span>(metric)) &#123;</span><br><span class="line">        po.<span class="title function_">takeRecords</span>().<span class="title function_">map</span>(entryHandler <span class="keyword">as</span> <span class="title class_">PerformanceEntryHandler</span>);</span><br><span class="line">        po.<span class="title function_">disconnect</span>();</span><br><span class="line">        finalMetrics.<span class="title function_">add</span>(metric);</span><br><span class="line">        <span class="title function_">report</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当用户点击页面时，立即触发 report</span></span><br><span class="line">    [<span class="string">&#x27;keydown&#x27;</span>, <span class="string">&#x27;click&#x27;</span>].<span class="title function_">forEach</span>(<span class="function">(<span class="params"><span class="keyword">type</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">addEventListener</span>(<span class="keyword">type</span>, stopListening, &#123;<span class="attr">once</span>: <span class="literal">true</span>, <span class="attr">capture</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onHidden</span>(stopListening, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当pageshow时，报告metric</span></span><br><span class="line">    <span class="title function_">onBFCacheRestore</span>(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">      metric = <span class="title function_">initMetric</span>(<span class="string">&#x27;LCP&#x27;</span>);</span><br><span class="line">      report = <span class="title function_">bindReporter</span>(onReport, metric, reportAllChanges);</span><br><span class="line">      <span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          metric.<span class="property">value</span> = performance.<span class="title function_">now</span>() - event.<span class="property">timeStamp</span>;</span><br><span class="line">          finalMetrics.<span class="title function_">add</span>(metric);</span><br><span class="line">          <span class="title function_">report</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="TTFB"><a href="#TTFB" class="headerlink" title="TTFB"></a>TTFB</h3><p>TTFB时间直接取<code>performance.responseStart</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;web-vitals简介&quot;&gt;&lt;a href=&quot;#web-vitals简介&quot; class=&quot;headerlink&quot; title=&quot;web-vitals简介&quot;&gt;&lt;/a&gt;web-vitals简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com</summary>
      
    
    
    
    <category term="源码" scheme="https://zxffan.github.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="web-vitals" scheme="https://zxffan.github.io/tags/web-vitals/"/>
    
  </entry>
  
  <entry>
    <title>知识串联：JavaScript执行机制</title>
    <link href="https://zxffan.github.io/posts/1b8392cc.html"/>
    <id>https://zxffan.github.io/posts/1b8392cc.html</id>
    <published>2021-04-22T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.593Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章将梳理JavaScript的执行机制，并且串联众多知识点：作用域、作用域链、闭包、变量提升、函数提升、<code>this</code>指向</p><h2 id="JavaScript-执行的阶段"><a href="#JavaScript-执行的阶段" class="headerlink" title="JavaScript 执行的阶段"></a>JavaScript 执行的阶段</h2><p>在 V8 引擎中 JavaScript 代码的运行过程主要分成三个阶段。</p><ul><li><p>语法分析阶段。 该阶段会对代码进行语法分析，检查是否有语法错误（SyntaxError），如果发现语法错误，会在控制台抛出异常并终止执行。</p></li><li><p>编译阶段。 该阶段会进行全局执行上下文（Execution Context）的创建，这个过程也被称为预解析阶段。</p></li><li><p>执行阶段。 将编译阶段中创建的执行上下文压入执行栈，并成为正在运行的执行上下文，代码执行结束后，将其出栈。在执行过程中，又可能会产生新的执行上下文（比如调用了函数）。再将新的执行上下文入栈，执行完出栈</p></li></ul><h2 id="三种执行上下文"><a href="#三种执行上下文" class="headerlink" title="三种执行上下文"></a>三种执行上下文</h2><p>执行上下文是对执行环境的抽象，它代表JavaScript执行时当前的执行环境，用于。JavaScript中一共有三种执行上下文</p><ul><li>全局执行上下文：有且仅有一个</li><li>函数执行上下文</li><li><code>eval</code>执行上下文：不讨论</li></ul><p>如下代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;zxfan&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayName</span>()</span><br></pre></td></tr></table></figure><p>编译时，首先创建一个全局执行上下文<code>GlobalContext</code>，并将其放入执行栈</p><p>执行时，执行栈栈顶的执行上下文为当前正在执行的执行上下文，当执行到<code>sayName</code>函数时，又会创建一个函数执行上下文<code>FunctionContext</code>，并将其入栈。当函数执行上下文执行完毕，出栈。全局上下文也执行完毕，出栈。</p><blockquote><p>全局执行上下文是编译时被创建的</p><p>函数执行上下文是执行时被创建的</p></blockquote><h2 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h2><p>执行栈是用来存放执行上下文的。</p><p>以函数为例，函数执行的时候创建函数执行上下文，并将其入栈，当函数执行完成后再出栈。全局执行上下文第一个入栈最后一个出栈。</p><h2 id="执行上下文做了什么？"><a href="#执行上下文做了什么？" class="headerlink" title="执行上下文做了什么？"></a>执行上下文做了什么？</h2><p>执行上下文被创建时，做了三件事：</p><ul><li>确定<code>this</code>的指向</li><li>创建环境记录<ul><li>创建词法环境(LexicalEnvironment)</li><li>创建变量环境(VariableEnvironment)</li></ul></li></ul><h3 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h3><p>this的取值取决于具体的场景：</p><ul><li>全局执行上下文中：this取全局对象（浏览器是window对象，nodejs是global对象）</li><li>函数执行上下文中：<ul><li>构造函数中：指向创建的实例对象</li><li>对象方法：this指向这个对象</li><li>箭头函数：外层执行上下文的this</li><li><code>call</code> <code>apply</code> <code>bind</code>：可以指定this</li><li>其它情况：this为undefined（严格模式下）</li></ul></li></ul><h3 id="环境记录-Environment-Record"><a href="#环境记录-Environment-Record" class="headerlink" title="环境记录(Environment Record)"></a>环境记录(Environment Record)</h3><p>基于JavaScript这种嵌套的代码结构，环境记录用来记录特定的<strong>标识符</strong>和代码中所定义的<strong>变量和函数</strong>之间的关系。</p><p>换句话说，环境记录就是记录一堆标识符，这些标识符指向具体代码中的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zxfan&quot;</span></span><br><span class="line"><span class="type">var</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span></span><br><span class="line"></span><br><span class="line">function <span class="title function_">sayName</span><span class="params">()</span> &#123;</span><br><span class="line">  console.log(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其环境记录</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Environment Record <span class="punctuation">&#123;</span></span><br><span class="line">name<span class="punctuation">:</span> &lt;uninitialized&gt; <span class="comment">// 代码执行完后 name: &lt;&quot;zxfan&quot;&gt;</span></span><br><span class="line">  age<span class="punctuation">:</span> &lt;<span class="number">18</span>&gt; <span class="comment">// var 具有变量提升，所以这里不是uninitialized</span></span><br><span class="line">sayName<span class="punctuation">:</span> &lt;function&gt; <span class="comment">// function有函数提升，所以这里不是uninitialized</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>环境记录分类三种类型（声明环境记录又分为两种）：</p><ul><li>声明环境记录： 包含<code>var</code> <code>let</code> <code>const</code> <code>class</code> <code>function</code>  <code>import</code>声明的变量的标识符。<ul><li>函数环境记录： <code>function</code></li><li>模块环境记录：<code>import</code></li></ul></li><li>对象环境记录：为对象创建一个环境记录，它有一个**关联的绑定对象[[BindingObject]]**。比如全局执行上下文会创建一个对象环境记录，其关联绑定的对象是全局对象（window或global）</li><li>全局环境记录：最外层环境记录，包含声明环境记录和对象环境记录</li></ul><p><strong>词法环境和变量环境本质上都是环境记录</strong>，这么做是为了单独区分<code>var</code></p><h4 id="词法环境（作用域）"><a href="#词法环境（作用域）" class="headerlink" title="词法环境（作用域）"></a>词法环境（作用域）</h4><p>词法环境可以理解为<strong>作用域</strong>，从词法环境的角度能更好地理解作用域。词法环境有两个成员：</p><ul><li>环境记录（Environment Record）：用于记录自身词法环境中的变量对象。</li><li>外部词法环境引用（Outer Lexical Environment）：记录外层词法环境的引用。</li></ul><h5 id="环境记录"><a href="#环境记录" class="headerlink" title="环境记录"></a>环境记录</h5><p>词法环境的环境记录，会保存<strong>函数声明</strong>和<strong>变量声明</strong>(<code>let</code>和<code>const</code>声明的变量)，如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayFullName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = <span class="string">&quot;Donald&quot;</span></span><br><span class="line">  <span class="keyword">const</span> lastName = <span class="string">&quot;Trump&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(firstName, lastName)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayFullName</span>()</span><br></pre></td></tr></table></figure><p><code>sayFullNmae</code>的词法环境</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LexicalEnciroment <span class="punctuation">&#123;</span></span><br><span class="line">Enviroment Record <span class="punctuation">&#123;</span></span><br><span class="line">firstName<span class="punctuation">:</span> &lt;uninitialize&gt;</span><br><span class="line">lastName<span class="punctuation">:</span> &lt;uninitialize&gt;</span><br><span class="line">arguments<span class="punctuation">:</span> &lt;<span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>&gt;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">outer<span class="punctuation">:</span> &lt;Global or outer function environment reference&gt;  </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>注意：<code>let</code>和<code>const</code>定义的变量初始都是<code>uninitialize</code>。当代码执行后才会赋值。</p><h5 id="外部词法环境引用（作用域链）"><a href="#外部词法环境引用（作用域链）" class="headerlink" title="外部词法环境引用（作用域链）"></a>外部词法环境引用（作用域链）</h5><p>任何一个词法环境（全局词法环境除外）都有一个指向外层词法环境的引用。这构成了词法环境链即<strong>作用域链</strong>。当访问一个变量时，先会在当前词法环境中寻找，找不到就去外部词法环境中寻找。就这样，一直找到全局词法环境。</p><h4 id="变量环境"><a href="#变量环境" class="headerlink" title="变量环境"></a>变量环境</h4><p>变量环境和词法环境的结构一致，区别是其环境记录所记录的数据不同。</p><p>语法环境的环境记录，是记录<code>var</code>声明。</p><blockquote><p>环境记录 词法环境 作用域 其实都是一个概念，这么区分是为了针对不同场景方便理解。</p></blockquote><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="解释作用域与作用域链"><a href="#解释作用域与作用域链" class="headerlink" title="解释作用域与作用域链"></a>解释作用域与作用域链</h3><p>JS的作用域时词法作用域，有词法结构决定。js代码编译时创建全局执行上下文，执行上下文又会创建当前环境的环境记录（分为词法环境和变量环境）。当执行js代码时（比如调用一个函数），又会创建函数执行上下文。随之函数环境的环境就又会创建。</p><p>每个环境记录都有个outer引用，指向外层环境记录。外层再指向外层，一直到最外层。这便构成了作用域链。</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>解释闭包就是解释<strong>作用域</strong>和<strong>垃圾回收机制</strong></p><p><a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)">闭包</a> 是指内部函数总是可以访问其所在的外部函数中声明的变量和参数，即使在其外部函数被返回（寿命终结）了之后。</p><p>正常情况下，代码执行完毕，其相应的执行上下文出栈，相应的内存空间会被回收。然而，闭包情况下，内层词法环境（作用域）可以访问到，所以外层词法环境不会被回收，仍然可以访问到，但仅限在内层词法环境访问。</p><h3 id="变量提升和函数提升"><a href="#变量提升和函数提升" class="headerlink" title="变量提升和函数提升"></a>变量提升和函数提升</h3><p>环境记录创建时，会记录当前环境下所有变量，遇到：</p><ul><li><p>var变量声明：此时会给变量分配内存，并将其初始化为undefined（该过程只进行定义声明，执行阶段才执行赋值语句）。</p></li><li><p>函数声明：此时会在内存里创建函数对象，并且直接初始化为该函数对象。</p></li></ul><h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><p>this指向是在执行上下文创建时才确定的，具体指向谁取决于具体场景。上文已讨论。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇文章将梳理JavaScript的执行机制，并且串联众多知识点：作用域、作用域链、闭包、变量提升、函数提升、&lt;code&gt;this&lt;/code&gt;指向&lt;/p&gt;
&lt;h2 id=&quot;JavaScript-执行的阶段&quot;&gt;&lt;a href=&quot;#JavaScript-执行的阶段&quot; clas</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://zxffan.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://zxffan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>XSS攻击与防御</title>
    <link href="https://zxffan.github.io/posts/df6ed6ff.html"/>
    <id>https://zxffan.github.io/posts/df6ed6ff.html</id>
    <published>2021-04-15T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.598Z</updated>
    
    <content type="html"><![CDATA[<p><code>xss(cross-site script)</code>指<strong>网站对用户输入数据未做有效过滤，攻击者可以将恶意脚本注入网站页面中，达到执行恶意代码的目的</strong></p><p>攻击者只需要诱使受害者打开特定的网址，就可以在受害者的浏览器中执行被注入的恶意代码，从而窃取用户身份，执行一些敏感操作</p><h2 id="XSS攻击类型"><a href="#XSS攻击类型" class="headerlink" title="XSS攻击类型"></a>XSS攻击类型</h2><p>XSS攻击可以分成三种类型：</p><ul><li><p>反射型XSS</p></li><li><p>存储型XSS</p></li><li><p>DOM型XSS</p></li></ul><h3 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h3><p>反射型指的是<strong>将攻击代码存放在URL参数中</strong>，例如<code>http://localhost/home?name=&lt;script&gt;alert(1)&lt;/script&gt;</code>。</p><p>如果服务端直接去url中的name参数，并当作html返回给客户端。攻击代码就会执行。</p><h3 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h3><p>存储型是指<strong>将恶意代码存储到服务器上</strong>，只要诱使受害者访问被插入恶意代码的页面即可触发。存储型 XSS 经常出现在一些可以发表评论的地方，如帖子、博客</p><p>当用户在评论中输入一段攻击代码，网站又没有过滤。这段代码会存储到数据库中。当其它用户访问评论时，这段攻击代码被当作html内容输出就会引发攻击代码的执行</p><h3 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h3><p><strong>前两种都是服务端的XSS，DOM型是客户端的XSS</strong></p><p>JavaScript 能够操作DOM。通过JavaScript控制获取<strong>源数据（内含攻击代码）</strong>，又未进行处理。直接<strong>当作HTML输出（innerHTML）或脚本执行</strong></p><p>就会发生DOM型XSS攻击</p><p>常见的源数据有：<code>document</code> <code>location</code> <code>localStorage</code> <code>sessionStorage</code>等</p><p>常见的触发攻击的点：<code>document.write</code> <code>eval</code> <code>innerHTML</code> <code>a的href属性</code>等</p><h2 id="XSS常见的攻击方式"><a href="#XSS常见的攻击方式" class="headerlink" title="XSS常见的攻击方式"></a>XSS常见的攻击方式</h2><h3 id="窃取cookie"><a href="#窃取cookie" class="headerlink" title="窃取cookie"></a>窃取cookie</h3><p>许多网站都使用<code>cookie</code>来存放用户登陆信息。</p><p>攻击者利用<code>xss</code>漏洞来注入脚本。<code>document.cookie</code>就可以获取到cookie。然后再将获取到的cookie上报。之后就可以本地修改 Cookie 来登录受害者的账号</p><h3 id="蠕虫攻击"><a href="#蠕虫攻击" class="headerlink" title="蠕虫攻击"></a>蠕虫攻击</h3><p>以微博XSS蠕虫攻击为例：</p><ul><li><p>利用 XSS 漏洞插入恶意 JS 代码；</p></li><li><p>利用 XMLHttpRequest 发送请求去发表微博、关注用户、获取关注者列表并向其发送私信；</p></li><li><p>微博消息和私信都包含有恶意攻击链接，等于实现了攻击代码的自我复制和传播。</p></li></ul><h3 id="获取用户键盘记录"><a href="#获取用户键盘记录" class="headerlink" title="获取用户键盘记录"></a>获取用户键盘记录</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">keys = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onkeypress</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  keys += <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">keyCode</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取剪贴板内容"><a href="#获取剪贴板内容" class="headerlink" title="获取剪贴板内容"></a>获取剪贴板内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;paste&#x27;</span>, <span class="keyword">function</span> (<span class="params">evt</span>) &#123;</span><br><span class="line">  clipdata = evt.<span class="property">clipboardData</span> || <span class="variable language_">window</span>.<span class="property">clipboardData</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(clipdata.<span class="title function_">getData</span>(<span class="string">&#x27;text/plain&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="钓鱼欺骗用户输入账号、密码"><a href="#钓鱼欺骗用户输入账号、密码" class="headerlink" title="钓鱼欺骗用户输入账号、密码"></a>钓鱼欺骗用户输入账号、密码</h3><p>弹个弹窗，让用户输入账号密码</p><h2 id="XSS漏洞挖掘"><a href="#XSS漏洞挖掘" class="headerlink" title="XSS漏洞挖掘"></a>XSS漏洞挖掘</h2><h4 id="收集用例"><a href="#收集用例" class="headerlink" title="收集用例"></a>收集用例</h4><p>人工测试的主要思路就是在一切可输入数据的地方输入“XSS payload”（测试用例），这些地方包括所有的 GET、POST、Cookie、HTTP 头。提交数据之后，看网站的输出是否解析了前面输入的 XSS payload。</p><p>我常用的 XSS payload 有以下几个。搜索“XSS cheat sheet”，也可以找到很多这种测试用例。</p><p><a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">Cross-site scripting (XSS) cheat sheet</a></p><p><a href="https://owasp.org/www-community/xss-filter-evasion-cheatsheet">XSS Filter Evasion Cheat Sheet</a></p><p><a href="http://html5sec.org/">HTML5 Security Cheatsheet</a></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>这一步可以手动测试也可以采用自动测试工具。</p><p>手动：可以先一次性批量输入测试，如果无效，再输入一些特殊字符看过滤情况，根据返回数据作相应的调整测试。</p><p>自动：<a href="https://github.com/s0md3v/XSStrike">XSStrike</a>，它内置了很多测试用例，也可以添加自定义测试用例</p><h2 id="XSS防御"><a href="#XSS防御" class="headerlink" title="XSS防御"></a>XSS防御</h2><h3 id="做好检查"><a href="#做好检查" class="headerlink" title="做好检查"></a>做好检查</h3><h4 id="输入检查"><a href="#输入检查" class="headerlink" title="输入检查"></a>输入检查</h4><p>检查攻击者所有可能的输入的地方</p><ul><li><code>URL</code>参数</li><li>（富）文本框</li><li>接口返回的数据</li></ul><blockquote><p>服务端也需要进行检查，前端是可以绕过去的</p></blockquote><h4 id="输出检查"><a href="#输出检查" class="headerlink" title="输出检查"></a>输出检查</h4><p>从前端角度来看，有两个地方可能导致恶意代码执行——<code>HTML</code>和<code>JavaScript</code></p><ul><li><p>HTML：<code>innerHTML</code> <code>outerHTML</code> <code>document.write()</code> <code>v-html</code> <code>danderousSetInnerHTML</code></p><p>将原数据当作HTML输出，极容易导致XSS攻击。尽量避免这么做，使用<code>textContent</code>来代替。如果必须输出（如评论内容），需要进行<strong>转义</strong>。通常使用<strong>白名单</strong>的方式进行转义。</p><blockquote><p><a href="https://www.npmjs.com/package/xss">xss</a>是npm上的一个不错的HTML转义库</p></blockquote></li><li><p>JavaScript：</p><ul><li>内联事件监听器：<code>location</code> <code>onclick</code> <code>onerror</code> <code>onload</code> <code>onmousemove</code>等等等</li><li>a标签的href属性使用伪协议：<code>&lt;a href=&quot;javascript:alert(&#39;attack&#39;)&quot; /&gt;</code></li><li><code>eval</code> <code>setTimeout</code> <code>setInterval</code>都能够把字符串当作js执行</li></ul><p>这些api的不恰当使用会导致XSS攻击，所以使用时要格外注意。好在它们大多都有可替代方案。</p></li></ul><h3 id="HttpOnly禁止cookie访问"><a href="#HttpOnly禁止cookie访问" class="headerlink" title="HttpOnly禁止cookie访问"></a>HttpOnly禁止cookie访问</h3><p>如果给某个 cookie 设置了 <code>HttpOnly</code> 属性，则无法通过 JS 脚本 读取到该 cookie 的信息，但还是能通过 Application 中手动修改 cookie，所以只是在一定程度上可以防止 XSS 攻击，不是绝对的安全</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: Name=Value; expires=Wednesday, 01-May-2014 12:45:10 GMT; HttpOnly</span><br></pre></td></tr></table></figure><blockquote><p>cookie由服务端创建返回给浏览器的（响应头：<code>Set-Cookie</code>）。之后的请求会自动携带cookie。默认情况下，它随着seesion的结束而结束。</p><p>能不使用cookie就别使用了</p></blockquote><h3 id="CSP-内容安全策略"><a href="#CSP-内容安全策略" class="headerlink" title="CSP 内容安全策略"></a>CSP 内容安全策略</h3><p>内容安全策略（Content Security Policy，CSP）也是减少 XSS 攻击的一种方式 ，是浏览器提供一种防御机制。它采用的是白名单机制，告诉浏览器可以加载和执行哪些外部资源，这样就能防止被一些第三方恶意脚本注入执行。</p><p>开启 CSP 有两种方式：</p><ol><li><p>通过 HTTP 头信息的 Content-Security-Policy 的字段：(在返回html文件的请求的响应头上加)</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: script-src &#x27;self&#x27;; object-src &#x27;none&#x27;;style-src cdn.example.org third-party.org; child-src https:（2）通过网页的&lt;meta&gt;标签设置：</span><br></pre></td></tr></table></figure></li><li><p>通过网页的<code>&lt;meta&gt;</code>标签设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;self&#x27;; object-src &#x27;none&#x27;; style-src cdn.example.org third-party.org; child-src https:&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>如何指定csp：<strong>指令 策略</strong></p><p>指令字段含义：</p><table><thead><tr><th>指令</th><th>策略示例</th><th>含义</th></tr></thead><tbody><tr><td><code>default-src</code></td><td><code>&#39;self&#39; www.aaa.com</code></td><td>默认资源加载策略，没有指定策略的指令使用本策略</td></tr><tr><td><code>script-src</code></td><td><code>&#39;selft&#39; js.a.com</code></td><td>针对js文件的策略</td></tr><tr><td><code>style-src</code></td><td><code>&#39;selft&#39; css.a.com</code></td><td>针对css文件的策略</td></tr><tr><td><code>img-src</code></td><td><code>&#39;selft&#39; img.a.com</code></td><td>针对img图片资源的策略</td></tr><tr><td><code>connect-src</code></td><td><code>&#39;selft&#39;</code></td><td>针对ajax、websocket的策略，不允许会返回400</td></tr><tr><td><code>font-src</code></td><td><code>font.a.com</code></td><td>针对字体的加载策略</td></tr><tr><td><code>media-src</code></td><td><code>media.a.com</code></td><td>针对video和audio引入资源的策略</td></tr><tr><td><code>frame-src</code></td><td><code>&#39;self&#39;</code></td><td>针对frame的加载策略</td></tr><tr><td><code>sandbox</code></td><td><code>allow-forms</code></td><td>对请求资源启用<code>sandbox</code></td></tr><tr><td><code>report-uri</code></td><td><code>/report-uri</code></td><td>告知浏览器，当请求资源不被策略允许时，往那个接口提交信息</td></tr></tbody></table><p>指令值字段含义：</p><ul><li><code>none</code> 表示不执行任何匹配。</li><li><code>self</code>表示与当前来源（而不是其子域）匹配。</li><li><code>unsafe-inline</code>表示允许使用内联 JavaScript 和 CSS。</li><li><code>unsafe-eval</code> 表示允许使用类似 eval 的 text-to-JavaScript 机制。</li><li><code>www.aasd.com</code>允许加载指定域名的资源</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;xss(cross-site script)&lt;/code&gt;指&lt;strong&gt;网站对用户输入数据未做有效过滤，攻击者可以将恶意脚本注入网站页面中，达到执行恶意代码的目的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;攻击者只需要诱使受害者打开特定的网址，就可以在受害者的浏览器中</summary>
      
    
    
    
    <category term="experience" scheme="https://zxffan.github.io/categories/experience/"/>
    
    
    <category term="FrontEnd" scheme="https://zxffan.github.io/tags/FrontEnd/"/>
    
    <category term="安全" scheme="https://zxffan.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>排序问题梳理</title>
    <link href="https://zxffan.github.io/posts/88f2a5b3.html"/>
    <id>https://zxffan.github.io/posts/88f2a5b3.html</id>
    <published>2021-04-14T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="数组的归并排序"><a href="#数组的归并排序" class="headerlink" title="数组的归并排序"></a>数组的归并排序</h3><p><a href="https://leetcode-cn.com/problems/sort-an-array/">912. 排序数组</a></p><p>归并排序类似二叉树的后序遍历，思想也一致：利用子树的信息推算出整棵树的信息</p><p>记忆：</p><ol><li>将list划分成两部分，</li><li>后序遍历</li><li>合并两个有序list</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sortArray</span>(<span class="params">nums: <span class="built_in">number</span>[], low = <span class="number">0</span>, high = nums.length - <span class="number">1</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="comment">// 后序遍历</span></span><br><span class="line">  <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">    <span class="comment">// 1. 划分</span></span><br><span class="line">    <span class="keyword">const</span> mid = low + ((high - low) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.后续遍历</span></span><br><span class="line">    <span class="title function_">sortArray</span>(nums, low, mid);</span><br><span class="line">    <span class="title function_">sortArray</span>(nums, mid + <span class="number">1</span>, high);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 合并两个有序list</span></span><br><span class="line">    <span class="title function_">merge</span>(nums, low, mid, high);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并两个有序数组</span></span><br><span class="line"><span class="comment">// 数组A： nums[low ... mid]</span></span><br><span class="line"><span class="comment">// 数组B：nums[mid+1 ... high]</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">nums: <span class="built_in">number</span>[], low: <span class="built_in">number</span>, mid: <span class="built_in">number</span>, high: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">store</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 两个数组的起始索引</span></span><br><span class="line">  <span class="keyword">let</span> i = low;</span><br><span class="line">  <span class="keyword">let</span> j = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= high) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] &lt; nums[j]) store.<span class="title function_">push</span>(nums[i++]);</span><br><span class="line">    <span class="keyword">else</span> store.<span class="title function_">push</span>(nums[j++]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt;= mid) store.<span class="title function_">push</span>(nums[i++]);</span><br><span class="line">  <span class="keyword">while</span> (j &lt;= high) store.<span class="title function_">push</span>(nums[j++]);</span><br><span class="line"></span><br><span class="line">  store.<span class="title function_">forEach</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> (nums[low++] = num));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度 O(nlgn)，空间复杂度 O(n)</p><h3 id="链表的归并排序"><a href="#链表的归并排序" class="headerlink" title="链表的归并排序"></a>链表的归并排序</h3><p><a href="https://leetcode-cn.com/problems/sort-list/">148. 排序链表</a></p><p>思路都一样，同样的三步</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sortList</span>(<span class="params">head: ListNode | <span class="literal">null</span></span>): <span class="title class_">ListNode</span> | <span class="literal">null</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (head === <span class="literal">null</span> || head.<span class="property">next</span> === <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">  <span class="keyword">const</span> dummy = <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1.划分</span></span><br><span class="line">  <span class="keyword">const</span> [back, front] = <span class="title function_">divide</span>(head);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.后续遍历</span></span><br><span class="line">  <span class="keyword">const</span> left = <span class="title function_">sortList</span>(back);</span><br><span class="line">  <span class="keyword">const</span> right = <span class="title function_">sortList</span>(front);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.合并两个有序链表</span></span><br><span class="line">  dummy.<span class="property">next</span> = <span class="title function_">merge</span>(left, right);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将链表划分成两部分</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">divide</span>(<span class="params">head: ListNode</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> back = head;</span><br><span class="line">  <span class="keyword">let</span> front = head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (front.<span class="property">next</span>) &#123;</span><br><span class="line">    front = front.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">if</span> (front.<span class="property">next</span> === <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">    front = front.<span class="property">next</span>;</span><br><span class="line">    back = back;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> result = [head, back.<span class="property">next</span>!];</span><br><span class="line">  back.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并两个有序列表 l1 l2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">l1: ListNode | <span class="literal">null</span>, l2: ListNode | <span class="literal">null</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dummy = <span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">  <span class="keyword">let</span> tail = dummy;</span><br><span class="line">  <span class="keyword">while</span> (l1 &amp;&amp; l2) &#123;</span><br><span class="line">    <span class="keyword">if</span> (l1.<span class="property">val</span> &lt; l2.<span class="property">val</span>) &#123;</span><br><span class="line">      tail.<span class="property">next</span> = l1;</span><br><span class="line">      l1 = l1.<span class="property">next</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tail.<span class="property">next</span> = l2;</span><br><span class="line">      l2 = l2.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tail = tail.<span class="property">next</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (l1) tail.<span class="property">next</span> = l1;</span><br><span class="line">  <span class="keyword">if</span> (l2) tail.<span class="property">next</span> = l2;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dummy.<span class="property">next</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组中的逆序对"><a href="#数组中的逆序对" class="headerlink" title="数组中的逆序对"></a>数组中的逆序对</h3><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/">剑指 Offer 51. 数组中的逆序对</a></p><p>这道题也是利用归并排序中的<strong>分治思想</strong>。现将数组不断划分，然后合并两个有序数组<code>a[low...mid]</code>和<code>a[mid+1...high]</code>，循环比较<code>a[i]</code>和<code>a[j]</code>的大小</p><ul><li>如果<code>a[j]</code>小，即<code>a[i...mid]</code>所有元素都比<code>a[j]</code>大，也就是说它们构成了逆序对。逆序对的数量加上<code>mid-i+1</code></li><li>如果<code>a[i]</code>小，无需处理</li></ul><h3 id="右侧较小元素个数"><a href="#右侧较小元素个数" class="headerlink" title="右侧较小元素个数"></a>右侧较小元素个数</h3><p><a href="https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/">315. 计算右侧小于当前元素的个数</a></p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sortArray</span>(<span class="params">nums: <span class="built_in">number</span>[], low = <span class="number">0</span>, high = nums.length - <span class="number">1</span></span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="title function_">partition</span>(nums, low, high);</span><br><span class="line">    <span class="title function_">sortArray</span>(nums, low, index - <span class="number">1</span>);</span><br><span class="line">    <span class="title function_">sortArray</span>(nums, index + <span class="number">1</span>, high);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 划分操作</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">partition</span>(<span class="params">nums: <span class="built_in">number</span>[], low: <span class="built_in">number</span>, high: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> target = nums[low];</span><br><span class="line">  <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high &amp;&amp; nums[high] &gt;= target) high--;</span><br><span class="line">    nums[low] = nums[high];</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high &amp;&amp; nums[low] &lt;= target) low++;</span><br><span class="line">    nums[high] = nums[low];</span><br><span class="line">  &#125;</span><br><span class="line">  nums[low] = target;</span><br><span class="line">  <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h2&gt;&lt;h3 id=&quot;数组的归并排序&quot;&gt;&lt;a href=&quot;#数组的归并排序&quot; class=&quot;headerlink&quot; title=&quot;数组的</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://zxffan.github.io/categories/Algorithm/"/>
    
    
    <category term="JavaScript" scheme="https://zxffan.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://zxffan.github.io/tags/TypeScript/"/>
    
    <category term="Algorithm" scheme="https://zxffan.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>队列问题梳理</title>
    <link href="https://zxffan.github.io/posts/631e9859.html"/>
    <id>https://zxffan.github.io/posts/631e9859.html</id>
    <published>2021-04-13T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BFS-广度优先遍历"><a href="#BFS-广度优先遍历" class="headerlink" title="BFS 广度优先遍历"></a>BFS 广度优先遍历</h2><p>BFS、广度优先、层序遍历都是一回事。需要通过队列来实现</p><h3 id="队列实现BFS"><a href="#队列实现BFS" class="headerlink" title="队列实现BFS"></a>队列实现BFS</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     val: number</span></span><br><span class="line"><span class="comment"> *     left: TreeNode | null</span></span><br><span class="line"><span class="comment"> *     right: TreeNode | null</span></span><br><span class="line"><span class="comment"> *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *         this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *         this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">levelOrder</span>(<span class="params">root: TreeNode | <span class="literal">null</span></span>): <span class="built_in">number</span>[][] &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">queue</span>: <span class="title class_">TreeNode</span>[] = [root]</span><br><span class="line">  <span class="keyword">const</span> ans = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (root === <span class="literal">null</span>) <span class="keyword">return</span> ans</span><br><span class="line">  <span class="keyword">while</span> (queue.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = queue.<span class="title function_">shift</span>()</span><br><span class="line">    ans.<span class="title function_">push</span>(node.<span class="property">val</span>)</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">left</span>) queue.<span class="title function_">push</span>(node.<span class="property">left</span>)</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">right</span>) queue.<span class="title function_">push</span>(node.<span class="property">right</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="按层次输出层序遍历"><a href="#按层次输出层序遍历" class="headerlink" title="按层次输出层序遍历"></a>按层次输出层序遍历</h3><p>在层序遍历的过程中还要记住当前处在拿一层</p><ul><li>用一个last指针指向每一层最后一个节点</li><li>或者，前序遍历。逐个给每一层添加元素。前序遍历是先遍历第一个第一个元素，然后第二层第一个元素….</li></ul><p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></p><p>往往，考题不会只靠队列这一个点。层序遍历只是解决问题的一个手段</p><h3 id="填充右侧节点"><a href="#填充右侧节点" class="headerlink" title="填充右侧节点"></a>填充右侧节点</h3><p><a href="https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/">117. 填充每个节点的下一个右侧节点指针 II</a></p><p>考点：层序遍历+last指针记住层次</p><p>层次遍历到当前节点时：</p><ul><li>当前节点是last：不修改next指针</li><li>不是last：将当前节点的next指向队列中第一个元素</li></ul><h2 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h2><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p><a href="https://leetcode-cn.com/problems/design-circular-queue/">622. 设计循环队列</a></p><p>循环队列有两种实现方式</p><h4 id="fornt-rear-used"><a href="#fornt-rear-used" class="headerlink" title="fornt+rear+used"></a>fornt+rear+used</h4><p><img src="/../../images/algorithm/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%971.png" alt="循环队列"></p><p>front和rear分别指向队头和队尾，used记录队列的元素个数，当：</p><ul><li>队列为空：front &#x3D; rear且used&#x3D;0</li><li>队列满了：front&#x3D;rear且used&#x3D;队列长度</li><li>其它情况：front !&#x3D; rear，used&#x3D;队列元素个数</li></ul><h4 id="浪费一个空间"><a href="#浪费一个空间" class="headerlink" title="浪费一个空间"></a>浪费一个空间</h4><p><img src="/../../images/algorithm/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%972.png" alt="循环队列2"></p><p>front和rear分别指向队头和队尾，当：</p><ul><li>队列为空：front &#x3D; rear</li><li>队列满了：(rear + 1) % capacity &#x3D;&#x3D; front</li><li>其它情况：front !&#x3D; rear</li></ul><h3 id="🌟在js中实现循环队列"><a href="#🌟在js中实现循环队列" class="headerlink" title="🌟在js中实现循环队列"></a>🌟在js中实现循环队列</h3><p>无需指针，直接调用数组对象的<code>push</code>和<code>shift</code>方法模拟队列。</p><p>循环队列的出现是因为其它语言的数组是定长的，在声明时就要指定长度，所以需要充分利用空间。而JavaScript中的数组，无需声明是指定长度。所以并不需要循环队列这种数据结构。</p><p>理论上<code>shift</code>删除队列首元素，会导致后面所有元素向前移动一位。但是在<code>v8</code>的优化下，这种方式比<code>front</code>+<code>rear</code>两个指针要快</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyCircularQueue</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">size</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">queue</span>: <span class="built_in">number</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">k: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = k;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">enQueue</span>(<span class="attr">value</span>: <span class="built_in">number</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isFull</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(value);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">deQueue</span>(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">shift</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Front</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Rear</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">isEmpty</span>(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">isFull</span>(): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span> === <span class="variable language_">this</span>.<span class="property">size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><p>单调队列：</p><ul><li>基于双端队列：两端都可以入队和出队</li><li>队列元素满足<strong>单调递增</strong>或者<strong>单调递减</strong></li></ul><h3 id="滑动窗口最大值"><a href="#滑动窗口最大值" class="headerlink" title="滑动窗口最大值"></a>滑动窗口最大值</h3><p><a href="https://leetcode-cn.com/problems/sliding-window-maximum/">239. 滑动窗口最大值</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;BFS-广度优先遍历&quot;&gt;&lt;a href=&quot;#BFS-广度优先遍历&quot; class=&quot;headerlink&quot; title=&quot;BFS 广度优先遍历&quot;&gt;&lt;/a&gt;BFS 广度优先遍历&lt;/h2&gt;&lt;p&gt;BFS、广度优先、层序遍历都是一回事。需要通过队列来实现&lt;/p&gt;
&lt;h3 i</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://zxffan.github.io/categories/Algorithm/"/>
    
    
    <category term="JavaScript" scheme="https://zxffan.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://zxffan.github.io/tags/TypeScript/"/>
    
    <category term="Algorithm" scheme="https://zxffan.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>vue3-任务调度</title>
    <link href="https://zxffan.github.io/posts/d2a05aba.html"/>
    <id>https://zxffan.github.io/posts/d2a05aba.html</id>
    <published>2021-04-03T16:00:00.000Z</published>
    <updated>2023-06-30T11:14:18.599Z</updated>
    
    <content type="html"><![CDATA[<p>在vue3中，修改一个响应式对象，像是这样：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;my-name&quot;</span>&gt;</span>name: &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, watchEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&quot;zxfan&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">name.<span class="property">value</span> += <span class="string">&#x27; yes!&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>当执行<code>name.value += &#39; yes!&#39;</code>，<code>vue3</code>并不会立即触发当前组件的更新。而是将更新任务放到任务队列中。这一点与vue2一致。</p><h2 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h2><p>调度相关的源码位于<code>runtime-core/src/schduler.ts</code>中</p><p>在任务调度过程中，任务会被放入三类任务队列中：</p><ul><li><p>preFlushCbs：要在执行queue之前执行的队列</p></li><li><p>queue：任务队列</p></li><li><p>postFlush：要在执行queue之后执行的队列</p></li></ul><p>每一次flush的过程（或者说一个<code>Tick</code>），都是按照<strong>清空preFlushCbs队列-&gt;清空queue队列-&gt;清空postFlush队列</strong>的顺序</p><blockquote><p>flush 指刷新任务队列，或者说 执行完任务队列中所有的任务</p></blockquote><h2 id="入队queue的时机"><a href="#入队queue的时机" class="headerlink" title="入队queue的时机"></a>入队queue的时机</h2><p><code>queue</code>存放的都是组件渲染任务</p><h3 id="组件更新"><a href="#组件更新" class="headerlink" title="组件更新"></a>组件更新</h3><p>先提一下vue中的响应式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;effect, ref&#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/reactivity&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> age = <span class="title function_">ref</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age.<span class="property">value</span>) <span class="comment">// 会输出两次，分别是 20 和 21</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">age.<span class="property">value</span> = <span class="number">21</span></span><br></pre></td></tr></table></figure><p><code>effect</code>的回调函数会被响应式得重写触发执行。</p><p>那么回到本文最开始的例子中，当执行<code>name.value += &#39; yes!&#39;</code>。响应式数据变化了，触发（<code>trigger</code>）其关联到的<code>effect</code>重新执行。那么需要重新执行的<code>effect</code>在哪里声明的呢？</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runtie-core/src/renderer.ts</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">setupRenderEffect</span>: <span class="title class_">SetupRenderEffectFn</span> = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  instance,</span></span></span><br><span class="line"><span class="params"><span class="function">  initialVNode,</span></span></span><br><span class="line"><span class="params"><span class="function">  container,</span></span></span><br><span class="line"><span class="params"><span class="function">  anchor,</span></span></span><br><span class="line"><span class="params"><span class="function">  parentSuspense,</span></span></span><br><span class="line"><span class="params"><span class="function">  isSVG,</span></span></span><br><span class="line"><span class="params"><span class="function">  optimized</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// create reactive effect for rendering</span></span><br><span class="line">  instance.<span class="property">update</span> = <span class="title function_">effect</span>(<span class="keyword">function</span> <span class="title function_">componentEffect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 省略。。。创建或更新 VNode</span></span><br><span class="line">  &#125;, __DEV__ ? <span class="title function_">createDevEffectOptions</span>(instance) : prodEffectOptions)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setupRenderEffect</code>给组件套上了个<code>effect</code>。这个函数是组件实例创建的时候调用的。</p><p>当修改组件内的响应式数据时，会触发该<code>effect</code>重新执行。</p><p>当然不会直接就执行了，注意到了吗，effect还有第二个参数。第二个参数的类型如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ReactiveEffectOptions</span> &#123;</span><br><span class="line">  lazy?: <span class="built_in">boolean</span> <span class="comment">// 该effect是否</span></span><br><span class="line">  scheduler?: <span class="function">(<span class="params">job: ReactiveEffect</span>) =&gt;</span> <span class="built_in">void</span> <span class="comment">// 调度</span></span><br><span class="line">  onTrack?: <span class="function">(<span class="params">event: DebuggerEvent</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  onTrigger?: <span class="function">(<span class="params">event: DebuggerEvent</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  onStop?: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  allowRecurse?: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其它先不关注，我们只看<code>scheduler</code>属性。</p><p>如果有这个属性，就不会直接执行<code>effect</code>，而是调用这个<code>scheduler</code>函数，并且将<code>effect</code>作为参数传给它</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params"></span></span><br><span class="line"><span class="params">  target: <span class="built_in">object</span>,</span></span><br><span class="line"><span class="params">  <span class="keyword">type</span>: TriggerOpTypes,</span></span><br><span class="line"><span class="params">  key?: <span class="built_in">unknown</span>,</span></span><br><span class="line"><span class="params">  newValue?: <span class="built_in">unknown</span>,</span></span><br><span class="line"><span class="params">  oldValue?: <span class="built_in">unknown</span>,</span></span><br><span class="line"><span class="params">  oldTarget?: <span class="built_in">Map</span>&lt;<span class="built_in">unknown</span>, <span class="built_in">unknown</span>&gt; | <span class="built_in">Set</span>&lt;<span class="built_in">unknown</span>&gt;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params">effect: ReactiveEffect</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有scheduler 调用 scheduler</span></span><br><span class="line">    <span class="keyword">if</span> (effect.<span class="property">options</span>.<span class="property">scheduler</span>) &#123;</span><br><span class="line">      effect.<span class="property">options</span>.<span class="title function_">scheduler</span>(effect)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 否则直接执行 effect</span></span><br><span class="line">      <span class="title function_">effect</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  effects.<span class="title function_">forEach</span>(run)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在给组件实例套上<code>effect</code>的时候，传给<code>effect</code>的第二个参数是什么呢？</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runtie-core/src/renderer.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> prodEffectOptions = &#123;</span><br><span class="line">  <span class="attr">scheduler</span>: queueJob,</span><br><span class="line">  <span class="comment">// #1801, #2043 component render effects should allow recursive updates</span></span><br><span class="line">  <span class="attr">allowRecurse</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createDevEffectOptions</span>(<span class="params"></span></span><br><span class="line"><span class="params">  instance: ComponentInternalInstance</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">ReactiveEffectOptions</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">scheduler</span>: queueJob,</span><br><span class="line">    <span class="attr">allowRecurse</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">onTrack</span>: instance.<span class="property">rtc</span> ? <span class="function"><span class="params">e</span> =&gt;</span> <span class="title function_">invokeArrayFns</span>(instance.<span class="property">rtc</span>!, e) : <span class="built_in">void</span> <span class="number">0</span>,</span><br><span class="line">    <span class="attr">onTrigger</span>: instance.<span class="property">rtg</span> ? <span class="function"><span class="params">e</span> =&gt;</span> <span class="title function_">invokeArrayFns</span>(instance.<span class="property">rtg</span>!, e) : <span class="built_in">void</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>__DEV__ ? createDevEffectOptions(instance) : prodEffectOptions)</code>根据不同的环境传递的参数有一些差异性。但是我们只关注scheduler，<code>scheduler</code>的值都是<code>queueJob</code>这个函数</p><p><code>queueJob</code>的作用就是将<code>effect</code>放入<code>queue</code>任务队列。</p><p>稍后在讨论<code>queueJob</code>具体都做了些什么，先总结一下组件更新的调度流程</p><ol><li><p>组件实例创建时，套上了effect方法</p></li><li><p>修改响应式数据，触发effect重新执行（先调用trigger函数）</p></li><li><p>effect的第二个参数中有<code>scheduler</code>属性，所以不会直接执行effect方法，而是将调用<code>scheduler</code>方法即<code>queueJob</code></p></li><li><p>将组件更新effect放入<code>queue</code>队列中</p></li></ol><h3 id="调用forceUpdate"><a href="#调用forceUpdate" class="headerlink" title="调用forceUpdate"></a>调用forceUpdate</h3><p>在<code>vue2</code>中可以使用<code>this.$forceUpdate</code>强制组件重新渲染。这一API在vue3 Options API中保留了下来</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runtime-core/src/componentPublicInstance.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">publicPropertiesMap</span>: <span class="title class_">PublicPropertiesMap</span> = <span class="title function_">extend</span>(<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>), &#123;</span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">$forceUpdate</span>: <span class="function"><span class="params">i</span> =&gt;</span> <span class="function">() =&gt;</span> <span class="title function_">queueJob</span>(i.<span class="property">update</span>),</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line">&#125; <span class="keyword">as</span> <span class="title class_">PublicPropertiesMap</span>)</span><br></pre></td></tr></table></figure><p>可以观察到，<code>forceUpdate</code>就是直接调用<code>queueJob</code>，并将<code>effect</code>(i.update就是effect)传入。</p><h3 id="hmr"><a href="#hmr" class="headerlink" title="hmr"></a>hmr</h3><p>开发环境下，热更新也会触发组件重新渲染。也是调用<code>queueJob</code>将更新任务加入任务队列</p><h2 id="入队preFlushCbs和postFlushCbs的时机"><a href="#入队preFlushCbs和postFlushCbs的时机" class="headerlink" title="入队preFlushCbs和postFlushCbs的时机"></a>入队preFlushCbs和postFlushCbs的时机</h2><p><code>preFlushCbs</code>存放的是组件渲染前需要完成的任务</p><p><code>postFlushCbs</code>存放的是组件渲染完成后要完成的任务</p><h3 id="watchEffect和watch"><a href="#watchEffect和watch" class="headerlink" title="watchEffect和watch"></a>watchEffect和watch</h3><p>以<code>watchEffect</code>为例，看一下它的类型声明：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">watchEffect</span>(<span class="params"></span></span><br><span class="line"><span class="params">  effect: (onInvalidate: InvalidateCbRegistrator) =&gt; <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params">  options?: WatchEffectOptions</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">StopHandle</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">WatchEffectOptions</span> &#123;</span><br><span class="line">  flush?: <span class="string">&#x27;pre&#x27;</span> | <span class="string">&#x27;post&#x27;</span> | <span class="string">&#x27;sync&#x27;</span> <span class="comment">// 默认：&#x27;pre&#x27;</span></span><br><span class="line">  onTrack?: <span class="function">(<span class="params">event: DebuggerEvent</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  onTrigger?: <span class="function">(<span class="params">event: DebuggerEvent</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>watchEffect</code>的第二个参数中有个<code>flush</code>属性，有三种取值</p><ul><li><code>pre</code>（默认）：在组件渲染前异步调用，会将任务放入<code>preFlushCbs</code>队列中</li><li><code>post</code>：在组件渲染后异步调用，会将任务放入<code>postFlushCbs</code>队列中</li><li><code>sync</code>：同步调用</li></ul><p>分析源码，来看一下具体放入队列的操作：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">watchEffect</span>(<span class="params"></span></span><br><span class="line"><span class="params">  effect: WatchEffect,</span></span><br><span class="line"><span class="params">  options?: WatchOptionsBase</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">WatchStopHandle</span> &#123;</span><br><span class="line">  <span class="comment">// 调用doWatch方法</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doWatch</span>(effect, <span class="literal">null</span>, options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doWatch</span>(<span class="params"></span></span><br><span class="line"><span class="params">  source: WatchSource | WatchSource[] | WatchEffect | <span class="built_in">object</span>,</span></span><br><span class="line"><span class="params">  cb: WatchCallback | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  &#123; immediate, deep, flush, onTrack, onTrigger &#125;: WatchOptions = EMPTY_OBJ,</span></span><br><span class="line"><span class="params">  instance = currentInstance</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">WatchStopHandle</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">const</span> <span class="attr">job</span>: <span class="title class_">SchedulerJob</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">    <span class="comment">// 会执行传入的回调 cb</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 赋值scheduler</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">scheduler</span>: <span class="title class_">ReactiveEffectOptions</span>[<span class="string">&#x27;scheduler&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> (flush === <span class="string">&#x27;sync&#x27;</span>) &#123;</span><br><span class="line">    scheduler = job</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flush === <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">    scheduler = <span class="function">() =&gt;</span> <span class="title function_">queuePostRenderEffect</span>(job, instance &amp;&amp; instance.<span class="property">suspense</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// default: &#x27;pre&#x27;</span></span><br><span class="line">    scheduler = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!instance || instance.<span class="property">isMounted</span>) &#123;</span><br><span class="line">        <span class="title function_">queuePreFlushCb</span>(job)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 第一次执行，组件未渲染的话，同步执行</span></span><br><span class="line">        <span class="title function_">job</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建effect</span></span><br><span class="line">  <span class="keyword">const</span> runner = <span class="title function_">effect</span>(getter, &#123;</span><br><span class="line">    <span class="attr">lazy</span>: <span class="literal">true</span>, <span class="comment">// true的话， effect第一次不会自动执行，而是直接返回effect</span></span><br><span class="line">    onTrack,</span><br><span class="line">    onTrigger,</span><br><span class="line">    scheduler</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结一下：</p><ol><li><p>响应式都是通过<code>effect</code>来实现的</p></li><li><p>先赋值<code>sheduler</code>，有三种情况</p><ul><li><code>flush: sync</code>：直接赋值<code>job</code>，也就是直接触发effect执行</li><li><code>flush: post</code>：赋值一个函数，函数会执行<code>queuePostRenderEffect</code>，即将<code>job</code>放入<code>postFlushCbs</code>队列</li><li><code>flush: pre</code>：赋值一个函数，函数会执行<code>queuePreRenderEffect</code>，即将<code>job</code>放入<code>preFlushCbs</code>队列</li></ul></li><li><p>创建<code>effect</code>，以实现响应式 并将<code>scheduler</code>传入。当响应式数据发生变化，就会调用<code>scheduler</code>函数</p></li></ol><p>除此之外，在Vnode创建、更新和销毁的过程中，许多环节需要在组件更新完之后再去执行相应操作。vue调用了<code>queuePostFlushCb</code>。</p><h2 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h2><p>现在来具体看一下这些<strong>任务</strong>进入任务队列中都做了什么：</p><h3 id="queueJob"><a href="#queueJob" class="headerlink" title="queueJob"></a>queueJob</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runtime-core/src/schduler.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">queueJob</span>(<span class="params">job: SchedulerJob</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断队列中是否已有该job，没有才会添加到任务队列中</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    (!queue.<span class="property">length</span> ||</span><br><span class="line">      !queue.<span class="title function_">includes</span>(</span><br><span class="line">        job,</span><br><span class="line">        isFlushing &amp;&amp; job.<span class="property">allowRecurse</span> ? flushIndex + <span class="number">1</span> : flushIndex</span><br><span class="line">      )) &amp;&amp;</span><br><span class="line">    job !== currentPreFlushParentJob</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 找的任务在任务队列中合适的位置</span></span><br><span class="line">    <span class="keyword">const</span> pos = <span class="title function_">findInsertionIndex</span>(job)</span><br><span class="line">    <span class="keyword">if</span> (pos &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      queue.<span class="title function_">splice</span>(pos, <span class="number">0</span>, job)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      queue.<span class="title function_">push</span>(job)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 清空任务队列</span></span><br><span class="line">    <span class="title function_">queueFlush</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先进行重复判断。<strong>这是确保任务队列中不会出现多个相同组件的effect，防止组件重复渲染</strong>。</p><p>最终调用<code>queueFlush</code>来执行清空任务队列（执行完所有任务）</p><h3 id="queuePreFlushCb"><a href="#queuePreFlushCb" class="headerlink" title="queuePreFlushCb"></a>queuePreFlushCb</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runtime-core/src/schduler.ts</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queueCb</span>(<span class="params"></span></span><br><span class="line"><span class="params">  cb: SchedulerCbs,</span></span><br><span class="line"><span class="params">  activeQueue: SchedulerCb[] | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  pendingQueue: SchedulerCb[],</span></span><br><span class="line"><span class="params">  index: <span class="built_in">number</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isArray</span>(cb)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      !activeQueue ||</span><br><span class="line">      !activeQueue.<span class="title function_">includes</span>(</span><br><span class="line">        cb,</span><br><span class="line">        (cb <span class="keyword">as</span> <span class="title class_">SchedulerJob</span>).<span class="property">allowRecurse</span> ? index + <span class="number">1</span> : index</span><br><span class="line">      )</span><br><span class="line">    ) &#123;</span><br><span class="line">      pendingQueue.<span class="title function_">push</span>(cb)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    pendingQueue.<span class="title function_">push</span>(...cb)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 清空任务队列</span></span><br><span class="line">  <span class="title function_">queueFlush</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">queuePreFlushCb</span>(<span class="params">cb: SchedulerCb</span>) &#123;</span><br><span class="line">  <span class="title function_">queueCb</span>(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">queuePostFlushCb</span>(<span class="params">cb: SchedulerCbs</span>) &#123;</span><br><span class="line">  <span class="title function_">queueCb</span>(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>queuePreFlushCb</code>和<code>queuePostFlushCb</code>都会再去调用<code>queueCb</code>函数，这个函数做两件事</p><ol><li>将任务放入响应的任务队列（当然 先判断重复）</li><li>执行<code>queueFlush</code>，来清空任务队列</li></ol><h3 id="queueFlush"><a href="#queueFlush" class="headerlink" title="queueFlush"></a>queueFlush</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runtime-core/src/schduler.ts</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">resolvedPromise</span>: <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt; = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queueFlush</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!isFlushing &amp;&amp; !isFlushPending) &#123;</span><br><span class="line">    isFlushPending = <span class="literal">true</span></span><br><span class="line">    currentFlushPromise = resolvedPromise.<span class="title function_">then</span>(flushJobs)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flushJobs</span>(<span class="params">seen?: CountMap</span>) &#123;</span><br><span class="line">  <span class="comment">// 省略...</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 1. 清空preFlushCb队列</span></span><br><span class="line">  <span class="title function_">flushPreFlushCbs</span>(seen)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 省略...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 2. 清空queue队列</span></span><br><span class="line">    <span class="keyword">for</span> (flushIndex = <span class="number">0</span>; flushIndex &lt; queue.<span class="property">length</span>; flushIndex++) &#123;</span><br><span class="line">      <span class="keyword">const</span> job = queue[flushIndex]</span><br><span class="line">      <span class="keyword">if</span> (job) &#123;</span><br><span class="line">        <span class="comment">// 执行job，也就是前面传入的effect</span></span><br><span class="line">        <span class="title function_">callWithErrorHandling</span>(job, <span class="literal">null</span>, <span class="title class_">ErrorCodes</span>.<span class="property">SCHEDULER</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 清空postFlushCbs队列</span></span><br><span class="line">    <span class="title function_">flushPostFlushCbs</span>(seen)</span><br><span class="line"><span class="comment">// 省略...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>清空队列主要流程：</p><ol><li>异步执行<code>flushJob</code>，这里使用了<code>resolvedPromise.then(flushJobs)</code>。将清空队列的操作变成了异步。</li><li>清空preFlushCb队列</li><li>清空queue队列</li><li>清空postFlushCbs队列</li></ol><p>这里的“清空”是执行队列中所有任务的意思</p><h2 id="nextTick原理？"><a href="#nextTick原理？" class="headerlink" title="nextTick原理？"></a>nextTick原理？</h2><p>先看一段demo：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;span class=&quot;my-name&quot;&gt;name: &#123;&#123;name&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; nextTick, onMounted, ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const name = ref(&quot;zxfan&quot;)</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  name.value += &#x27; yes!&#x27;</span><br><span class="line">  const dom = document.querySelector(&quot;.my-name&quot;)</span><br><span class="line">  </span><br><span class="line">  console.log(dom?.innerHTML); // 输出：name: zxfan</span><br><span class="line">  nextTick(() =&gt; &#123;</span><br><span class="line">    console.log(dom?.innerHTML); // 输出：name: zxfan yes!</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>由于修改响应式数据，不会立即触发组件重渲染，所以第一个<code>console.log</code>输出的内容是上一次渲染的内容。而<code>nexTick</code>注册的回调会等到在渲染完毕后执行。</p><p>我们看一下<code>nextTick</code>是如何实现的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// runtime-core/src/schduler.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">nextTick</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="variable language_">this</span>: ComponentPublicInstance | <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params">  fn?: () =&gt; <span class="built_in">void</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> p = currentFlushPromise || resolvedPromise</span><br><span class="line">  <span class="keyword">return</span> fn ? p.<span class="title function_">then</span>(<span class="variable language_">this</span> ? fn.<span class="title function_">bind</span>(<span class="variable language_">this</span>) : fn) : p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到，它是等promise执行完毕后在去执行回调函数。那么这个promise是什么呢？</p><ul><li><code>currentFlushPromise</code>：这个promise我们刚刚遇到过，是在<code>queueFlush</code>中赋值的。这个promise会在本轮任务队列全部清空后才会变成<code>fullfilled</code>。这是再去调用nextTick的回调，就能获取到最新的dom</li><li><code>resolvedPromise</code>：说明现在任务队列为空，那就包装一层promise并返回</li></ul><p>要理解nextTick，还需要结合浏览器的<strong>事件循环</strong>来分析，我们先明确几个知识点：</p><ol><li>浏览器的事件循环将事件放到两个队列——<strong>宏任务队列</strong>和**微任务队列</li><li>每一次事件循环，会优先先清空微任务队列</li><li>promise属于微任务</li></ol><p>以下面的demo为例，解释一下从修改响应式数据到<code>nextTick</code>中回调执行的过程</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name.<span class="property">value</span> += <span class="string">&#x27; yes!&#x27;</span></span><br><span class="line"><span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dom?.<span class="property">innerHTML</span>); <span class="comment">// 输出：name: zxfan yes!</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>当执行<code>name.value += &#39; yes!&#39;</code>时，响应式数据发生了改变。<ul><li>触发Proxy的setter，将<strong>更新组件任务的effect</strong>放入vue任务队列中（调用queueJob）</li><li>调用queueFlush，这里调用了<code>promise.resolve</code>，所以将<strong>flushJobs</strong>放入微任务队列</li><li>此时微任务队列&#x3D; [flushJobs]</li></ul></li><li>接着执行<code>nextTick</code>。等待<code>currentFlushPromise</code>执行完毕</li><li>开始清空微任务队列。先执行flushJobs，执行<strong>更新组件任务的effect</strong>，这个过程会操作DOM，一旦操作DOM。浏览器会进行线程切换。由<strong>JS线程</strong>切换到<strong>渲染线程</strong>，浏览器去更新DOM。当DOM更新完毕，在切换回<strong>JS线程</strong>。回到JS线程后，<code>currentFlushPromise</code>状态变成<code>fullfilled</code>。将nextTick的回调<code>cb</code>放入微任务队列。此时微任务队列&#x3D; [cb]</li><li>继续清空微任务队列，执行cb。此时如果在cb中访问dom，就是渲染完成后的dom内容。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/../../images/Vue/vue%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6.png" alt="vue任务调度.png"></p><h2 id="Vue2中的表现"><a href="#Vue2中的表现" class="headerlink" title="Vue2中的表现"></a>Vue2中的表现</h2><h3 id="任务调度-1"><a href="#任务调度-1" class="headerlink" title="任务调度"></a>任务调度</h3><p>vu2的任务调度原理也是类似。</p><ol><li>组件的响应式数据发生改变，会触发setter方法。</li><li>触发<code>dep.notify()</code>。</li><li>遍历dep对象上的<code>watcher</code>，逐一调用其<code>update</code>方法，（Watcher对象是在渲染组件时创建的，用来更新组件）</li><li>update再调用<code>queueWatcher</code>，将更新任务加入任务队列</li><li>调用<code>nextTick(flushSchedulerQueue)</code>，用来清空任务队列。<code>nextTick</code>是为了让组件更新变成异步。</li></ol><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h3><p>vue2中的nextTick比vue3多了些内容。</p><p>nextTick也模拟了一个回调任务队列<code>callbacks</code>（注意这不是调度的任务队列）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">nextTick</span> (cb?: <span class="title class_">Function</span>, ctx?: <span class="title class_">Object</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> _resolve</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 将回调加入队列中</span></span><br><span class="line">  callbacks.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cb.<span class="title function_">call</span>(ctx)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="title function_">handleError</span>(e, ctx, <span class="string">&#x27;nextTick&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_resolve) &#123;</span><br><span class="line">      <span class="title function_">_resolve</span>(ctx)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果队列没有正在执行（flush），就去清空队列</span></span><br><span class="line">  <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">    pending = <span class="literal">true</span></span><br><span class="line">    <span class="title function_">timerFunc</span>() <span class="comment">// 清空队列</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// $flow-disable-line</span></span><br><span class="line">  <span class="keyword">if</span> (!cb &amp;&amp; <span class="keyword">typeof</span> <span class="title class_">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      _resolve = resolve</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nextTick调用了<code>timeFunc</code>来清空队列</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flushCallbacks</span> () &#123;</span><br><span class="line">  <span class="comment">// 省略... 就是清空callbakcs任务队列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timerFunc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 支持promise，就用promise来模拟异步</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="title function_">isNative</span>(<span class="title class_">Promise</span>)) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    p.<span class="title function_">then</span>(flushCallbacks)</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (isIOS) <span class="built_in">setTimeout</span>(noop)</span><br><span class="line">  &#125;</span><br><span class="line">  isUsingMicroTask = <span class="literal">true</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 2. 不支持promise 就用MutationObserver来模拟异步</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!isIE &amp;&amp; <span class="keyword">typeof</span> <span class="title class_">MutationObserver</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; (</span><br><span class="line">  <span class="title function_">isNative</span>(<span class="title class_">MutationObserver</span>) ||</span><br><span class="line">  <span class="comment">// PhantomJS and iOS 7.x</span></span><br><span class="line">  <span class="title class_">MutationObserver</span>.<span class="title function_">toString</span>() === <span class="string">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class="line">)) &#123;</span><br><span class="line">  <span class="comment">// Use MutationObserver where native Promise is not available,</span></span><br><span class="line">  <span class="comment">// e.g. PhantomJS, iOS7, Android 4.4</span></span><br><span class="line">  <span class="comment">// (#6466 MutationObserver is unreliable in IE11)</span></span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(flushCallbacks)</span><br><span class="line">  <span class="keyword">const</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="title class_">String</span>(counter))</span><br><span class="line">  observer.<span class="title function_">observe</span>(textNode, &#123;</span><br><span class="line">    <span class="attr">characterData</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    counter = (counter + <span class="number">1</span>) % <span class="number">2</span></span><br><span class="line">    textNode.<span class="property">data</span> = <span class="title class_">String</span>(counter)</span><br><span class="line">  &#125;</span><br><span class="line">  isUsingMicroTask = <span class="literal">true</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.用setImmediate来模拟异步</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="title function_">isNative</span>(setImmediate)) &#123;</span><br><span class="line"></span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setImmediate</span>(flushCallbacks)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// Fallback to setTimeout.</span></span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(flushCallbacks, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了更多的兼容浏览器，timerFunc模拟异步判断了三种情况</p><ol><li>支持Promise，就直接用Promise来模拟异步。Promise属于微任务</li><li>不支持Promise，支持MutationObserver。MutationObserver也属于微任务<ul><li>创建一个空的文本节点，监听这个文本节点的字符变化。变化了就调用<code>flushCallbacks</code>来清空回调任务队列</li><li>调用<code>timerFunc</code>，会修改文本节点的内容，从而触发<code>flushCallbacks</code>函数的执行</li></ul></li><li><code>MutationObserver</code>和<code>Promise</code>都不支持，就用<code>setImmediate</code>来模拟异步，后者属于宏任务</li><li>最后方案就是使用setTimeout来模拟异步</li></ol><p>可见<code>vue2</code>为了兼容性，下足了功夫。而<code>vue3</code>直接就使用了<code>Promise</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在vue3中，修改一个响应式对象，像是这样：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="源码" scheme="https://zxffan.github.io/categories/%E6%BA%90%E7%A0%81/"/>
    
    
    <category term="vue" scheme="https://zxffan.github.io/tags/vue/"/>
    
  </entry>
  
</feed>
